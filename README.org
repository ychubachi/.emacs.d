#+startup: content num noindent
* Header
** はじめに
   - init.elの実行時、このREADME.orgからREADME.elを生成します。
   - orgのハッケージは手動で最新版に更新しておきます。

** Copyright
- Copyright など。

#+begin_src emacs-lisp
;;; README.el --- My README.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020 Yoshihide Chubachi

;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  My README.el.

;;; Code:
#+end_src

** フォントのインストール
   - (font-family-list) で利用できるフォントが確認できる。

* 準備
** (require 'cl)を検査しない

#+begin_src emacs-lisp
(setq byte-compile-warnings '(not cl-functions obsolete))
#+end_src

** ここの意味が理解できてない

#+begin_src emacs-lisp
  ;; this enables this running method
  ;;   emacs -q -l ~/.debug.emacs.d/{{pkg}}/init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
            (expand-file-name
             (file-name-directory
              (or load-file-name byte-compile-current-file))))))
#+end_src
** パッケージの設定

#+begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org"   . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu"   . "https://elpa.gnu.org/packages/")))
    (package-initialize))
#+end_src

#+RESULTS:

** leaf
*** パッケージのインストール
    #+begin_src emacs-lisp
      (unless (package-installed-p 'leaf)
        (package-refresh-contents)
        (package-install 'leaf))
    #+end_src

    #+RESULTS:

*** leaf-keywords

    #+begin_src emacs-lisp
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf leaf-keywords
        :ensure t
        :init
        (leaf hydra :ensure t)
        (leaf el-get :ensure t)
        (leaf blackout :ensure t)
        :config
        ;; initialize leaf-keywords.el
        (leaf-keywords-init))
    #+end_src

*** leaf-convert
    #+begin_src emacs-lisp
      (leaf leaf-convert :ensure t)
    #+end_src

*** leaf-tree
    #+begin_src emacs-lisp
      (leaf leaf-tree
        :ensure t
        :custom
        ((imenu-list-size . 30)
         (imenu-list-position . 'left)))
    #+end_src

*** cus-edit

    #+begin_src emacs-lisp
      (leaf cus-edit
        :doc "tools for customizing Emacs and Lisp packages"
        :tag "builtin" "faces" "help"
        :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
    #+end_src
 
*** cus-start
    
    #+begin_src emacs-lisp
            (leaf cus-start
              :doc "define customization properties of builtins"
              :tag "builtin" "internal"
              :bind (("\C-z" . undo))
              :preface
              (defun c/redraw-frame nil
                (interactive)
                (redraw-frame))
              :bind (("M-ESC ESC" . c/redraw-frame))
              :custom '((user-full-name . "Yoshihide Chubachi")
                        (user-mail-address . "yoshi@chubachi.net")
                        (user-login-name . "yc")
                        (create-lockfiles . nil)
                        (debug-on-error . t)
                        (init-file-debug . t)
                        (frame-resize-pixelwise . t)
                        (enable-recursive-minibuffers . t)
                        (history-length . 1000)
                        (history-delete-duplicates . t)
                        (scroll-preserve-screen-position . t)
                        (scroll-conservatively . 100)
                        (mouse-wheel-scroll-amount . '(1 ((control) . 5)))
                        (ring-bell-function . 'ignore)
                        (text-quoting-style . 'straight)
                        (truncate-lines . t)
                        ;; (use-dialog-box . nil)
                        ;; (use-file-dialog . nil)
                        ;; (menu-bar-mode . t)
                        ;; (tool-bar-mode . nil)
                        (scroll-bar-mode . nil)
                        (indent-tabs-mode . nil)
                        (inhibit-startup-screen . t))
              :config
              (defalias 'yes-or-no-p 'y-or-n-p)
              (keyboard-translate ?\C-h ?\C-?))
    #+end_src

    #+RESULTS:
    : cus-start

* ビルトインパッケージの設定
** paren

- 対応するカッコの表示

#+begin_src emacs-lisp
  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :custom ((show-paren-delay . 0.1))
    :global-minor-mode show-paren-mode)
#+end_src

** isearch

- isearch で漢字入力ができるようにする

#+begin_src emacs-lisp
  (leaf isearch
    :bind ((isearch-mode-map
            ("C-o" . isearch-toggle-input-method))))
#+end_src

** wdired

- 多分設定が中途はんぱ

#+begin_src emacs-lisp
  (leaf wdired
    :doc "Rename files editing their names in dired buffers"
    :tag "builtin"
    :added "2020-11-21"
    :bind ((wdired-mode-map
            ("C-o" . toggle-input-method))))
#+end_src

** autorevert
- ディスクのファイルが更新されたらバッファも自動で更新する

#+begin_src emacs-lisp

  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :tag "builtin"
    :custom ((auto-revert-interval . 0.1))
    :global-minor-mode global-auto-revert-mode)
#+end_src

** macrostep

- elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf macrostep
    :doc "interactive macro expander"
    :req "cl-lib-0.5"
    :tag "debugging" "macro" "languages" "lisp"
    :url "https://github.com/joddie/macrostep"
    :ensure t
    :bind (("C-c e" . macrostep-expand)))
#+end_src

* helm
** straightパッケージマネージャー

   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (setq package-enable-at-startup nil)
   #+end_src

** Helm
*** Helm本体
    - [[https://github.com/emacs-helm/helm/wiki#helm-mode][Home · emacs-helm/helm Wiki]]
     
   #+begin_src emacs-lisp
     (leaf helm
       :preface
       (straight-use-package 'helm)
       :bind
       ("M-x" . helm-M-x)
       ("C-x r b" . helm-filtered-bookmarks)
       ("C-x C-f" . helm-find-files)
       ("C-c h" . helm-mini)
       :config
       (helm-mode 1))
   #+end_src

   #+RESULTS:
   : helm
  
*** helm-recentf
   #+begin_src emacs-lisp
     (leaf helm-recentf
       :bind ("C-c r" . helm-recentf)
       :custom
       (recentf-max-saved-items . 2000)
       (recentf-auto-cleanup quote never)
       (recentf-exclude quote
                        ("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:"))
       :config
       (setq recentf-auto-save-timer (run-with-idle-timer 30 t 'recentf-save-list))
       (recentf-mode 1))
   #+end_src

   #+RESULTS:
   : helm-recentf

* org-mode
** 基本設定

- org-agenda-filesのリストにDropboxのディレクトリを追加しておく。
  - この中にあるorgファイルがすべてagendaに反映される。
- org-num-modeをすべてのファイルで実行する
  - (org-startup-numerated . t)がうまく反映されない。
- Androd端末から利用するには [[https://play.google.com/store/apps/details?id=com.orgzly][Orgzly]] が良さそう。

   #+begin_src emacs-lisp
     (leaf org-mode 
       :custom
       (org-directory . "~/Dropbox/org/")
       (org-agenda-files . '("~/Dropbox/org/"))
       (org-default-notes-file . "Notes.org")
       (org-refile-targets . '((org-agenda-files :tag . "REFILE")))
       :bind
       ("C-c l" . org-store-link)
       ("C-c a" . org-agenda)
       ("C-c c" . org-capture))
   #+end_src

   #+RESULTS:
   : org-mode

** org-captureのテンプレート設定

   - [[https://orgmode.org/manual/Capture.html][Capture (The Org Manual)]]
   - [[https://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][Setting up capture (The Org Manual)]]
   - [[https://www.5ing-myway.com/org-capture/][org-captureをカスタマイズして、すばやくメモを取る方法 | 趣味に生きる。]]

   - ファイルは org-directory 以下にある。
     
   #+begin_src emacs-lisp
     (leaf org-capture-templates
       :setq ((org-capture-templates quote
                                     (("m" "メモ" entry
                                       (file "Memo.org")
                                       "* %?\nEntered on %t\n%a\n%i\n")
                                      ("t" "タスク（スケジュールなし）" entry
                                       (file+headline "List.org" "すること")
                                       "** TODO %? \n")
                                      ("s" "タスク（スケジュールあり）" entry
                                       (file+headline "List.org" "すること")
                                       "** TODO %? \n   SCHEDULED: %^t \n")
                                      ("l" "やりたいこと" checkitem
                                       (file+headline "List.org" "やりたいこと")
                                       "[ ] %? \n")
                                      ("b" "欲しいもの" checkitem
                                       (file+headline "List.org" "欲しいもの")
                                       "[ ] %? \n")
                                      ("g" "行きたいところ" checkitem
                                       (file+headline "List.org" "行きたいところ")
                                       "[ ] %? \n")))))
   #+end_src

   #+RESULTS:
   : org-capture-templates

** org-tempo
   - "<el"+<TAB>　でemacs-lispのソースコードブロックがでるように設定。
   
   #+begin_src emacs-lisp
     (leaf org-tempo
       :require t
       :config
       (add-to-list 'org-structure-template-alist
                    '("el" . "src emacs-lisp")))
   #+end_src

   #+RESULTS:
   : org-tempo

** latex関連
*** latex本体
    - latexでPDFを作成するには C-c C-e l p
    - Windows用のPDFビューワはsumatrapdf（scoopでインストール可）

    #+begin_src emacs-lisp
      (require 'ox-latex)

      (setq org-latex-pdf-process
            '("platex -shell-escape %f"
              "platex -shell-escape %f"
              "pbibtex %b"
              "platex -shell-escape %f"
              "platex -shell-escape %f"
              "dvipdfmx %b.dvi"))
    #+end_src

*** ソースコード整形
    - pygmentをインストールしておく
      - python インストールして pip install pygments

    #+begin_src emacs-lisp
      (setq org-export-latex-listings t)

      (setq org-latex-listings 'minted)
      (setq org-latex-minted-options
            '(("frame" "lines")
              ("framesep=2mm")
              ("linenos=true")
              ("baselinestretch=1.2")
              ("fontsize=\\footnotesize")
              ("breaklines")
              ))

      (add-to-list 'org-latex-packages-alist "\\usepackage{minted}" t)
    #+end_src

    #+RESULTS:
    | \usepackage{minted} |

*** Beamer

- beamerの作成は C-c C-e l P

#+begin_src emacs-lisp
  (require 'ox-beamer)
  (setq org-beamer-outline-frame-title "目次")
  (setq org-beamer-frame-default-options "t") ; フレームの位置をtopにする。
#+end_src

* 外部パッケージ
** undo-tree
   - [[https://elpa.gnu.org/packages/undo-tree.html][GNU ELPA - undo-tree]]
     
   #+begin_src emacs-lisp
     (leaf undo-tree
       :ensure t
       :config
       (global-undo-tree-mode))
   #+end_src
   
** fly-check

- emacs-lispのドキュメント用のチェック(emacs-lisp-checkdoc)を無効にする。

#+begin_src emacs-lisp
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :emacs>= 24.3
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :custom ((flycheck-emacs-lisp-initialize-packages . t)
             (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook)
    :config
    (leaf flycheck-package
      :doc "A Flycheck checker for elisp package authors"
      :ensure t
      :config
      (flycheck-package-setup))

    (leaf flycheck-elsa
      :doc "Flycheck for Elsa."
      :emacs>= 25
      :ensure t
      :config
      (flycheck-elsa-setup))
    )
#+end_src

** pandoc-mode

- C-c / でメニュー表示
- http://joostkremers.github.io/pandoc-mode/

#+begin_src emacs-lisp
  (leaf pandoc-mode
    :doc "Minor mode for interacting with Pandoc"
    :req "hydra-0.10.0" "dash-2.10.0"
    :tag "pandoc" "text"
    :added "2020-11-24"
    :url "http://joostkremers.github.io/pandoc-mode/"
    :ensure t
    :after hydra)
#+end_src

** magit
- EmacsのGit
#+begin_src emacs-lisp
  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :req "emacs-25.1" "async-20200113" "dash-20200524" "git-commit-20200516" "transient-20200601" "with-editor-20200522"
    :tag "vc" "tools" "git" "emacs>=25.1"
    :added "2020-11-30"
    :emacs>= 25.1
    :ensure t
    :after git-commit with-editor
    :bind (("C-x g" . magit-status)))
#+end_src

** doomthemes
*** all-the-icons
    - パッケージ導入後、 M-x all-the-icons-install-fonts でインストールする
   #+begin_src emacs-lisp
     (leaf all-the-icons
       :ensure t)
   #+end_src

   #+RESULTS:
   : all-the-icons
    
*** doom-themes
   - custom-faceが機能していないかも
   - [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf][Emacsモダン化計画 -かわEmacs編- - Qiita]]

   #+begin_src emacs-lisp
     (leaf doom-themes
       :ensure t
       :custom ((doom-themes-enable-italic . t)
                (doom-themes-enable-bold . t))
       :custom-face
       (doom-modeline-bar . '((t (:background "#6272a4"))))
       :config
       (doom-themes-visual-bell-config)  
       (doom-themes-neotree-config)
       (doom-themes-org-config)
       (load-theme 'doom-dracula t))
   #+end_src

*** modeline
   #+begin_src emacs-lisp
     (leaf doom-modeline
       :ensure t
       :custom
       ;; (doom-modeline-buffer-file-name-style . 'truncate-with-project)
       ;; (doom-modeline-icon . t)
       ;; (doom-modeline-major-mode-icon . nil)
       ;; (doom-modeline-minor-modes . nil)
       :init
       ;; (after-init . doom-modeline-mode)
       (doom-modeline-mode 1)
       :config
       ;;   (line-number-mode 0)
       ;;   (column-number-mode 0)
       ;;   (doom-modeline-def-modeline 'main
       ;; '(bar workspace-number window-number evil-state god-state ryo-modal xah-fly-keys matches buffer-info remote-host buffer-position parrot selection-info)
           ;; '(misc-info persp-name lsp github debug minor-modes input-method major-mode process vcs checker))
       )
   #+end_src

** migemo
  
   - [[https://hangstuck.com/emacs-cmigemo-windows/][Windowsでの Emacsでmigemo を有効にする設定方法 | ハングスタック]]
   - migemoの辞書は絶対パスで参照する
   - その他の変数はデフォルトで動作する
   - とりあえずWindowsで動くようにした

  #+begin_src emacs-lisp
    (leaf migemo
      :when (and
             (eq system-type 'windows-nt)
             (file-exists-p "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict"))
      :ensure t
      :setq 
      (migemo-dictionary . "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict")
      :config
      (load-library "migemo")
      (migemo-init))
  #+end_src

  #+RESULTS:
  : migemo

* OS依存の設定
  - OSの判定方法
    [[https://hangstuck.com/emacs-system-type/][Emacsの設定ファイルをOSの判定をして共有する方法｜system-type | ハングスタック]]

** Linuxでmozcの設定
   - elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf mozc-im
    :if (eq system-type 'gnu/linux)
    :doc "Mozc with input-method-function interface."
    :req "mozc-0"
    :tag "extentions" "i18n"
    :ensure t
    :require mozc-im
    :custom
    ((default-input-method . "japanese-mozc-im"))
    :bind (("C-o" . toggle-input-method))
    )
#+end_src

** Windows IME設定
   - [[https://nosubject.io/windows10-emacs-27-w32-ime/][[Emacs] Windows10 で Emacs 27 を使う | ** nosubject.io **]]
   - [[https://qiita.com/tawara_/items/0a7b8c50a48ea86b2d91][あの IBM が作ったオープンソース日本語フォントを使い、プログラミングフォント『PlemolJP』を作ってみた - Qiita]]

   #+begin_src emacs-lisp
     (leaf tr-ime
       :when (eq system-type 'windows-nt)
       :ensure t
       :setq
       (default-input-method . "W32-IME")
       (w32-ime-mode-line-state-indicator-list . '("[--]" "[あ]" "[--]"))
       :setq-default
       (w32-ime-mode-line-state-indicator . "[--]")
       :config
       (tr-ime-standard-install)
       (w32-ime-initialize)
       ;; IME制御（yes/noなどの入力時にIMEをoffにする
       (wrap-function-to-control-ime 'universal-argument t nil)
       (wrap-function-to-control-ime 'read-string nil nil)
       (wrap-function-to-control-ime 'read-char nil nil)
       (wrap-function-to-control-ime 'read-from-minibuffer nil nil)
       (wrap-function-to-control-ime 'y-or-n-p nil nil)
       (wrap-function-to-control-ime 'yes-or-no-p nil nil)
       (wrap-function-to-control-ime 'map-y-or-n-p nil nil)
       ;; 通常使用するフォント
       ;; (set-frame-font "BIZ UDゴシック-12" nil t)
       (set-frame-font "PlemolJP-12" nil t)
       (setq-default line-spacing 0) ; 行間
       ;; IME未確定時のフォント設定
       (modify-all-frames-parameters '((ime-font . "PlemolJP-12")))
       :bind
       ("C-o" . toggle-input-method))
    #+end_src

    #+RESULTS:
    : tr-ime

   #+begin_src emacs-lisp
     (when (eq system-type 'windows-nt)
       (package-install 'tr-ime)
       (tr-ime-standard-install)
       (setq default-input-method "W32-IME")
       (w32-ime-initialize))
   #+end_src

* Footer

- お約束の記述

#+begin_src emacs-lisp
(provide 'README)

;; Local Variables:
;; indent-tabs-mode: nil
;; byte-compile-warnings: (not cl-functions obsolete)
;; End:

;;; README.el ends here
#+end_src
