#+STARTUP: overview indent num align inlineimages logdone hidestars hideblocks
* はじめに
** この設定について
   - init.elの実行時、このREADME.orgからREADME.elを生成します。
   - orgのハッケージは手動で最新版に更新しておきます。

** 事前にインストールしておくもの
- 各種フォント
  - Noto Sans Mono CJK JP-12
- migemo
  - cmigemo
- pygment
  - python3をインストール
  - /home/yc/.local/binにパス
  - pip install -U pip
  - pip install pygments
- graphviz(dot)
  - sudo apt install graphviz
- org-roam
  - sqlite3

** Copyright
- Copyright など。

#+begin_src emacs-lisp
;;; README.el --- My README.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020 Yoshihide Chubachi

;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  My README.el.

;;; Code:
#+end_src

* パッケージ管理・カスタマイズ変数
** パッケージ管理（straight）

   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (setq package-enable-at-startup nil)
   #+end_src

** パッケージ管理（Leaf）
*** leaf
- [[https://qiita.com/conao3/items/dc88bdadb0523ef95878#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB][[正式リリース]leaf.elで雑然としたEmacs設定ファイル「init.el」をクリーンにする - Qiita]]

#+begin_src emacs-lisp
  (prog1 "prepare leaf"
    (prog1 "package"
      (custom-set-variables
       '(package-archives '(("org"   . "https://orgmode.org/elpa/")
                            ("melpa" . "https://melpa.org/packages/")
                            ("gnu"   . "https://elpa.gnu.org/packages/"))))
      (package-initialize))

    (prog1 "leaf"
      (unless (package-installed-p 'leaf)
        (unless (assoc 'leaf package-archive-contents)
          (package-refresh-contents))
        (condition-case err
            (package-install 'leaf)
          (error
           (package-refresh-contents)       ; renew local melpa cache if fail
           (package-install 'leaf))))

      (leaf leaf-keywords
        :ensure t
        :config (leaf-keywords-init)))

    (prog1 "optional packages for leaf-keywords"
      ;; optional packages if you want to use :hydra, :el-get,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t
        :custom ((el-get-git-shallow-clone  . t)))))
#+end_src

#+RESULTS:
: leaf-keywords

*** Leaf tree/leaf-convert
- [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7#%E4%BE%BF%E5%88%A9%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB][Emacs入門から始めるleaf.el入門 - Qiita]]

#+begin_src emacs-lisp
  (leaf leaf
    :config
    (leaf leaf-convert :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
               (imenu-list-position . 'left))))
#+end_src

#+RESULTS:
: leaf

** カスタマイズファイルの設定（cus-edit）

#+begin_src emacs-lisp
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
#+end_src

#+RESULTS:
: cus-edit

** customize変数の設定（cus-start）
- 設定がまぜこぜになっている気が。

#+begin_src emacs-lisp
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :preface
    (defun c/redraw-frame nil
      (interactive)
      (redraw-frame))
    :bind (("M-ESC ESC" . c/redraw-frame))
    :custom '((user-full-name . "Yoshihide Chubachi")
              (user-mail-address . "yoshi@chubachi.net")
              (user-login-name . "yc")
              (create-lockfiles . nil)
              (debug-on-error . t)
              (init-file-debug . t)
              (frame-resize-pixelwise . t)
              (enable-recursive-minibuffers . t)
              (history-length . 1000)
              (history-delete-duplicates . t)
              (scroll-preserve-screen-position . t)
              (scroll-conservatively . 100)
              (mouse-wheel-scroll-amount . '(1 ((control) . 5)))
              (ring-bell-function . 'ignore)
              (text-quoting-style . 'straight)
              (truncate-lines . nil)
              (use-dialog-box . nil)
              (use-file-dialog . nil)
              (menu-bar-mode . t)
              (tool-bar-mode . nil)
              (scroll-bar-mode . nil)
              (indent-tabs-mode . nil)
              (inhibit-startup-screen . t)
              (vc-follow-symlinks . t) ; VC対象ファイルのシンボリックリンクの場合、本体を辿る
              (auto-revert-check-vc-info . t) ; VCで更新があった場合、自動で更新
              ))
#+end_src

#+RESULTS:
: cus-start

** バックアップの設定
- 文献
  - [[https://ayatakesi.github.io/emacs/24.5/Backup-Names.html][GNU Emacs Manual(Japanese Translation): Backup Names]]
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup-Deletion.html][If delete-old-versions is t, Emacs deletes the excess backup files silently.]]

#+begin_src emacs-lisp
    (leaf *backup
      :custom ((version-control . t)
               (backup-directory-alist . '(("." . ".~")))
               (delete-old-versions . t)))
#+end_src

#+RESULTS:
: *backup

* Emacs本体の設定
** (require 'cl)を検査しない

#+begin_src emacs-lisp
  (leaf *emacs
    :config
    (setq byte-compile-warnings '(not cl-functions obsolete)))
#+end_src

#+RESULTS:
: *emacs

** C-hをBSに
- [[https://www.reddit.com/r/spacemacs/comments/l2fjzy/remapping_ch_to_backspace_and_remap_help_menu_to/][Remapping C-h to backspace, and remap "help" menu to anything else? : spacemacs]]

- :init ではなく :config だと機能しない
  - :config の中身は eval-after-load で実行される
  - :bindがあるとこうなるようだ
- help-map は :bind で設定できない
  - ここでは :bind を利用しない
  - :bind を利用しなければ :init と :config

#+begin_src emacs-lisp
  (leaf *backspace
    :config
    (global-set-key (kbd "C-@") help-map)
    (global-set-key (kbd "C-h") 'delete-backward-char))
#+end_src

#+RESULTS:
: *backspace

** UndoをC-zに
- 指が覚えてしまっている

#+begin_src emacs-lisp
  (leaf *undo :bind (("C-z" . undo)))
#+end_src

#+RESULTS:
: *undo

** yes/noの選択をy/nに簡略化

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+RESULTS:
: yes-or-no-p

** 保存時、不要な空白を削除

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

#+RESULTS:
| delete-trailing-whitespace |

* ビルトインパッケージの設定
** paren
- 対応するカッコの表示

#+begin_src emacs-lisp
  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :custom ((show-paren-delay . 0.1))
    :global-minor-mode show-paren-mode)
#+end_src

** isearch

- isearch で漢字入力ができるようにする

#+begin_src emacs-lisp
  (leaf isearch
    :bind ((isearch-mode-map
            ("C-o" . isearch-toggle-input-method))))
#+end_src

** wdired

- [[https://ohzeki.hatenablog.com/entry/20160115/1452838970][Emacsのdired表示でファイル名編集 - ohzeki’s diary]]

#+begin_src emacs-lisp
  (leaf wdired
    :doc "Rename files editing their names in dired buffers"
    :tag "builtin"
    :added "2020-11-21"
    :require t
    :config
    (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
    :bind ((wdired-mode-map
            ("C-o" . toggle-input-method))))
#+end_src

#+RESULTS:
: wdired

** autorevert
- ディスクのファイルが更新されたらバッファも自動で更新する

#+begin_src emacs-lisp

  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :tag "builtin"
    :custom ((auto-revert-interval . 0.1))
    :global-minor-mode global-auto-revert-mode)
#+end_src

** macrostep

- elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf macrostep
    :doc "interactive macro expander"
    :req "cl-lib-0.5"
    :tag "debugging" "macro" "languages" "lisp"
    :url "https://github.com/joddie/macrostep"
    :package t
    :bind (("C-c e" . macrostep-expand)))
#+end_src

#+RESULTS:
: macrostep

** recentf

#+begin_src emacs-lisp
  (leaf recentf
    :custom
    (recentf-max-saved-items . 2000)
    (recentf-auto-cleanup quote never)
    (recentf-exclude quote
                     ("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:"))
    :config
    (setq recentf-auto-save-timer
          (run-with-idle-timer 30 t (lambda () (let ((save-silently t)) (recentf-save-list)))))
    (recentf-mode 1))
#+end_src

#+RESULTS:
: recentf

** midnight - 一定期間使用しなかった buffer を自動削除

- [[https://uwabami.github.io/cc-env/Emacs.html][midnight: 一定期間使用しなかった buffer を自動削除]]

#+begin_src emacs-lisp
(leaf midnight
  :custom
  ((clean-buffer-list-delay-general . 1))
  :hook
  (emacs-startup-hook . midnight-mode))
#+end_src

#+RESULTS:
: midnight

** which-key - キーバインドのガイド

#+begin_src emacs-lisp
  (leaf which-key
    :doc "Display available keybindings in popup"
    :req "emacs-24.4"
    :tag "emacs>=24.4"
    :url "https://github.com/justbur/emacs-which-key"
    :added "2021-10-20"
    :emacs>= 24.4
    :ensure t
    :config
    (which-key-mode))
#+end_src

#+RESULTS:
: which-key

** imenu-list

#+begin_src emacs-lisp
  (leaf *imenu-list
    :bind (("C-^" . imenu-list-smart-toggle)))
#+end_src

#+RESULTS:
: *imenu-list

** align - コメントの位置を揃えたりする

#+begin_src emacs-lisp
  (leaf align
    :doc "align text to a specific column, by regexp"
    :tag "builtin"
    :added "2021-10-30"
    :bind (("C-c M-a" . align-regexp))
    )
#+end_src

#+RESULTS:
: align

* ミニバッファ補完UI関連の設定
** vertico:本体の設定

- [[https://github.com/minad/vertico/][GitHub - minad/vertico: vertico.el - VERTical Interactive COmpletion]]

#+begin_src emacs-lisp
(leaf vertico
  :straight t
  :custom
  ;; 最大20件まで表示するように
  (vertico-count . 20)
  :config
  (vertico-mode)
  (setq vertico-resize t)
  (setq vertico-cycle t)
  )
#+end_src

#+RESULTS:
: vertico

** orderless
- [[https://github.com/oantolin/orderless][GitHub - oantolin/orderless: Emacs completion style that matches multiple regexps in any order]]

#+begin_src emacs-lisp
  (leaf orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch))
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

#+RESULTS:
: orderless

** savehist

#+begin_src emacs-lisp
;; Persist history over Emacs restarts. Vertico sorts by history position.
(leaf savehist
  :straight t
  :init
  (savehist-mode))
#+end_src

#+RESULTS:
: savehist

** Marginalia
- [[https://github.com/minad/marginalia][GitHub - minad/marginalia: marginalia.el - Marginalia in the minibuffer]]
- Enable richer annotations using the Marginalia package

#+begin_src emacs-lisp
  (leaf marginalia
    :straight t
    :bind (:minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia

** embark
- [[https://github.com/oantolin/embark][GitHub - oantolin/embark: Emacs Mini-Buffer Actions Rooted in Keymaps]]

#+begin_src emacs-lisp
  (leaf embark
    :straight t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-@ B" . embark-bindings) ;; alternative for `describe-bindings' (C-h->C-@)
)
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

#+RESULTS:
: embark

** consult
- [[https://github.com/minad/consult][GitHub - minad/consult: consult.el - Consulting completing-read]]

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (leaf consult
    :straight t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; ("C-c r" . consult-recent-file)           ;; added by yc
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           (:isearch-mode-map
             ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
             ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
             ("M-s L" . consult-line-multi)))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )
#+end_src

#+RESULTS:
: consult

** embark-consult

#+begin_src emacs-lisp
  ;; Consult users will also want the embark-consult package.
  (leaf embark-consult
    :straight t
    :after (embark consult)
;;    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
;;    :hook
;;    (embark-collect-mode . consult-preview-at-point-mode)
)
#+end_src

#+RESULTS:
: embark-consult

* org-mode関連の設定
** orgのためのディレクトリ設定
- org-agenda-filesのリストにDropboxのディレクトリを追加しておく。
  - この中にあるorgファイルがすべてagendaに反映される。
- org-num-modeをすべてのファイルで実行する
  - (org-startup-numerated . t)がうまく反映されない。
- Androd端末から利用するには [[https://play.google.com/store/apps/details?id=com.orgzly][Orgzly]] が良さそう。

#+begin_src emacs-lisp
  (leaf org-mode
    :custom
    (org-directory . "~/Dropbox/Org/")
    (org-agenda-files . '("~/Dropbox/Org/" "~/Dropbox/Org/Roam" "~/Dropbox/Org/Roam/Journals"))
    (org-default-notes-file . "Notes.org")
    (org-refile-targets . '((org-agenda-files :tag . "REFILE")))
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture))
#+end_src

#+RESULTS:
: org-mode

** org-modeでRETURNでリンクを開く

- C-mでも可

#+begin_src emacs-lisp
  (leaf org-mode
    :config
    (setq org-return-follows-link  t))
#+end_src

#+RESULTS:
: org-mode

** doctを利用したorg-captureの設定

- [[https://orgmode.org/manual/Capture.html][Capture (The Org Manual)]]
- [[https://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][Setting up capture (The Org Manual)]]
- [[https://www.5ing-myway.com/org-capture/][org-captureをカスタマイズして、すばやくメモを取る方法 | 趣味に生きる。]]

- ファイルは org-directory 以下にある。

- [[https://github.com/progfolio/doct#installation][GitHub - progfolio/doct: DOCT: Declarative Org Capture Templates for Emacs]]
- ミニバッファで日本語が入力できない
- [[https://blog.tomoya.dev/posts/a-new-wave-has-arrived-at-emacs/][Emacsの次世代ミニバッファ補完UI | 日々、とんは語る。]]

#+begin_src emacs-lisp
  (leaf doct
    :ensure t
    ;;recommended: defer until calling doct
    ;:commands (doct)
    :config
    (setq org-capture-templates
        (doct '(("Memo" :keys "m"
                 :prepend t
                 :empty-lines-after 1
                 :jump-to-captured t
                 :file "~/Dropbox/Org/Memo.org"
                 :datetree t
                 :todo-state "TODO"
                 :template ("* %{todo-state} %^{Description}"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "\n%?"))
                ("Blog" :keys "b"
                 :prepend t
                 :empty-lines-after 1
                 :jump-to-captured t
                 :children (
                   ("ychubachi.github.io"  :keys "g"
                             :file "~/Dropbox/Org/ychubachi.github.io.org"
                             :headline   "Blog"
                             :todo-state "TODO"
                             :export_file_name (lambda () (concat (format-time-string "%Y%m%d-%H%M%S")))
                             :template ("* %{todo-state} %^{Description}"
                                        ":PROPERTIES:"
                                        ":Created: %T"
                                        ":EXPORT_FILE_NAME: %{export_file_name}"
                                        ":EXPORT_DATE: %U"
                                        ":END:"
                                        "\n%?"))
                   ("ploversky.net" :keys "p"
                             :file "~/Dropbox/Org/blog/ploversky.net/ploversky.net.org"
                             :todo-state "TODO"
                             :template ("* %{todo-state} %^{Description}"
                                        ":PROPERTIES:"
                                        ":Created: %u"
                                        ":CATEGORY: Blog"
                                        ":POST_TAGS: Blog"
                                        ":BLOG:     plover"
                                        ":END:"
                                        "%?"))
                            ))
                ("Parent" :keys "p"
                 :file "~/example.org"
                 :prepend t
                 :template ("* %{todo-state} %^{Description}"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "%?")
                 :children (("First Child"  :keys "1"
                             :headline   "One"
                             :todo-state "TODO"
                             :hook (lambda () (message "\"First Child\" selected.")))
                            ("Second Child" :keys "2"
                             :headline   "Two"
                             :todo-state "NEXT")
                            ("Third Child"  :keys "3"
                             :headline   "Three"
                             :todo-state "MAYBE")))
                )
              )
        )
  )
#+end_src

#+RESULTS:
: doct

#+begin_src emacs-lisp
  (define-key global-map
    (kbd "C-c m")
    (lambda () (interactive) (org-capture nil "m")))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (org-capture nil m) |

** org-tempo - ソースコードブロック入力の省力化
   - "<el"+<TAB> 等でemacs-lispのソースコードブロックがでるように設定。

#+begin_src emacs-lisp
  (leaf org-tempo
    :require t
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist
                 '("bash" . "src bash"))
    )
#+end_src

#+RESULTS:
: org-tempo

** latex関連
*** orgでlatexの設定例
    - 表題・筆者・日付の書き方

    #+begin_comment
    #+TITLE: とても素晴らしい研究の発表
    #+AUTHOR: 中鉢 欣秀, CHUBACHI Yoshihide
    #+DATE: 2021-08-06
    #+end_comment

    - 目次を出力しない

    #+begin_comment
    #+OPTIONS: toc:nil # hoge
    #+end_comment

    - 参考
      - [[https://www-he.scphys.kyoto-u.ac.jp/member/shotakaha/dokuwiki/doku.php?id=toolbox:emacs:org:latex:start][Org-LaTeX [QumaWiki]]]
      - [[https://taipapamotohus.com/post/org-mode_paper_3/][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） | A perfect autumn day]]

    #+begin_comment
#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
      #+end_comment

*** latex本体
- [[https://texwiki.texjp.org/?Emacs%2FOrg%20mode#h20d131a][Emacs/Org mode - TeX Wiki]]
  - org-latex-pdf-process は記載の通りだと%S等をorg側で置換しようとしてエラー
- latexmkの設定は~/.latexmkrcに記述
  - [[https://texwiki.texjp.org/?Latexmk#g2a2cf08][Latexmk - TeX Wiki]]
  - latexmkの相性のせいか、org-export-in-backgroundをtにするとエラー
- LaTeXの文字列部分は別ファイルにするのがよいかもしれない
  - [[http://ergoemacs.org/emacs/elisp_read_file_content.html][Elisp: Read File Content as String or List of Lines]]

#+begin_src emacs-lisp
  (leaf ox-latex
    :require t
    :setq ((org-latex-default-class . "bxjsarticle")
           (org-latex-pdf-process . '("latexmk -gg -pdfdvi -pvc- %f"))
           (org-file-apps . '(("pdf" . "evince %s")))
           (org-export-in-background . nil))
    :config
    (add-to-list
     'org-latex-classes
     '("bxjsarticle"
       "% begin org-latex-class bxjsarticle
    \\documentclass[autodetect-engine,dvi=dvipdfmx,11pt,a4paper,ja=standard]{bxjsarticle}
    [NO-DEFAULT-PACKAGES]
    \\usepackage{amsmath}
    \\usepackage{newtxtext,newtxmath}
    \\usepackage{graphicx}
    \\usepackage{hyperref}
    \\ifdefined\\kanjiskip
      \\usepackage{pxjahyper}
      \\hypersetup{colorlinks=true}
    \\else
      \\ifdefined\\XeTeXversion
          \\hypersetup{colorlinks=true}
      \\else
        \\ifdefined\\directlua
          \\hypersetup{pdfencoding=auto,colorlinks=true}
        \\else
          \\hypersetup{unicode,colorlinks=true}
        \\fi
      \\fi
    \\fi
    % end org-latex-class bxjsarticle"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list
     'org-latex-classes
     '("jlreq"
       "% begin org-latex-class jlreq
  \\documentclass[11pt,paper=a4]{jlreq}
  [NO-DEFAULT-PACKAGES]
  \\usepackage{amsmath}
  \\usepackage{newtxtext,newtxmath}
  \\ifdefined\\kanjiskip
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage[dvipdfmx]{hyperref}
    \\usepackage{pxjahyper}
    \\hypersetup{colorlinks=true}
  \\else
    \\usepackage{graphicx}
    \\usepackage{hyperref}
    \\hypersetup{pdfencoding=auto,colorlinks=true}
  \\fi
  % end org-latex-class jlreq"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list
     'org-latex-classes
     '("jlreq-tate"
       "% begin org-latex-class jlreq-tate
  \\documentclass[tate,11pt,paper=a4]{jlreq}
  [NO-DEFAULT-PACKAGES]
  \\usepackage{amsmath}
  \\usepackage{newtxtext,newtxmath}
  \\ifdefined\\kanjiskip
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage[dvipdfmx]{hyperref}
    \\usepackage{pxjahyper}
    \\hypersetup{colorlinks=true}
  \\else
    \\usepackage{graphicx}
    \\usepackage{hyperref}
    \\hypersetup{pdfencoding=auto,colorlinks=true}
  \\fi
  % end org-latex-class jlreq-tate"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

#+RESULTS:
: ox-latex

*** ソースコードの pretty print
- Windowsの場合
  - scoopでpygmentをインストールしておく
  - python インストールして pip install pygments
  - PATHの登録
    - C:\Users\yc\scoop\apps\python\current\Scripts

  #+begin_src emacs-lisp
    (setq org-export-latex-listings t)

    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("frame" "lines")
            ("framesep=2mm")
            ("linenos=true")
            ("baselinestretch=1.2")
            ("fontsize=\\footnotesize")
            ("breaklines")
            ))

    (add-to-list 'org-latex-packages-alist "\\usepackage{minted}" t)
  #+end_src

  #+RESULTS:
  | \usepackage{minted} |

*** Beamer

- beamerの作成は C-c C-e l P

#+begin_src emacs-lisp
  (require 'ox-beamer)
  (setq org-beamer-outline-frame-title "目次")
  (setq org-beamer-frame-default-options "t") ; フレームの位置をtopにする。
#+end_src

*** TODO 参考文献 RefTex-Mode
    - [[https://taipapamotohus.com/post/org-mode_paper_3/][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） | A perfect autumn day]]
    - [[https://github.com/jkitchin/org-ref][jkitchin/org-ref: org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools to go with it.]]
    - [[https://aliquote.org/post/org-and-bibtex/][Org and Bibtex - aliquote]]

    - org-refはHelmに依存しているようだ

      ;; (leaf org-ref
      ;;   :ensure t
      ;;   :require t
      ;;   :setq ((reftex-default-bibliography quote
      ;;                                       ("~/git/bibliography/references.bib"))

      ;;          (org-ref-bibliography-notes . "~/git/bibliography/notes.org")
      ;;          (org-ref-default-bibliography quote
      ;;                                        ("~/git/bibliography/references.bib"))
      ;;          (org-ref-pdf-directory . "~/git/bibliography/bibtex-pdfs/")

      ;;          (bibtex-completion-bibliography . "~/git/bibliography/references.bib")
      ;;          (bibtex-completion-library-path . "~/git/bibliography/bibtex-pdfs")
      ;;          (bibtex-completion-notes-path . "~/git/bibliography/helm-bibtex-notes")
      ;;          )
      ;;   :config
      ;;   (push '(migemo) helm-source-bibtex)

      ;;   ;; (define-key org-mode-map (kbd "C-c b c") `org-ref-helm-insert-cite-link)
      ;;   ;; (define-key org-mode-map (kbd "C-c b l") `org-ref-helm-insert-label-link)
      ;;   ;; (define-key org-mode-map (kbd "C-c b r") `org-ref-helm-insert-ref-link)
      ;;   )

#+begin_src emacs-lisp
  (leaf org-ref
    :package t
    :config
    (setq bibtex-completion-bibliography '("~/git/bibliography/references.bib")
          bibtex-completion-library-path '("~/git/bibliography/bibtex-pdfs/")
          bibtex-completion-notes-path "~/git/bibliography/notes/"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))
#+end_src

#+RESULTS:
: org-ref

#+begin_src emacs-lisp
  (leaf bibtex
    :require t
    :config
    (setq bibtex-autokey-year-length 4
            bibtex-autokey-name-year-separator "-"
            bibtex-autokey-year-title-separator "-"
            bibtex-autokey-titleword-separator "-"
            bibtex-autokey-titlewords 2
            bibtex-autokey-titlewords-stretch 1
            bibtex-autokey-titleword-length 5
            org-ref-bibtex-hydra-key-binding (kbd "H-b"))

    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body))
#+end_src

#+RESULTS:
: bibtex


- org-ref-insert-cite-function = nil
- org-ref-insert-label-function = nil
- org-ref-insert-ref-function = nil

** babel - Grophviz (dot)

- dotコードの評価を行うようにする
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t))) ; this line activates dot
#+end_src

- babelで評価するときに確認を出さない
  - [[https://emacs.stackexchange.com/questions/23946/how-can-i-stop-the-confirmation-to-evaluate-source-code-when-exporting-to-html][org mode - How can I stop the confirmation to evaluate source code when exporting to html? - Emacs Stack Exchange]]

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

- インラインイメージの自動再描画
  - [[https://emacs.stackexchange.com/questions/3302/live-refresh-of-inline-images-with-org-display-inline-images][org mode - live refresh of inline images with org-display-inline-images - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

#+RESULTS:

** スピードコマンド

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+RESULTS:
: t

** org2blog
- [[https://github.com/org2blog/org2blog#requirements-and-compatibility][org2blog/org2blog: Blog from Org mode to WordPress.]]
- パスワードは~/.netrcに書く

#+begin_src emacs-lisp
    (leaf org2blog
      :ensure t
      :config
      (require 'auth-source)
      (let* ((credentials (auth-source-user-and-password "ploversky.net"))
             (username (nth 0 credentials))
             (password (nth 1 credentials))
             (config `("plover"
                       :url "https://ploversky.net/xmlrpc.php"
                       :username ,username
                       :password ,password)))
        (setq org2blog/wp-blog-alist `(,config))) ;; FIXED
  )
#+end_src

#+RESULTS:
: org2blog

** ox-hugo
- [[https://github.com/kaushalmodi/ox-hugo][GitHub - kaushalmodi/ox-hugo: A carefully crafted Org exporter back-end for Hugo]]

#+begin_src emacs-lisp
  (leaf ox-hugo
    :ensure t
    :require t
    :after ox)
#+end_src

#+RESULTS:
: ox-hugo

** org-superstar
  * org-bullets の進化版
    + [[https://github.com/integral-dw/org-superstar-mode/blob/master/DEMO.org][org-superstar-mode/DEMO.org at master · integral-dw/org-superstar-mode · GitHub]]
  * asterisk
    + plus
      - minus

#+begin_src emacs-lisp
  (leaf org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda nil (org-superstar-mode 1))))
#+end_src

#+RESULTS:
: org-superstar

** org-rome

- org-romeを利用するための設定

#+begin_src emacs-lisp
  (leaf org-roam
    :ensure t
    :require t
    :custom
    (org-roam-directory . "~/Dropbox/Org/Roam/")
    (org-roam-completion-everywhere . t)
    (org-roam-capture-templates
     . '(("d" "default" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ("m" "備忘録（Memo）" plain
          (file "~/Dropbox/Org/Roam/Templates/MemoTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ("k" "会議録（Meeting）" plain
          (file "~/Dropbox/Org/Roam/Templates/MeetingTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ("t" "文書（LaTeX）" plain
          (file "~/Dropbox/Org/Roam/Templates/LaTeXTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)
         ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :init
    (setq org-roam-v2-ack t)
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+end_src

#+RESULTS:
: org-roam

** org-roam-dialiesでジャーナル

#+begin_src emacs-lisp
  (leaf org-roam-dailies
    :after org-roam

    :config
    (setq org-roam-dailies-directory "Journals/")

    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?\n#+DATE: %T"
             :target (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d>\n")))))
#+end_src

#+RESULTS:
: org-roam-dailies

* 外部パッケージ
** undo-tree
   - [[https://elpa.gnu.org/packages/undo-tree.html][GNU ELPA - undo-tree]]

   #+begin_src emacs-lisp
     (leaf undo-tree
       :ensure t
       :config
       (global-undo-tree-mode))
   #+end_src

** fly-check

- emacs-lispのドキュメント用のチェック(emacs-lisp-checkdoc)を無効にする。

#+begin_src emacs-lisp
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :emacs>= 24.3
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :custom ((flycheck-emacs-lisp-initialize-packages . t)
             (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook)
    :config
    (leaf flycheck-package
      :doc "A Flycheck checker for elisp package authors"
      :ensure t
      :config
      (flycheck-package-setup))

    (leaf flycheck-elsa
      :doc "Flycheck for Elsa."
      :emacs>= 25
      :ensure t
      :config
      (flycheck-elsa-setup))
    )
#+end_src

** pandoc-mode

- C-c / でメニュー表示
- http://joostkremers.github.io/pandoc-mode/

#+begin_src emacs-lisp
  (leaf pandoc-mode
    :doc "Minor mode for interacting with Pandoc"
    :req "hydra-0.10.0" "dash-2.10.0"
    :tag "pandoc" "text"
    :added "2020-11-24"
    :url "http://joostkremers.github.io/pandoc-mode/"
    :ensure t
    :after hydra)
#+end_src

** magit
- EmacsのGit
#+begin_src emacs-lisp
  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :req "emacs-25.1" "async-20200113" "dash-20200524" "git-commit-20200516" "transient-20200601" "with-editor-20200522"
    :tag "vc" "tools" "git" "emacs>=25.1"
    :added "2020-11-30"
    :emacs>= 25.1
    :ensure t
    :after git-commit with-editor
    :bind (("C-x g" . magit-status))
    )
#+end_src

#+RESULTS:
: magit

** migemo
*** Linux
- .emacs.d/migemo-dictを用意
  - cmigemoをインストールして
  - /usr/share/cmigemo/utfg-8/migemo-dictをコピー
- [[https://github.com/emacs-jp/migemo][emacs-jp/migemo: emacs migemo client]]
#+begin_src emacs-lisp
  (leaf migemo
    :when (eq system-type 'gnu/linux)
    :ensure t
    :require t
    :config
    ;; cmigemo(default)
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs"))

    ;; ruby migemo
    ;; (setq migemo-command "ruby")
    ;; (setq migemo-options '("-S" "migemo" "-t" "emacs" "-i" "\a"))

    ;; Set your installed path
    (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")

    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix)
    (migemo-init)
    )
#+end_src

#+RESULTS:
: migemo

*** Windows
- [[https://hangstuck.com/emacs-cmigemo-windows/][Windowsでの Emacsでmigemo を有効にする設定方法 | ハングスタック]]
- migemoの辞書は絶対パスで参照する
- その他の変数はデフォルトで動作する
- とりあえずWindowsで動くようにした

#+begin_src emacs-lisp
  (leaf migemo
    :when (and
           (eq system-type 'windows-nt)
           (file-exists-p "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict"))
    :ensure t
    :setq
    (migemo-dictionary . "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict")
    :config
    (load-library "migemo")
    (migemo-init))
#+end_src

  #+RESULTS:
  : migemo

** yasnippet
- [[https://github.com/joaotavora/yasnippet][joaotavora/yasnippet: A template system for Emacs]]
- サンプルは次の場所にあるので必要なものは ~/.emacs.d/snippets にコピー
  - ~/.emacs.d/elpa/yasnippet-snippets-20210910.1959/snippets/

- :setq を使う場合の注意
  - :init だと :init -> :setq の順番でNG
  - :config なら :setq -> :init
- :require との関係
  -  :init -> :require -> :setq -> :config

- :require なし
  - :init -> NG

    #+begin_src
  (prog1 'yasnippet-snippets
    (leaf-handler-leaf-path yasnippet-snippets)
    (leaf-handler-leaf-protect yasnippet-snippets
      (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
      (yas-global-mode 1) ; <- 2
      (setq yasnippet-snippets-dir "~/.emacs.d/snippets"))) ; <- 1
    #+end_src

  - :config -> NG

    #+begin_src
  (prog1 'yasnippet-snippets
    (leaf-handler-leaf-path yasnippet-snippets)
    (leaf-handler-leaf-protect yasnippet-snippets
      (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
      (setq yasnippet-snippets-dir "~/.emacs.d/snippets") ; <- 1
      (yas-global-mode 1))) ; <- 2
    #+end_src

- :require あり

  - :init -> NG

    #+begin_src
(prog1 'yasnippet-snippets
  (leaf-handler-leaf-path yasnippet-snippets)
  (leaf-handler-leaf-protect yasnippet-snippets
    (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
    (yas-global-mode 1)
    (require 'yasnippet-snippets)
    (setq yasnippet-snippets-dir "~/.emacs.d/snippets")))
    #+end_src

  - :config -> OK

    #+begin_src
(prog1 'yasnippet-snippets
  (leaf-handler-leaf-path yasnippet-snippets)
  (leaf-handler-leaf-protect yasnippet-snippets
    (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
    (require 'yasnippet-snippets)
    (setq yasnippet-snippets-dir "~/.emacs.d/snippets")
    (yas-global-mode 1)))
    #+end_src

#+begin_src emacs-lisp
  (leaf yasnippet-snippets
    :package t
    :require t
    :setq
    (yasnippet-snippets-dir . "~/.emacs.d/snippets")
    :config
    (yas-global-mode 1))
#+end_src

#+RESULTS:
: yasnippet-snippets

** multiple-cursors
+ [[https://dev.classmethod.jp/articles/emacs-multiple-cursors/][複数カーソルを操作するパッケージ multiple-cursors.el のご紹介 | DevelopersIO]]

+ リージョンを選択してカーソルをあわせる
+ region-bindings-modeとともに使うとよい

#+begin_src emacs-lisp
    (leaf multiple-cursors
      :package t
      :config
      ;; use region-bindings-mode instead
      ;; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      ;; (global-set-key (kbd "C->")         'mc/mark-next-like-this)
      ;; (global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
      ;; (global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this))
      )
#+end_src

#+RESULTS:
: multiple-cursors

** region-bindings-mode
+ [[https://tam5917.hatenablog.com/entry/20130129/1359465171][region-bindings-modeの紹介 - 備忘録]]
+ [[https://github.com/magnars/expand-region.el][magnars/expand-region.el: Emacs extension to increase selected region by semantic units.]]
+ [[https://github.com/fgallina/region-bindings-mode][GitHub - fgallina/region-bindings-mode: A minor mode that enables custom bindings when mark is active.]]

#+begin_src emacs-lisp
  (leaf region-bindings-mode
    :package t
    :require t
    :config
    (region-bindings-mode-enable)
    (define-key region-bindings-mode-map "e" 'mc/edit-lines)
    (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
    (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
    (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
    (define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
    )
#+end_src

#+RESULTS:
: region-bindings-mode

* UI・見た目（Non X）
** modus-themes
- [[https://protesilaos.com/modus-themes/][Modus Themes (Modus Operandi and Modus Vivendi) | Protesilaos Stavrou]]

#+begin_src emacs-lisp
  (leaf modus-themes
    :ensure t                        ; omit this to use the built-in themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-region '(bg-only no-extend))

    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src

#+RESULTS:
: modus-themes

** whitespace - 空白文字の可視化                                    :NOLEAF:
- [[https://yanqirenshi.hatenablog.com/entry/2016/07/03/Emacs%3A_whitespace_%E3%81%A7%E4%BD%99%E5%88%86%E3%81%AA%E7%A9%BA%E7%99%BD/%E3%82%BF%E3%83%96%E3%81%AB%E8%89%B2%E3%81%A5%E3%81%91][Emacs: whitespace で余分な空白/タブに色づけ - ほんとのこと知りたいだけなのに。]]
  - M-x list-faces-display で設定する色の種類と色を確認できます。
  - 設定する色は M-x list-colors-display で確認する感じ。
- 色はテーマのデフォルトのままにしておく。

　　　ああ全角　　　　　←全角　あいうえお
あいうえお　漢字

#+begin_src emacs-lisp
  (progn
    (require 'whitespace)
    (setq whitespace-style
          '(
            face ; faceで可視化
            trailing ; 行末
            tabs ; タブ
            spaces ; スペース
            space-mark ; 表示のマッピング
            tab-mark
            ))
    (setq whitespace-display-mappings
          '(
            (space-mark ?\u3000 [?□])
            (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])
            ))
    (setq whitespace-trailing-regexp  "\\([ \u00A0]+\\)$")
    (setq whitespace-space-regexp "\\(\u3000+\\)")
    ;; (set-face-attribute 'whitespace-trailing nil
    ;;                     :foreground nil
    ;;                     :background "DarkOrange1"
    ;;                     :underline nil)
    ;; (set-face-attribute 'whitespace-tab nil
    ;;                     :foreground "DarkOrange1"
    ;;                     :background nil
    ;;                     :underline nil)
    ;; (set-face-attribute 'whitespace-space nil
    ;;                     :foreground "DarkOrange1"
    ;;                     :background nil
    ;;                     :underline nil)
    (global-whitespace-mode t))
#+end_src

#+RESULTS:
: t

* UI・見た目（X）
** フォントの設定                                                   :NOLEAF:
- Noto Sansの等幅フォントを設定する
- 表示の確認

- [[https://uwabami.github.io/cc-env/Emacs.html][Emacs の設定 | Youhei SASAKI’s official site]] より

#+begin_example
| mmmm |
| llll |
| 日本 |
| 漢字 |
| ああ |
| んん |
| ￥￥ |
| \\\\ |
| 　　   |
|      |

|abcdefghijkl|
|ABCDEFGHIJKL|
|'";:-+=/\~`?|
|∞≤≥∏∑∫|
|×±≒≡⊆⊇|  ← GUI だと一部半角になる
|αβγδεζ|  ← GUI だと半角になる
|ηθικλμ|  ← GUI だと半角になる
|ΑΒΓΔΕΖ|  ← GUI だと半角になる
|ΗΘΙΚΛΜ|  ← GUI だと半角になる
|日本語の美観|
|あいうえおか|
|アイウエオカ|
|ｱｲｳｴｵｶｷｸｹｺｻｼ|

| hoge                 | hogeghoe | age              |
|----------------------+----------+------------------|
| 今日もいい天気ですね | お、     | 等幅になった👍 🍺|
|----------------------+----------+------------------|
#+end_example

#+begin_src emacs-lisp
(set-frame-font "Noto Sans Mono CJK JP-12" nil t)
;; ↓漢字がボールド体にならない
;; (set-frame-font "PlemolJP-12" nil t)
;; (set-frame-font "HackGen-12" nil t)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(setq-default line-spacing 0) ; 行間
#+end_src

#+RESULTS:
: 0

** フレームサイズ                                                   :NOLEAF:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Frame-Parameters.html][https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Frame-Parameters.html]]
- [[https://www.grugrut.net/posts/my-emacs-init-el/][My Emacs Config - ぐるっとぐりっど]]

#+begin_src emacs-lisp
  (setq default-frame-alist
        (append '((width                . 120)   ; フレーム幅
                  (height               . 40 )   ; フレーム高
                  (left                 . 2000)  ; 配置左位置（左右2画面の場合）
                  (top                  . 50 )   ; 配置上位置
                  (line-spacing         . 0  )   ; 文字間隔
                  (left-fringe          . 12 )   ; 左フリンジ幅
                  (right-fringe         . 12 )   ; 右フリンジ幅
                  (menu-bar-lines       . 1 )    ; メニューバー
                  (tool-bar-lines       . 0 )    ; ツールバー
                  (cursor-type          . box)   ; カーソル種別
                  (alpha                . 100)   ; 透明度
                  )
                default-frame-alist))
  (setq initial-frame-alist default-frame-alist)

  (modify-frame-parameters nil '((sticky . t) (width . 100) (height . 40))) ; Xを使う場合の高速化設定らしい
#+end_src

#+RESULTS:

** all-the-icons
- [[https://github.com/domtronn/all-the-icons.el][GitHub - domtronn/all-the-icons.el: A utility package to collect various Icon Fonts and propertize them within Emacs.]]

- パッケージ導入後、 M-x all-the-icons-install-fonts でOSにフォントを
  インストールする

#+begin_src emacs-lisp
  (leaf all-the-icons :ensure t)
#+end_src

#+RESULTS:
: all-the-icons

** doom-modeline - モードラインにアイコン表示
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-10-20 Wed 14:06
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: UI・見た目
  :ARCHIVE_CATEGORY: README
  :END:
  #+begin_src emacs-lisp
    (leaf doom-modeline
      :ensure t
      :custom
      ;; (doom-modeline-buffer-file-name-style . 'truncate-with-project)
      ;; (doom-modeline-icon . t)
      ;; (doom-modeline-major-mode-icon . nil)
      ;; (doom-modeline-minor-modes . nil)
      :init
      ;; (after-init . doom-modeline-mode)
      (doom-modeline-mode 1)
      :config
      ;; (line-number-mode 1)
      ;; (column-number-mode 0)
      ;;   (doom-modeline-def-modeline 'main
      ;; '(bar workspace-number window-number evil-state god-state ryo-modal xah-fly-keys matches buffer-info remote-host buffer-position parrot selection-info)
          ;; '(misc-info persp-name lsp github debug minor-modes input-method major-mode process vcs checker))
      )
  #+end_src

  #+RESULTS:
  : doom-modeline

* OS依存の設定
  - OSの判定方法
    [[https://hangstuck.com/emacs-system-type/][Emacsの設定ファイルをOSの判定をして共有する方法｜system-type | ハングスタック]]

** Linuxでmozcの設定
- 参考
  - [[https://w.atwiki.jp/ntemacs/pages/48.html][emacs-mozc を動かすための設定（Emacs 設定編） - NTEmacs @ ウィキ - atwiki（アットウィキ）]]

#+begin_src emacs-lisp
  (leaf mozc-im
    :if (eq system-type 'gnu/linux)
    :doc "Mozc with input-method-function interface."
    :req "mozc-0"
    :tag "extentions" "i18n"
    :ensure t
    :require mozc-im
    :custom
    ((default-input-method . "japanese-mozc-im"))
    :bind (("C-o" . toggle-input-method))
    :config
    (require 'mozc-im)
    (require 'wdired)

    ;; Mozc をデフォルトにする
    (setq default-input-method "japanese-mozc-im")

    ;; カーソルの点滅を OFF にする
    (blink-cursor-mode 0)

    ;; popup スタイルを使用する
    ;; (leaf mozc-popup
    ;;   :ensure t
    ;;   :config
    ;;   (setq mozc-candidate-style 'popup))

    ;; カーソルカラーを設定する
    (leaf mozc-cursor-color
      :require t ; el-get を利用するため ensure ではなく require
      :el-get iRi-E/mozc-el-extensions
      :config
      ;; カーソルカラーを設定する
      (setq mozc-cursor-color-alist '((direct        . "orchid")
                                      (read-only     . "yellow")
                                      (hiragana      . "green")
                                      (full-katakana . "goldenrod")
                                      (half-ascii    . "dark orchid")
                                      (full-ascii    . "orchid")
                                      (half-katakana . "dark goldenrod")))

      (defvar-local mozc-im-mode nil)
      (add-hook 'mozc-im-activate-hook
                (lambda nil
                  (setq mozc-im-mode t)))
      (add-hook 'mozc-im-deactivate-hook
                (lambda nil
                  (setq mozc-im-mode nil)))
      (advice-add 'mozc-cursor-color-update :around
                  (lambda (orig-fun &rest args)
                    (let ((mozc-mode mozc-im-mode))
                      (apply orig-fun args)))))

    (defun enable-input-method (&optional arg interactive)
      (interactive "P\np")
      (if (not current-input-method)
          (toggle-input-method arg interactive)))

    (defun disable-input-method (&optional arg interactive)
      (interactive "P\np")
      (if current-input-method
          (toggle-input-method arg interactive)))

    ;; isearch 関連
    (defun isearch-enable-input-method ()
      (interactive)
      (if (not current-input-method)
          (isearch-toggle-input-method)
        (cl-letf (((symbol-function 'toggle-input-method)
                   (symbol-function 'ignore)))
          (isearch-toggle-input-method))))

    (defun isearch-disable-input-method ()
      (interactive)
      (if current-input-method
          (isearch-toggle-input-method)
        (cl-letf (((symbol-function 'toggle-input-method)
                   (symbol-function 'ignore)))
          (isearch-toggle-input-method))))

    ;; IME をトグルするキー設定
    (global-set-key (kbd "C-o") 'toggle-input-method)
    (define-key isearch-mode-map (kbd "C-o") 'isearch-toggle-input-method)
    (define-key wdired-mode-map (kbd "C-o") 'toggle-input-method)

    ;; IME を無効にするキー設定
    (global-set-key (kbd "C-<f1>") 'disable-input-method)
    (define-key isearch-mode-map (kbd "C-<f1>") 'isearch-disable-input-method)
    (define-key wdired-mode-map (kbd "C-<f1>") 'disable-input-method)

    (global-set-key (kbd "C-j") 'disable-input-method)
    (define-key isearch-mode-map (kbd "C-j") 'isearch-disable-input-method)
    (define-key wdired-mode-map (kbd "C-j") 'disable-input-method)

    ;; IME を有効にするキー設定
    (global-set-key (kbd "C-<f2>") 'enable-input-method)
    (define-key isearch-mode-map (kbd "C-<f2>") 'isearch-enable-input-method)
    (define-key wdired-mode-map (kbd "C-<f2>") 'enable-input-method)

    ;; (global-set-key (kbd "C-o") 'enable-input-method)
    ;; (define-key isearch-mode-map (kbd "C-o") 'isearch-enable-input-method)
    ;; (define-key wdired-mode-map (kbd "C-o") 'enable-input-method)

    ;; isearch を利用する前後で IME の状態を維持するための対策
    (add-hook 'isearch-mode-hook (lambda () (setq im-state mozc-im-mode)))
    (add-hook 'isearch-mode-end-hook
              (lambda ()
                (unless (eq im-state mozc-im-mode)
                  (if im-state
                      (activate-input-method default-input-method)
                    (deactivate-input-method)))))

    ;; wdired 終了時に IME を OFF にする
    (advice-add 'wdired-finish-edit
                :after (lambda (&rest args)
                         (deactivate-input-method))))
#+end_src

#+RESULTS:
: mozc-im

** Windowsで文字のエンコードをUTF-8に
   #+begin_src emacs-lisp
        (leaf windows
          :when (eq system-type 'windows-nt)
          :config
          (prefer-coding-system 'utf-8))
   #+end_src

   #+RESULTS:
   : windows

** Windows IME設定
   - [[https://nosubject.io/windows10-emacs-27-w32-ime/][[Emacs] Windows10 で Emacs 27 を使う | ** nosubject.io **]]
   - [[https://qiita.com/tawara_/items/0a7b8c50a48ea86b2d91][あの IBM が作ったオープンソース日本語フォントを使い、プログラミングフォント『PlemolJP』を作ってみた - Qiita]]

   #+begin_src emacs-lisp
     (leaf tr-ime
       :when (eq system-type 'windows-nt)
       :ensure t
       :setq
       (default-input-method . "W32-IME")
       (w32-ime-mode-line-state-indicator-list . '("[--]" "[あ]" "[--]"))
       :setq-default
       (w32-ime-mode-line-state-indicator . "[--]")
       :config
       (tr-ime-standard-install)
       (w32-ime-initialize)
       ;; IME制御（yes/noなどの入力時にIMEをoffにする
       (wrap-function-to-control-ime 'universal-argument t nil)
       (wrap-function-to-control-ime 'read-string nil nil)
       (wrap-function-to-control-ime 'read-char nil nil)
       (wrap-function-to-control-ime 'read-from-minibuffer nil nil)
       (wrap-function-to-control-ime 'y-or-n-p nil nil)
       (wrap-function-to-control-ime 'yes-or-no-p nil nil)
       (wrap-function-to-control-ime 'map-y-or-n-p nil nil)
       ;; 通常使用するフォント
       ;; (set-frame-font "BIZ UDゴシック-12" nil t)
       (set-frame-font "PlemolJP-12" nil t)
       (setq-default line-spacing 0) ; 行間
       ;; IME未確定時のフォント設定
       (modify-all-frames-parameters '((ime-font . "PlemolJP-12")))
       :bind
       ("C-o" . toggle-input-method))
    #+end_src

    #+RESULTS:
    : tr-ime

   #+begin_src emacs-lisp
     (when (eq system-type 'windows-nt)
       (package-install 'tr-ime)
       (tr-ime-standard-install)
       (setq default-input-method "W32-IME")
       (w32-ime-initialize))
   #+end_src

** WSLでWindows側のブラウザを立ち上げる

- WSL側からWindowsを制御するユーテリティ
  - [[https://github.com/wslutilities/wslu][wslutilities/wslu: A collection of utilities for Windows 10 Linux Subsystems]]
  - wslviewコマンドを利用する

- Emacsが使うブラウザを設定する
  - [[https://www.emacswiki.org/emacs/BrowseUrl#h5o-4][[Home] Browse Url]]

- WSLかどうか判断
  - [[https://qiita.com/miy4/items/acf50a9c0a053b878b56#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E6%8E%A2%E3%81%99][EmacsでWSLを使っている/いないを判断する - Qiita]]

#+begin_src emacs-lisp
(when (and (eq system-type 'gnu/linux)
           (getenv "WSLENV"))
  (setq browse-url-browser-function 'my/browser)
  (setq  browse-url-generic-program "web-browser"))

(defun my/browser (url &rest ignore)
      "Browse URL using wslview."
      (interactive "sURL: ")
      (shell-command (concat "wslview " url)))
#+end_src

#+RESULTS:
: my/browser

* 未整理
** w3m - Webブラウザ

#+begin_src emacs-lisp
  (leaf w3m
    :doc "an Emacs interface to w3m"
    :tag "hypermedia" "www" "w3m"
    :added "2021-10-26"
    :ensure t)
    #+end_src

#+RESULTS:
: w3m

** Wanderlust - Mailクライアント
+ 参考
  - [[https://wanderlust.github.io/wl-docs/wl-ja.html#Install][Wanderlust – Yet Another Message Interface On Emacsen –]]
  - [[https://www.emacswiki.org/emacs/WanderLust][[Home] Wander Lust]]

+ You have to specify the value of 'wl-icon-directory'

+ 問題点：起動して最初にM-x wlをすると、localhostにimap接続に行く
  - .folderに設定がある
  - もともとのデフォルト（一回目に使われる）はこれっぽい
    [[http://quruli.ivory.ne.jp/document/wl_2.14.0/wl-ja_2.html][Wanderlust – Yet Another Message Interface On Emacsen –: 3. Wanderlust で扱えるフォルダたち]]
  - 2回目は.folderから設定を読むようだ

+ el-getではなくpackageでインストールしたほうが挙動がよい
+ 設定等が複雑で、古臭い・・・

#+begin_example
ユーザ名  -> 変数 elmo-imap4-default-user の値。
             初期設定は 環境変数 USER か、LOGNAME か、
             (user-login-name) の返り値。
認証法    -> 変数 elmo-imap4-default-authenticate-type の値。
             初期設定は login。
ホスト名  -> 変数 elmo-imap4-default-server の値。
             初期設定は ‘localhost’。
ポート番号-> 変数 elmo-imap4-default-port の値。
             初期設定は 143。
#+end_example

#+begin_src emacs-lisp
  (leaf wanderlust
    :package t
    :config
    ;; For non ascii-characters in folder-names
    (setq elmo-imap4-use-modified-utf7 t)

    ;; SMTP
    (setq
     wl-smtp-connection-type   'starttls         ; Use TLS
     wl-smtp-posting-port      587               ; The SMTP port
     wl-smtp-authenticate-type "plain"           ; Authentication type
     wl-smtp-posting-user      "yoshihide.chubachi"          ; Username
     wl-smtp-posting-server    "smtp.gmail.com"  ; SMTP server
     wl-local-domain           "gmail.com"       ; The SMTP server again
     wl-message-id-domain      "smtp.gmail.com") ; And... Again?

    (setq
     ;; All system folders (draft, trash, spam, etc) are placed in the
     ;; [Gmail]-folder, except inbox. "%" means it's an IMAP-folder
     wl-default-folder "%inbox"
     wl-draft-folder   "%[Gmail]/Drafts"
     wl-trash-folder   "%[Gmail]/Trash"

     ;; The below is not necessary when you send mail through Gmail's SMTP server,
     ;; see https://support.google.com/mail/answer/78892?hl=en&rd=1
     ;; wl-fcc            "%[Gmail]/Sent"

     wl-from "Yoshihide Chubachi <yoshihide.chubachi@gmail.com>"  ; Our From: header field
     wl-fcc-force-as-read t           ; Mark sent mail (in the wl-fcc folder) as read
     wl-default-spec "%")             ; For auto-completion

    (require 'mime-w3m)
    )
     #+end_src

#+RESULTS:
: wanderlust

#+begin_src emacs-lisp
  (autoload 'wl-user-agent-compose "wl-draft" nil t)
  (if (boundp 'mail-user-agent)
      (setq mail-user-agent 'wl-user-agent))
  (if (fboundp 'define-mail-user-agent)
      (define-mail-user-agent
        'wl-user-agent
        'wl-user-agent-compose
        'wl-draft-send
        'wl-draft-kill
        'mail-send-hook))
#+end_src

#+RESULTS:
: mail-send-hook

- 表示するヘッダを設定

#+begin_src emacs-lisp
  (setq wl-message-ignored-field-list '("^.*:")) ; 一旦全て非表示
  (setq wl-message-visible-field-list ; 見たいヘッダだけ表示
        '("^Subject:"
          "^From:"
          "^To:"
          "^Cc:"
          "^Date:"
          "^Message-ID:"
          ))
#+end_src

#+RESULTS:
| ^Subject: | ^From: | ^To: | ^Cc: | ^Date: | ^Message-ID: |

ｑ- 大きなメールを取得する際、確認しない
  - [[http://quruli.ivory.ne.jp/document/wl_2.14.0/wl-ja_4.html][Wanderlust – Yet Another Message Interface On Emacsen –: 5. サマリモード]]

#+begin_src emacs-lisp
  (setq elmo-message-fetch-confirm nil)
#+end_src

#+RESULTS:
** EAF - Emacs Application Framework
+ .emacs.dをgitで管理しているのでsubmoduleで追加
+ install-eaf.py を実行する前に apt update && apt upgrade

#+begin_src emacs-lisp
  (leaf eaf
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
    :require t
    :custom ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off . t)
    (eaf-browser-enable-adblocker . t)
    (browse-url-browser-function . 'eaf-open-browser)
    :config
    (require 'eaf-browser)
    (require 'eaf-pdf-viewer)

    (defalias 'browse-web #'eaf-open-browser)
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src

#+RESULTS:
: eaf
** mu4e
*** smtpmail - メールの送信
;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu

#+begin_src emacs-lisp
  (leaf smtpmail
    :require t
    :setq ((message-send-mail-function quote smtpmail-send-it)
           (starttls-use-gnutls . t)
           (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
           (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "yc@aiit.ac.jp" nil)))
           (smtpmail-default-smtp-server . "smtp.gmail.com")
           (smtpmail-smtp-server . "smtp.gmail.com")
           (smtpmail-smtp-service . 587)))
#+end_src

#+RESULTS:
: smtpmail

*** mbsync - IMAPサーバとの同期
+ 参考文献
  + [[https://isync.sourceforge.io/][isync: free IMAP and MailDir mailbox synchronizer]]
  + [[https://sourceforge.net/projects/isync/][Isync download | SourceForge.net]]
  + [[https://sourceforge.net/p/isync/isync/ci/master/tree/][Isync / isync / [da6567]]]
+ Gmailの設定
  * セキュリティページで有効にする
+ メールパスワードの設定
  * ~/.mailpass.gpg
+ mbsyncの設定
  * 日本語フォルダ名が修正utf-7になる
  * utf-7を変換するツールがあんまりない
    * [[https://kkobayashi-a.hatenablog.com/entry/2019/04/11/111856][imapsyncでモバメをGmailにコピーする その2 - kkobayashi_a’s blog]]
  * [[https://arimasou16.com/blog/2021/09/01/00413/][OfflineIMAPとNeoMuttを合わせて使う 後半(成功例)]]

つくった（ruby）
#+begin_example
require 'net/imap'

puts Net::IMAP.decode_utf7 '&MFkweTBmMG4w4TD8MOs-'
puts Net::IMAP.decode_utf7 '&MLkwvzD8TtgwTQ-'
puts Net::IMAP.decode_utf7 '&j,dg0TDhMPww6w-'
puts Net::IMAP.decode_utf7 '&kc2JgQ-'
puts Net::IMAP.decode_utf7 '&MLQw33ux-'
puts Net::IMAP.decode_utf7 '&Tgtm+DBN-'
puts Net::IMAP.decode_utf7 '&kAFP4W4IMH8w4TD8MOs-'
#+end_example

| 修正UTF-7               | 変換結果       |           |
|-------------------------+----------------+-----------|
| '&MFkweTBmMG4w4TD8MOs-' | すべてのメール | All Mail  |
| '&MLkwvzD8TtgwTQ-'      | スター付き     | Starred   |
| '&j,dg0TDhMPww6w-'      | 迷惑メール     | Spam      |
| '&kc2JgQ-'              | 重要           | Important |
| '&MLQw33ux-'            | ゴミ箱         | Trash     |
| '&Tgtm+DBN-'            | 下書き         | Draft     |
| '&kAFP4W4IMH8w4TD8MOs-' | 送信済みメール | Sent Mail |

- Near側のフォルダが作られない
  - バージョンが古いから？
  - UIDVALIDITYが鍵のようだ
    - ~/.mbsyncに対応表があるので、やりなおすときは削除する

#+begin_example
  rm -r ~/Maildir
  mkdir -p Maildir/ploversky.net@gmail.com
  rm -r ~/.mbsync
  mbsync private
#+end_example

*** mu/mu4e - Maildirの読み書き・SMTP送信
+ [[https://www.emacswiki.org/emacs/mu4e][[Home] mu4e]]
+ [[https://github.com/djcb/mu/tree/master/mu4e][mu/mu4e at master · djcb/mu]]
+ mu4eはmuに同梱されている
  - aptで入るものは古い
+ [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html#Installation][Installation (Mu4e 1.6.0 user manual)]]
  - aptで必要なライブラリを入れる
+ [[https://github.com/djcb/mu/releases][Releases · djcb/mu]]
  - 1.6.9のtar ballをとってくる
  - sudo apt install autoconf automake libtool texinfo
+ /usr/local/share/emacs/site-lisp/mu4e/
+ [[https://cheatography.com/ddoherty03/cheat-sheets/mu4e-with-gmail-hints/][mu4e (With GMail Hints) Keyboard Shortcuts by ddoherty03 - Download free from Cheatography - Cheatography.com: Cheat Sheets For Every Occasion]]
  - cheetsheet
+ [[https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html][Gmail configuration (Mu4e 1.6.0 user manual)]]
  - 前半はofflineimap用
+ 送信時、パスワードを入力すると、~/.authinfo に自動で追加

#+begin_src emacs-lisp
  (leaf mu4e
    :load-path "/usr/local/share/emacs/site-lisp/mu4e/"
    :require t
    :config
    ;; use mu4e for e-mail in emacs
    (setq mail-user-agent 'mu4e-user-agent)

    ;; (setq mu4e-headers-fields '((:human-date . 16) (:flags . 6) (:mailing-list . 6) (:from . 22) (:subject)))
    (setq mu4e-headers-fields '((:date . 12) (:flags . 6) (:from . 22) (:subject)))

    ;; Local Maildir for mu4e
    (setq mu4e-drafts-folder "/draft")
    (setq mu4e-sent-folder   "/sent")
    (setq mu4e-trash-folder  "/trash")
    ;; Remote Maildir (Gmail)
    (setq mu4e-refile-folder "/Gmail/[Gmail]/&MFkweTBmMG4w4TD8MOs-")

    ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)

    ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
    ;; additional non-Gmail addresses and want assign them different
    ;; behavior.)

    (setq mu4e-bookmarks
          '((:name "Unread messages"  :query "flag:unread AND NOT flag:trashed"  :key 117)
            (:name "Starred messages" :query "flag:flagged AND NOT flag:trashed" :key ?S)
            (:name "Draft Masseges"   :query "flag:draft AND NOT flag:trashed"   :key ?D)
            (:name "Trash"            :query "flag:trashed"                      :key ?T)
            (:name "Today's messages" :query "date:today..now"                 :key 116)
            (:name "Last 7 days" :query "date:7d..now" :hide-unread t          :key 119)
            (:name "Messages with images" :query "mime:image/*" :hide-unread t :key 112)
            ))

    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.
    (setq mu4e-maildir-shortcuts
          '((:maildir "/Gmail/Inbox"             :key ?i)
            (:maildir "/Gmail/[Gmail]/&MFkweTBmMG4w4TD8MOs-"           :key ?a)
            (:maildir "/draft"                   :key ?d)
            (:maildir "/sent"                    :key ?s)
            (:maildir "/trash"                   :key ?t)
            (:maildir "/Maildir_AIIT-2021-10-28" :key ?O)))


    ;; allow for updating mail using 'U' in the main view:
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-change-filenames-when-moving t) ;; for mbsync

    ;; something about ourselves
    (setq
     user-mail-address "yc@aiit.ac.jp"
     user-full-name  "中鉢欣秀"
     mu4e-compose-signature
     (concat
      "東京都立産業技術大学院大学（AIIT） 研究科長補佐\n"
      "情報アーキテクチャコース担当 教授 中鉢欣秀 博士（政策・メディア）\n"))

    (setq mu4e-headers-results-limit -1)

    (setq mu4e-view-prefer-html t)
    (setq mu4e-html2text-command "html2text -utf8 -width 72")
    ;; (setq mu4e-html2text-command 'mu4e-shr2text)

    )
#+end_src

#+RESULTS:
: mu4e

* おわりに
** お約束の記述

#+begin_src emacs-lisp
(provide 'README)

;; Local Variables:
;; indent-tabs-mode: nil
;; byte-compile-warnings: (not cl-functions obsolete)
;; End:

;;; README.el ends here
#+end_src

** 参考文献
1. [[https://uwabami.github.io/cc-env/Emacs.html][Emacs の設定 | Youhei SASAKI’s official site]]
