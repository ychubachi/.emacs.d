;; -*- mode: Org; fill-column: 100; truncate-lines: nil -*-
#+STARTUP: overview indent num align inlineimages logdone hidestars hideblocks

README.org
- [[https://github.com/ychubachi/.emacs.d#readme][ychubachi/.emacs.d: emacs setting files created on 2020/11/23]]

* はじめに
** この設定について
- init.elの実行時、このREADME.orgからREADME.elを生成します。
- orgのハッケージは手動で最新版に更新しておきます。

** 事前にインストールしておくもの
- 各種フォント
  - Noto Sans Mono CJK JP-12
- migemo
  - cmigemo
- pygment
  - python3をインストール
  - /home/yc/.local/binにパス
  - pip install -U pip
  - pip install pygments
- graphviz(dot)
  - sudo apt install graphviz
- org-roam
  - sqlite3

** DONE EmacsのX関係の設定を外部化する                           :published:
CLOSED: [2021-11-09 Tue 18:57]
:PROPERTIES:
:BLOG:     plover
:DATE:     [2021-11-09 18:32:26]
:OPTIONS:  toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Tech
:POST_TAGS: Emacs, X resources
:ID:       o2b:93247d9c-9742-45f2-9543-eab6ffe14628
:POST_DATE: [2021-11-09 Tue 18:33]
:POSTID:   248
:END:
*** Emacs の X resources 設定
Emacs をX環境でグラフィカルに起動すると、 Emacs はXクライアントアプリケーションとなりますから、 [[https://wiki.archlinux.jp/index.php/X_resources][X resources ]]を利用した設定を読み込みます。フォントやウインドウの大きさなどを設定できます。

これらの設定は、Emacs lisp で書く init.el でもできますが、 Emacs はコンソール端末でXウインドウを使わず作業をすることも多いです。そのため、 X resources で設定できるものは、init.elではなくX resources の方に設定しておくというのも一つの考え方です。

また、 init.el  でウインドウのサイズを設定すると、一旦標準のサイズで立ち上がってから  改めて設定されたサイズに切り替わるという、ギクシャクした振る舞いになります。resources に設定しておくと、スムーズに起動します（起動時間も多少、早くなるかもしれません）。

設定できるのは、次の例の通り、Xウインドウで動作するEmacsのフォントや、行間（lineSpacing）、ウインドウのサイズ（geometry）などです。設定できる項目の一覧は [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Table-of-Resources.html][Table-of-Resources]] にあります。プログラム名は Emacs にしました[fn:1]。

#+begin_example
!! ~/.Xresources
Emacs.font: Noto Sans Mono CJK JP-12
Emacs.lineSpacing: 0
Emacs.geometry: 220x38-80+50
Emacs.cursorBlink: off
Emacs.coursorColor: dark green
Emacs.menuBar: on
Emacs.toolBar: off
Emacs.tabBar: on
Emacs.verticalScrollBars: off
Eamcs.useXIM: off
#+end_example

この設定を有効にするには、ターミナルで
#+begin_src bash
  xrdb ~/.Xresources
#+end_src

と打ちます。設定されたか確認するには、
#+begin_src bash
  xrdb -query
#+end_src

とします。この設定は logout すると無効になりますから、 Emacs を起動する前に必ず xrdb コマンドを実行しなくてはなりません。通常のXデスクトップ環境でしたら .xinitrc にこの設定をします。WSL では、 .bashrc に書いてしまって良いでしょう。

#+begin_src bash
  [[ -f ~/.Xresources ]] && xrdb ~/.Xresources
#+end_src

*** Emacsでの動作確認
.Xresources に書いた設定が読み込まれるかEmacsで試してみる方法は次のとおりです。

#+begin_src bash
  emacs -q
#+end_src

オプションは -Q でなく -q です。 -Q だと Emacs は Xリソースを処理しません[fn:2]。

[fn:1] [[https://ayatakesi.github.io/emacs/27.1/html/Resources.html][Emacsでは通常、‘emacs’です。Emacsの実行可能ファイル名の如何にかかわらずに、Emacsのすべてのインスタンスに適用される定義を指定するには、‘Emacs’を使用します。]]

[fn:2]  [[https://ayatakesi.github.io/emacs/27.1/html/Resources.html][変数inhibit-x-resourcesを非nil値にセットした場合、EmacsはXリソースを処理しません。コマンドラインオプション‘-Q’ (または‘--quick’)でEmacsを呼び出した場合、inhibit-x-resourcesは自動的にtにセットされます]]
** フォントの確認

Xウインドウで設定したフォントを確認してみましょう。本当は全て等幅になるとよいのですが、なかなか難しい・・・。

- [[https://uwabami.github.io/cc-env/Emacs.html][Emacs の設定 | Youhei SASAKI’s official site]] より
#+begin_example
| mmmm |
| llll |
| 日本 |
| 漢字 |
| ああ |
| んん |
| ￥￥ |
| \\\\ |
| 　　   |
|      |

|abcdefghijkl|
|ABCDEFGHIJKL|
|'";:-+=/\~`?|
|∞≤≥∏∑∫|
|×±≒≡⊆⊇|  ← GUI だと一部半角になる
|αβγδεζ|  ← GUI だと半角になる
|ηθικλμ|  ← GUI だと半角になる
|ΑΒΓΔΕΖ|  ← GUI だと半角になる
|ΗΘΙΚΛΜ|  ← GUI だと半角になる
|日本語の美観|
|あいうえおか|
|アイウエオカ|
|ｱｲｳｴｵｶｷｸｹｺｻｼ|

| hoge                 | hogeghoe | age              |
|----------------------+----------+------------------|
| 今日もいい天気ですね | お、     | 等幅になった👍 🍺|
|----------------------+----------+------------------|
#+end_example

** Copyright
- Copyright など。

#+begin_src emacs-lisp
  ;;; README.el --- My README.el  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020 Yoshihide Chubachi

  ;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;;  My README.el.

  ;;; Code:
#+end_src

* パッケージ管理・カスタマイズ変数
** DONE leaf - 「パッケージ設定」のためのパッケージ              :published:
CLOSED: [2021-11-11 Thu 21:16]
:PROPERTIES:
:BLOG:     plover
:DATE:     [2021-11-10 00:01:40]
:OPTIONS:  toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Tech
:POST_TAGS: Emacs, Lisp, Leaf
:ID:       o2b:046ef621-cfc9-4aa5-9704-861b7710b61d
:POST_DATE: [2021-11-10 Wed 00:03]
:POSTID:   293
:END:

*** leafの設定
leafはEmacsの設定をより美しく記述できるようにする、パッケージの設定を記述するツールです。パッケージのインストールための様々なパッケージと組み合わせ利用します。設計思想がしっかりしていて、利用者を惑わせない、特に、Emacs lispを解する人にとっては、lispの世界観を崩さないで記述できるのが魅力でしょう。

はじめに、leafに関する全ての設定を紹介します。次に、部分ごとに設定を説明します。

#+CAPTION: leafの設定（全体）
#+NAME: leaf
#+begin_src emacs-lisp :noweb yes
  (prog1 "prepare leaf"
    <<setup-package>>

    <<install-leaf>>

    <<install-leaf-optional-packages>>)
#+end_src

#+RESULTS: leaf
: prepare leaf

*** パッケージ機能の初期設定
最初に、パッケージを取ってくる場所（＝リポジトリ）を設定します。org、melpa、gnuの3つを使うようにしています。設定が終わったらイニシャライズします。

#+NAME: setup-package
#+begin_src emacs-lisp :tangle no
  (prog1 "package"
    (custom-set-variables
     '(package-archives '(("org"   . "https://orgmode.org/elpa/")
                          ("melpa" . "https://melpa.org/packages/")
                          ("gnu"   . "https://elpa.gnu.org/packages/"))))
    (package-initialize))
#+end_src

#+RESULTS: setup-package
: package

*** leaf本体のインストール
Emacs標準のパッケージ機能を使って、leafそのものをインストールします。
#+NAME: install-leaf
#+begin_src emacs-lisp :tangle no
  (prog1 "leaf"
    (unless (package-installed-p 'leaf)
      (unless (assoc 'leaf package-archive-contents)
        (package-refresh-contents))
      (condition-case err
          (package-install 'leaf)
        (error
         (package-refresh-contents)
         (package-install 'leaf)))))
#+end_src

#+RESULTS: install-leaf
: leaf

*** leafに関連するパッケージ
leafに追加するパッケージです。

leaf-hydraは[[https://github.com/abo-abo/hydra][hydra]]でキーの設定を行う際に使用します。

#+NAME: install-leaf-optional-packages
#+begin_src emacs-lisp :tangle no
  (leaf leaf
    :config
    (leaf leaf-keywords
      :ensure t
      :config (leaf-keywords-init))
    (leaf hydra
      :ensure t)
    (leaf el-get
      :ensure t
      :custom ((el-get-git-shallow-clone  . t)))
    (leaf leaf-convert
      :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
               (imenu-list-position . 'left))))
#+end_src

#+RESULTS: install-leaf-optional-packages
: leaf

*** 参考
+ [[https://qiita.com/conao3/items/dc88bdadb0523ef95878#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB][[正式リリース]leaf.elで雑然としたEmacs設定ファイル「init.el」をクリーンにする - Qiita]]
+ [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7#%E4%BE%BF%E5%88%A9%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB][Emacs入門から始めるleaf.el入門 - Qiita]]

** パッケージ管理（straight）

#+begin_src emacs-lisp
  (leaf straight
    :config
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (setq package-enable-at-startup nil))
#+end_src

#+RESULTS:
: straight

** カスタマイズファイルを分離（cus-edit）

#+begin_src emacs-lisp
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
#+end_src

#+RESULTS:
: cus-edit

** TODO customize変数の設定（cus-start）
- 一旦全て設定せず、必要になったら再度設定する
- グローバルモードの設定がカスタマイズ変数でもできる場合、カスタマイズ変数を使用

#+begin_src emacs-lisp
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :custom
    (inhibit-startup-screen . t)              ; スタートアップスクリーンを非表示
    (ring-bell-function . 'ignore)            ; ベルを鳴らさない

    (global-display-line-numbers-mode . t)    ; 行番号表示
    (display-line-numbers-width . 4)          ; 表示する行番号の桁数

    (global-auto-revert-mode . t)             ; 更新されたら自動的に再読込
    (auto-revert-verbose . nil)               ; 再読込の際、メッセージを非表示

    (show-paren-mode . t)                     ; 括弧の対応関係を表示する
    (show-paren-style . 'mixed)               ; 対応関係を表示するスタイル
    ; (show-paren-delay . 0.5)                 ; 対応関係を表示するまでの遅延
    )
#+end_src

#+RESULTS:
: cus-start

#+begin_src emacs-lisp :tangle no
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :preface
    (defun c/redraw-frame nil
      (interactive)
      (redraw-frame))
    :bind (("M-ESC ESC" . c/redraw-frame))
    :custom '((user-login-name . "yc")
              (create-lockfiles . nil)
              (debug-on-error . t)
              (init-file-debug . t)
              (frame-resize-pixelwise . t)
              (enable-recursive-minibuffers . t)
              (history-length . 1000)
              (history-delete-duplicates . t)
              (scroll-preserve-screen-position . t)
              (scroll-conservatively . 100)
              (mouse-wheel-scroll-amount . '(1 ((control) . 5)))
              (text-quoting-style . 'straight)
              (use-dialog-box . nil)
              (use-file-dialog . nil)
              (indent-tabs-mode . nil)
              (vc-follow-symlinks . t) ; VC対象ファイルのシンボリックリンクの場合、本体を辿る
              (auto-revert-check-vc-info . t) ; VCで更新があった場合、自動で更新
              ))
#+end_src

#+RESULTS:
: cus-start

* Emacs本体の設定
** (require 'cl)を検査しない

#+begin_src emacs-lisp
  (leaf *emacs
    :config
    (setq byte-compile-warnings '(not cl-functions obsolete)))
#+end_src

#+RESULTS:
: *emacs

** C-hをBSに・C-@をhelpに
- 標準で
- [[https://www.reddit.com/r/spacemacs/comments/l2fjzy/remapping_ch_to_backspace_and_remap_help_menu_to/][Remapping C-h to backspace, and remap "help" menu to anything else? : spacemacs]]

- :init ではなく :config だと機能しない
  - :config の中身は eval-after-load で実行される
  - :bindがあるとこうなるようだ
- help-map は :bind で設定できない
  - ここでは :bind を利用しない
  - :bind を利用しなければ :init と :config


#+begin_comment
    (global-set-key (kbd "C-h") 'delete-backward-char))
    (global-set-key (kbd "C-@") help-map)
#+end_comment

#+begin_src emacs-lisp
  (leaf *backspace
    :init (global-set-key (kbd "C-@") help-map)
    :bind (("C-h" . delete-backward-char)))
#+end_src

#+RESULTS:
: *backspace

** TODO yes/noの選択をy/nに簡略化

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+RESULTS:
: yes-or-no-p

** TODO 保存時、不要な空白を削除

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

#+RESULTS:
| delete-trailing-whitespace |

** バックアップの設定
- 文献
  - [[https://ayatakesi.github.io/emacs/24.5/Backup-Names.html][GNU Emacs Manual(Japanese Translation): Backup Names]]
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup-Deletion.html][If delete-old-versions is t, Emacs deletes the excess backup files silently.]]

#+begin_src emacs-lisp
  (leaf *backup
    :custom ((version-control . t)
             (backup-directory-alist . '(("." . ".~")))
             (delete-old-versions . t)))
#+end_src

#+RESULTS:
: *backup

** UndoをC-zに                                                        :leaf:
- 指が覚えてしまっている

#+begin_src emacs-lisp
  (leaf *undo :bind (("C-z" . undo)))
#+end_src

#+RESULTS:
: *undo

* ビルトインパッケージの設定
** isearch

- isearch で漢字入力ができるようにする

#+begin_src emacs-lisp
  (leaf isearch
    :bind ((isearch-mode-map
            ("C-o" . isearch-toggle-input-method))))
#+end_src

** wdired

- [[https://ohzeki.hatenablog.com/entry/20160115/1452838970][Emacsのdired表示でファイル名編集 - ohzeki’s diary]]

#+begin_src emacs-lisp
  (leaf wdired
    :doc "Rename files editing their names in dired buffers"
    :tag "builtin"
    :added "2020-11-21"
    :require t
    :config
    (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
    :bind ((wdired-mode-map
            ("C-o" . toggle-input-method))))
#+end_src

#+RESULTS:
: wdired

** macrostep

- elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf macrostep
    :doc "interactive macro expander"
    :req "cl-lib-0.5"
    :tag "debugging" "macro" "languages" "lisp"
    :url "https://github.com/joddie/macrostep"
    :package t
    :bind (("C-c e" . macrostep-expand)))
#+end_src

#+RESULTS:
: macrostep

** TODO recentf
- recentf-modeはカスタマイズ変数にできる

#+begin_src emacs-lisp
  (leaf recentf
    :custom
    (recentf-max-saved-items . 2000)
    (recentf-auto-cleanup quote never)
    (recentf-exclude quote
                     ("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:"))
    :config
    (setq recentf-auto-save-timer
          (run-with-idle-timer 30 t (lambda () (let ((save-silently t)) (recentf-save-list)))))
    (recentf-mode 1))
#+end_src

#+RESULTS:
: recentf

** TODO midnight - 一定期間使用しなかった buffer を自動削除
- 使い方、これでいいのかな？
- [[https://uwabami.github.io/cc-env/Emacs.html][midnight: 一定期間使用しなかった buffer を自動削除]]

#+begin_src emacs-lisp
  (leaf midnight
    :custom
    ((clean-buffer-list-delay-general . 1))
    :hook
    (emacs-startup-hook . midnight-mode))
#+end_src

#+RESULTS:
: midnight

** TODO which-key - キーバインドのガイド表示                         :draft:
:PROPERTIES:
:BLOG:     plover
:DATE:     [2021-11-10 23:59:23]
:OPTIONS:  toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Tech
:POST_TAGS: Emacs, Lisp
:ID:       o2b:f8c43d20-c1e2-4009-961f-48178cde8c6b
:POST_DATE: [2021-11-11 Thu 00:23]
:POSTID:   344
:END:

Emacsでは、コントロールやAltキーを押しながら一文字打って、更にもう一文字打つとコマンドが実行される、という操作が基本です。

このキー操作の組み合わせ、慣れれば手が覚えて、自然に操作できるようになるものです。しかしながら、覚えるまでは大変です。特に初心者にとってはいちいち調べるのもやっかいです。

which-keyパッケージはこの負担を幾分、軽減してくれます。例えば、ファイルを保存するコマンドはC-x C-sです。ですがこれを忘れて、「ファイルを保存するときはC-xを打ってから、何を打つんだっけ？」といったとき、このパッケージが有効です。

C-xを打って入力をやめると、画面にその先に打つ文字とそれに対応したコマンドのリストを表示してくれます。

とても便利！・・・と言いたいところですが、結局はメニューに出てくるコマンドの数そのものが多いので、一覧の中から目的のものを見つけるのも一苦労であったりします。もちろん、選択肢が少ない場合は大助かりです。

なかなかEmacsのキー操作が覚えられないよ、という場合は試してみてください。

#+begin_src emacs-lisp
  (leaf which-key
    :doc "Display available keybindings in popup"
    :req "emacs-24.4"
    :tag "emacs>=24.4"
    :url "https://github.com/justbur/emacs-which-key"
    :added "2021-10-20"
    :emacs>= 24.4
    :ensure t
    :config
    (which-key-mode))
#+end_src

#+RESULTS:
: which-key

** imenu-list

#+begin_src emacs-lisp
  (leaf *imenu-list
    :bind (("C-^" . imenu-list-smart-toggle)))
#+end_src

#+RESULTS:
: *imenu-list

** align - コメントの位置を揃えたりする

#+begin_src emacs-lisp
  (leaf align
    :doc "align text to a specific column, by regexp"
    :tag "builtin"
    :added "2021-10-30"
    :bind (("C-c M-a" . align-regexp))
    )
#+end_src

#+RESULTS:
: align

* ミニバッファ補完UI関連の設定
** vertico:本体の設定

- [[https://github.com/minad/vertico/][GitHub - minad/vertico: vertico.el - VERTical Interactive COmpletion]]

#+begin_src emacs-lisp
  (leaf vertico
    :straight t
    :custom
    ;; 最大20件まで表示するように
    (vertico-count . 20)
    :config
    (vertico-mode)
    (setq vertico-resize t)
    (setq vertico-cycle t)
    )
#+end_src

#+RESULTS:
: vertico

** orderless
- [[https://github.com/oantolin/orderless][GitHub - oantolin/orderless: Emacs completion style that matches multiple regexps in any order]]

#+begin_src emacs-lisp
  (leaf orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch))
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

#+RESULTS:
: orderless

** savehist

#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (leaf savehist
    :straight t
    :init
    (savehist-mode))
#+end_src

#+RESULTS:
: savehist

** Marginalia
- [[https://github.com/minad/marginalia][GitHub - minad/marginalia: marginalia.el - Marginalia in the minibuffer]]
- Enable richer annotations using the Marginalia package

#+begin_src emacs-lisp
  (leaf marginalia
    :straight t
    :bind (:minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia

** embark
- [[https://github.com/oantolin/embark][GitHub - oantolin/embark: Emacs Mini-Buffer Actions Rooted in Keymaps]]

#+begin_src emacs-lisp
  (leaf embark
    :straight t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-@ B" . embark-bindings) ;; alternative for `describe-bindings' (C-h->C-@)
     )
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

#+RESULTS:
: embark

** consult
- [[https://github.com/minad/consult][GitHub - minad/consult: consult.el - Consulting completing-read]]

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (leaf consult
    :straight t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ;; ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; ("C-c r" . consult-recent-file)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           (:isearch-mode-map
            ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
            ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
            ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
            ("M-s L" . consult-line-multi)))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )
#+end_src

#+RESULTS:
: consult

** embark-consult

#+begin_src emacs-lisp
  ;; Consult users will also want the embark-consult package.
  (leaf embark-consult
    :straight t
    :after (embark consult)
    ;;    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    ;;    :hook
    ;;    (embark-collect-mode . consult-preview-at-point-mode)
    )
#+end_src

#+RESULTS:
: embark-consult

* org-mode関連の設定
** orgのためのディレクトリ設定
- org-agenda-filesのリストにDropboxのディレクトリを追加しておく。
  - この中にあるorgファイルがすべてagendaに反映される。
- org-num-modeをすべてのファイルで実行する
  - (org-startup-numerated . t)がうまく反映されない。
- Androd端末から利用するには [[https://play.google.com/store/apps/details?id=com.orgzly][Orgzly]] が良さそう。

- 設定するアジェンダファイル

  | ファイル          | 内容                           |
  |-------------------+--------------------------------|
  | Journal.org       | 思いつき、メモを書きなぐり用   |
  | Notebook.org      | ある程度きちんとしたメモ書き   |
  | ブログファイル    | ブログの記事をまとめたファイル |
  | emacs設定ファイル | orgファイルで書いたEmacsの設定 |

  - TODOはどのファイルに書いて良い
  - org-switchbかconsult-org-agendaをどこかにバインドするといいかも？（C-,）
    - C-c bにバインド

#+begin_src emacs-lisp
  (leaf org-mode
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c b" . org-switchb)
    :custom
    (org-directory . "~/Dropbox/Org/")
    (org-agenda-files . '("~/Dropbox/Org/"
                          "~/git/ploversky-zenn.dev/plaversky@zenn.dev.org"
                          "~/git/ploversky-ploversky.net/plaversky.net.org"
                          "~/.emacs.d/README.org"
                          ))
    (org-default-notes-file . "~/Dropbox/Org/Notebook.org")
    (org-refile-targets . '((org-agenda-files :tag . "REFILE"))))
#+end_src

#+RESULTS:
: org-mode

** org-modeでRETURNでリンクを開く

- C-mでも可

#+begin_src emacs-lisp
  (leaf org-mode
    :config
    (setq org-return-follows-link  t))
#+end_src

#+RESULTS:
: org-mode

** doctを利用したorg-captureの設定

- [[https://orgmode.org/manual/Capture.html][Capture (The Org Manual)]]
- [[https://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][Setting up capture (The Org Manual)]]
- [[https://www.5ing-myway.com/org-capture/][org-captureをカスタマイズして、すばやくメモを取る方法 | 趣味に生きる。]]

- ファイルは org-directory 以下にある。

- [[https://github.com/progfolio/doct#installation][GitHub - progfolio/doct: DOCT: Declarative Org Capture Templates for Emacs]]
- ミニバッファで日本語が入力できない
- [[https://blog.tomoya.dev/posts/a-new-wave-has-arrived-at-emacs/][Emacsの次世代ミニバッファ補完UI | 日々、とんは語る。]]

#+begin_src emacs-lisp
  (leaf doct
    :ensure t
    ;;recommended: defer until calling doct
                                          ;:commands (doct)
    :config
    (setq org-capture-templates
          (doct '(("Journal" :keys "j"
                   :prepend t
                   :empty-lines-after 1
                   :file "~/Dropbox/Org/Journal.org"
                   :datetree t
                   :todo-state "TODO"
                   :template ("* %{todo-state} %?"
                              ":PROPERTIES:"
                              ":CREATED: %T"
                              ":ANNOTADED: %a"
                              ":END:"))
                  ("Notebook" :keys "n"
                   :prepend t
                   :empty-lines-after 1
                   :file "~/Dropbox/Org/Notebook.org"
                   :unnarrowed t
                   :template ("* %^{Description}"
                              ":PROPERTIES:"
                              ":CREATED: %T"
                              ":END:"
                              "\n%?"))
                  ("Blog" :keys "b"
                   :prepend t
                   :empty-lines-after 1
                   :unnarrowed t
                   :children
                   (("ploversky@zenn.dev" :keys "z"
                     :file "~/git/ploversky-zenn.dev/plaversky@zenn.dev.org"
                     :headline   "記事"
                     :todo-state "TODO"
                     :export_file_name (lambda () (concat (format-time-string "%Y%m%d-%H%M%S")))
                     :template ("* %{todo-state} %^{Description}"
                                ":PROPERTIES:"
                                ":CREATED: %T"
                                ":EXPORT_FILE_NAME: articles/%{export_file_name}"
                                ":EXPORT_GFM_TAGS: blog"
                                ":EXPORT_GFM_CUSTOM_FRONT_MATTER: :emoji 👩‍💻"
                                ":EXPORT_GFM_CUSTOM_FRONT_MATTER+: :type tech"
                                ":EXPORT_GFM_CUSTOM_FRONT_MATTER+: :published false"
                                ":END:"
                                "\n** %?"))
                    ("ploversky.net" :keys "w"
                     :file "~/git/ploversky-ploversky.net/plaversky.net.org"
                     :headline   "Blog"
                     :todo-state "TODO"
                     :template ("* %{todo-state} %^{Description}"
                                ":PROPERTIES:"
                                ":CREATED: %T"
                                ":CATEGORY: Blog"
                                ":POST_TAGS: Blog"
                                ":BLOG:     plover"
                                ":END:"
                                "\n** %?"))
                    ("blog.chubachi.net"  :keys "b"
                     :file "~/git/ychubachi.github.io/blog.chubachi.net.org"
                     :headline   "Blog"
                     :todo-state "TODO"
                     :export_file_name (lambda () (concat (format-time-string "%Y%m%d-%H%M%S")))
                     :template ("* %{todo-state} %^{Description}"
                                ":PROPERTIES:"
                                ":CREATED: %T"
                                ":EXPORT_FILE_NAME: %{export_file_name}"
                                ":EXPORT_DATE: %U"
                                ":END:"
                                "\n** %?"))
                    )
                   )
                  )
                )
          )
    )
#+end_src

#+RESULTS:
: doct

** TODO olg-capture のショートカット
#+begin_src emacs-lisp
  (define-key global-map
    (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "j")))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (org-capture nil j) |

** org-tempo - ソースコードブロック入力の省力化
   - "<el"+<TAB> 等でemacs-lispのソースコードブロックがでるように設定。

#+begin_src emacs-lisp
  (leaf org-tempo
    :require t
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist
                 '("bash" . "src bash"))
    )
#+end_src

#+RESULTS:
: org-tempo

** latex関連
*** orgでlatexの設定例
    - 表題・筆者・日付の書き方

    #+begin_comment
    #+TITLE: とても素晴らしい研究の発表
    #+AUTHOR: 中鉢 欣秀, CHUBACHI Yoshihide
    #+DATE: 2021-08-06
    #+end_comment

    - 目次を出力しない

    #+begin_comment
    #+OPTIONS: toc:nil # hoge
    #+end_comment

    - 参考
      - [[https://www-he.scphys.kyoto-u.ac.jp/member/shotakaha/dokuwiki/doku.php?id=toolbox:emacs:org:latex:start][Org-LaTeX [QumaWiki]]]
      - [[https://taipapamotohus.com/post/org-mode_paper_3/][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） | A perfect autumn day]]

    #+begin_comment
#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
      #+end_comment

*** latex本体
- [[https://texwiki.texjp.org/?Emacs%2FOrg%20mode#h20d131a][Emacs/Org mode - TeX Wiki]]
  - org-latex-pdf-process は記載の通りだと%S等をorg側で置換しようとしてエラー
- latexmkの設定は~/.latexmkrcに記述
  - [[https://texwiki.texjp.org/?Latexmk#g2a2cf08][Latexmk - TeX Wiki]]
  - latexmkの相性のせいか、org-export-in-backgroundをtにするとエラー
- LaTeXの文字列部分は別ファイルにするのがよいかもしれない
  - [[http://ergoemacs.org/emacs/elisp_read_file_content.html][Elisp: Read File Content as String or List of Lines]]

#+begin_src emacs-lisp
  (leaf ox-latex
    :require t
    :setq ((org-latex-default-class . "bxjsarticle")
           (org-latex-pdf-process . '("latexmk -gg -pdfdvi -pvc- %f"))
           (org-file-apps . '(("pdf" . "evince %s")))
           (org-export-in-background . nil))
    :config
    (add-to-list
     'org-latex-classes
     '("bxjsarticle"
       "% begin org-latex-class bxjsarticle
    \\documentclass[autodetect-engine,dvi=dvipdfmx,11pt,a4paper,ja=standard]{bxjsarticle}
    [NO-DEFAULT-PACKAGES]
    \\usepackage{amsmath}
    \\usepackage{newtxtext,newtxmath}
    \\usepackage{graphicx}
    \\usepackage{hyperref}
    \\ifdefined\\kanjiskip
      \\usepackage{pxjahyper}
      \\hypersetup{colorlinks=true}
    \\else
      \\ifdefined\\XeTeXversion
          \\hypersetup{colorlinks=true}
      \\else
        \\ifdefined\\directlua
          \\hypersetup{pdfencoding=auto,colorlinks=true}
        \\else
          \\hypersetup{unicode,colorlinks=true}
        \\fi
      \\fi
    \\fi
    % end org-latex-class bxjsarticle"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list
     'org-latex-classes
     '("jlreq"
       "% begin org-latex-class jlreq
  \\documentclass[11pt,paper=a4]{jlreq}
  [NO-DEFAULT-PACKAGES]
  \\usepackage{amsmath}
  \\usepackage{newtxtext,newtxmath}
  \\ifdefined\\kanjiskip
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage[dvipdfmx]{hyperref}
    \\usepackage{pxjahyper}
    \\hypersetup{colorlinks=true}
  \\else
    \\usepackage{graphicx}
    \\usepackage{hyperref}
    \\hypersetup{pdfencoding=auto,colorlinks=true}
  \\fi
  % end org-latex-class jlreq"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list
     'org-latex-classes
     '("jlreq-tate"
       "% begin org-latex-class jlreq-tate
  \\documentclass[tate,11pt,paper=a4]{jlreq}
  [NO-DEFAULT-PACKAGES]
  \\usepackage{amsmath}
  \\usepackage{newtxtext,newtxmath}
  \\ifdefined\\kanjiskip
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage[dvipdfmx]{hyperref}
    \\usepackage{pxjahyper}
    \\hypersetup{colorlinks=true}
  \\else
    \\usepackage{graphicx}
    \\usepackage{hyperref}
    \\hypersetup{pdfencoding=auto,colorlinks=true}
  \\fi
  % end org-latex-class jlreq-tate"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

#+RESULTS:
: ox-latex

*** ソースコードの pretty print
- Windowsの場合
  - scoopでpygmentをインストールしておく
  - python インストールして pip install pygments
  - PATHの登録
    - C:\Users\yc\scoop\apps\python\current\Scripts

  #+begin_src emacs-lisp
    (setq org-export-latex-listings t)

    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("frame" "lines")
            ("framesep=2mm")
            ("linenos=true")
            ("baselinestretch=1.2")
            ("fontsize=\\footnotesize")
            ("breaklines")
            ))

    (add-to-list 'org-latex-packages-alist "\\usepackage{minted}" t)
  #+end_src

  #+RESULTS:
  | \usepackage{minted} |

*** Beamer

- beamerの作成は C-c C-e l P

#+begin_src emacs-lisp
  (require 'ox-beamer)
  (setq org-beamer-outline-frame-title "目次")
  (setq org-beamer-frame-default-options "t") ; フレームの位置をtopにする。
#+end_src

*** TODO 参考文献 RefTex-Mode
    - [[https://taipapamotohus.com/post/org-mode_paper_3/][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） | A perfect autumn day]]
    - [[https://github.com/jkitchin/org-ref][jkitchin/org-ref: org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools to go with it.]]
    - [[https://aliquote.org/post/org-and-bibtex/][Org and Bibtex - aliquote]]

    - org-refはHelmに依存しているようだ

      ;; (leaf org-ref
      ;;   :ensure t
      ;;   :require t
      ;;   :setq ((reftex-default-bibliography quote
      ;;                                       ("~/git/bibliography/references.bib"))

      ;;          (org-ref-bibliography-notes . "~/git/bibliography/notes.org")
      ;;          (org-ref-default-bibliography quote
      ;;                                        ("~/git/bibliography/references.bib"))
      ;;          (org-ref-pdf-directory . "~/git/bibliography/bibtex-pdfs/")

      ;;          (bibtex-completion-bibliography . "~/git/bibliography/references.bib")
      ;;          (bibtex-completion-library-path . "~/git/bibliography/bibtex-pdfs")
      ;;          (bibtex-completion-notes-path . "~/git/bibliography/helm-bibtex-notes")
      ;;          )
      ;;   :config
      ;;   (push '(migemo) helm-source-bibtex)

      ;;   ;; (define-key org-mode-map (kbd "C-c b c") `org-ref-helm-insert-cite-link)
      ;;   ;; (define-key org-mode-map (kbd "C-c b l") `org-ref-helm-insert-label-link)
      ;;   ;; (define-key org-mode-map (kbd "C-c b r") `org-ref-helm-insert-ref-link)
      ;;   )

#+begin_src emacs-lisp
  (leaf org-ref
    :package t
    :config
    (setq bibtex-completion-bibliography '("~/git/bibliography/references.bib")
          bibtex-completion-library-path '("~/git/bibliography/bibtex-pdfs/")
          bibtex-completion-notes-path "~/git/bibliography/notes/"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))
#+end_src

#+RESULTS:
: org-ref

#+begin_src emacs-lisp
  (leaf bibtex
    :require t
    :config
    (setq bibtex-autokey-year-length 4
            bibtex-autokey-name-year-separator "-"
            bibtex-autokey-year-title-separator "-"
            bibtex-autokey-titleword-separator "-"
            bibtex-autokey-titlewords 2
            bibtex-autokey-titlewords-stretch 1
            bibtex-autokey-titleword-length 5
            org-ref-bibtex-hydra-key-binding (kbd "H-b"))

    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body))
#+end_src

#+RESULTS:
: bibtex


- org-ref-insert-cite-function = nil
- org-ref-insert-label-function = nil
- org-ref-insert-ref-function = nil

** babel - Grophviz (dot)

- dotコードの評価を行うようにする
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t))) ; this line activates dot
#+end_src

- babelで評価するときに確認を出さない
  - [[https://emacs.stackexchange.com/questions/23946/how-can-i-stop-the-confirmation-to-evaluate-source-code-when-exporting-to-html][org mode - How can I stop the confirmation to evaluate source code when exporting to html? - Emacs Stack Exchange]]

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

- インラインイメージの自動再描画
  - [[https://emacs.stackexchange.com/questions/3302/live-refresh-of-inline-images-with-org-display-inline-images][org mode - live refresh of inline images with org-display-inline-images - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

#+RESULTS:

** スピードコマンド

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+RESULTS:
: t

** org2blog
+ 説明
  * orgでWordpressに投稿する
  * Buffer全体で記事を書く場合
    | キーn操作 | 関数                         | 説明                 |
    |-----------+------------------------------+----------------------|
    | C-c M-p g | org2blog-user-interface      | メニュー表示         |
    | C-c M-p D | org2blog-buffer-page-save    | ページをWPに保存     |
    | C-c M-p P | org2blog-buffer-page-publish | ページを公開         |
    | C-c M-p d | org2blog-buffer-post-save    | ポストをWPに保存     |
    | C-c M-p p | org2blog-buffer-post-publish | ポストを公開         |
    | C-c M-p t | org2blog-complete            | カテゴリやタグの補完 |

+ 参考
  * [[https://github.com/org2blog/org2blog#requirements-and-compatibility][org2blog/org2blog: Blog from Org mode to WordPress.]]
+ パスワードは~/.netrcに書く

+ 備考
  * ソースコードのエキスポートでエラー発生（2021-11-05）
  * どうやらコードに`(backquote)が2つあるとエラーになるようだ・・・
  * Wordpressのxmlrpcの問題か？セキュリティ対策？？
    - プロバイダのWAFの設定だった

#+begin_src emacs-lisp
  (leaf org2blog
    :ensure t
    :config
    (require 'auth-source)
    (let* ((credentials (auth-source-user-and-password "ploversky.net"))
           (username (nth 0 credentials))
           (password (nth 1 credentials))
           (config `("plover"
                     :url "https://ploversky.net/xmlrpc.php"
                     :username ,username
                     :password ,password)))
      (setq org2blog/wp-blog-alist `(,config)))
    (setq org2blog/wp-image-upload t)
    (setq org2blog/wp-show-post-in-browser 'show)
    (setq org2blog/wp-use-sourcecode-shortcode t)
    )
#+end_src

#+RESULTS:
: org2blog

** ox-hugo
- [[https://github.com/kaushalmodi/ox-hugo][GitHub - kaushalmodi/ox-hugo: A carefully crafted Org exporter back-end for Hugo]]

#+begin_src emacs-lisp
  (leaf ox-hugo
    :ensure t
    :require t
    :after ox)
#+end_src

#+RESULTS:
: ox-hugo

** org-superstar
  * org-bullets の進化版
    + [[https://github.com/integral-dw/org-superstar-mode/blob/master/DEMO.org][org-superstar-mode/DEMO.org at master · integral-dw/org-superstar-mode · GitHub]]
  * asterisk
    + plus
      - minus

#+begin_src emacs-lisp
  (leaf org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda nil (org-superstar-mode 1))))
#+end_src

#+RESULTS:
: org-superstar

** org-rome

- org-romeを利用するための設定

#+begin_src emacs-lisp
  (leaf org-roam
    :ensure t
    :require t
    :custom
    (org-roam-directory . "~/Dropbox/Org/Roam/")
    (org-roam-completion-everywhere . t)
    (org-roam-capture-templates
     . '(("d" "default" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ("m" "備忘録（Memo）" plain
          (file "~/Dropbox/Org/Roam/Templates/MemoTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ("k" "会議録（Meeting）" plain
          (file "~/Dropbox/Org/Roam/Templates/MeetingTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ("t" "文書（LaTeX）" plain
          (file "~/Dropbox/Org/Roam/Templates/LaTeXTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)
         ("w" "ブログ（Wordpress）" plain
          (file "~/Dropbox/Org/Roam/Templates/Org2blogBufferTemplate.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
          :unnarrowed t)
         ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :init
    (setq org-roam-v2-ack t)
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+end_src

#+RESULTS:
: org-roam

** ox-zenn - zenn.devにブログを書く
*** 参考
+ [[https://zenn.dev/conao3/articles/ox-zenn-usage][org-modeドキュメントからZenn Flavored Markdownを生成するox-zennの使い方]]

#+begin_src emacs-lisp
  (leaf ox-zenn
    :ensure t
    :after org
    :require t ox-publish
  :defun zenn/f-parent org-publish
  :defvar org-publish-project-alist
  :preface
  (defvar zenn/org-dir "~/git/zenn-content")

  (defun zenn/org-publish (arg)
    "Publish zenn blog files."
    (interactive "P")
    (let ((force (or (equal '(4) arg) (equal '(64) arg)))
          (async (or (equal '(16) arg) (equal '(64) arg))))
      (org-publish "zenn" arg force async)))

  :config
  (setf
   (alist-get "zenn" org-publish-project-alist nil nil #'string=)
   (list
    :base-directory (expand-file-name "" zenn/org-dir)
    :base-extension "org"
    :publishing-directory (expand-file-name "../" zenn/org-dir)
    :recursive t
    :publishing-function 'org-zenn-publish-to-markdown)))
#+end_src

#+RESULTS:
: ox-zenn

* 外部パッケージ
** undo-tree
   - [[https://elpa.gnu.org/packages/undo-tree.html][GNU ELPA - undo-tree]]

   #+begin_src emacs-lisp
     (leaf undo-tree
       :ensure t
       :config
       (global-undo-tree-mode))
   #+end_src

** fly-check

- emacs-lispのドキュメント用のチェック(emacs-lisp-checkdoc)を無効にする。

#+begin_src emacs-lisp
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :emacs>= 24.3
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :custom ((flycheck-emacs-lisp-initialize-packages . t)
             (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook)
    :config
    (leaf flycheck-package
      :doc "A Flycheck checker for elisp package authors"
      :ensure t
      :config
      (flycheck-package-setup))

    (leaf flycheck-elsa
      :doc "Flycheck for Elsa."
      :emacs>= 25
      :ensure t
      :config
      (flycheck-elsa-setup))
    )
#+end_src

** pandoc-mode

- C-c / でメニュー表示
- http://joostkremers.github.io/pandoc-mode/

#+begin_src emacs-lisp
  (leaf pandoc-mode
    :doc "Minor mode for interacting with Pandoc"
    :req "hydra-0.10.0" "dash-2.10.0"
    :tag "pandoc" "text"
    :added "2020-11-24"
    :url "http://joostkremers.github.io/pandoc-mode/"
    :ensure t
    :after hydra)
#+end_src

** magit
- EmacsのGit
#+begin_src emacs-lisp
  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :req "emacs-25.1" "async-20200113" "dash-20200524" "git-commit-20200516" "transient-20200601" "with-editor-20200522"
    :tag "vc" "tools" "git" "emacs>=25.1"
    :added "2020-11-30"
    :emacs>= 25.1
    :ensure t
    :after git-commit with-editor
    :bind (("C-x g" . magit-status))
    )
#+end_src

#+RESULTS:
: magit

- [[http://tanehp.ec-net.jp/heppoko-lab/prog/resource/magit/magit_memo.html#%E5%A4%89%E6%9B%B4%E3%82%92%E6%88%BB%E3%81%99][Magit の覚え書き]]
  - Discard

** migemo
*** Linux
- .emacs.d/migemo-dictを用意
  - cmigemoをインストールして
  - /usr/share/cmigemo/utfg-8/migemo-dictをコピー
- [[https://github.com/emacs-jp/migemo][emacs-jp/migemo: emacs migemo client]]
#+begin_src emacs-lisp
  (leaf migemo
    :when (eq system-type 'gnu/linux)
    :ensure t
    :require t
    :config
    ;; cmigemo(default)
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs"))

    ;; ruby migemo
    ;; (setq migemo-command "ruby")
    ;; (setq migemo-options '("-S" "migemo" "-t" "emacs" "-i" "\a"))

    ;; Set your installed path
    (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")

    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix)
    (migemo-init)
    )
#+end_src

#+RESULTS:
: migemo

*** Windows
- [[https://hangstuck.com/emacs-cmigemo-windows/][Windowsでの Emacsでmigemo を有効にする設定方法 | ハングスタック]]
- migemoの辞書は絶対パスで参照する
- その他の変数はデフォルトで動作する
- とりあえずWindowsで動くようにした

#+begin_src emacs-lisp
  (leaf migemo
    :when (and
           (eq system-type 'windows-nt)
           (file-exists-p "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict"))
    :ensure t
    :setq
    (migemo-dictionary . "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict")
    :config
    (load-library "migemo")
    (migemo-init))
#+end_src

  #+RESULTS:
  : migemo

** yasnippet
- [[https://github.com/joaotavora/yasnippet][joaotavora/yasnippet: A template system for Emacs]]
- サンプルは次の場所にあるので必要なものは ~/.emacs.d/snippets にコピー
  - ~/.emacs.d/elpa/yasnippet-snippets-20210910.1959/snippets/

- :setq を使う場合の注意
  - :init だと :init -> :setq の順番でNG
  - :config なら :setq -> :init
- :require との関係
  -  :init -> :require -> :setq -> :config

- :require なし
  - :init -> NG

- マクロ展開
    #+begin_src
  (prog1 'yasnippet-snippets
    (leaf-handler-leaf-path yasnippet-snippets)
    (leaf-handler-leaf-protect yasnippet-snippets
      (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
      (yas-global-mode 1) ; <- 2
      (setq yasnippet-snippets-dir "~/.emacs.d/snippets"))) ; <- 1
    #+end_src

  - :config -> NG

    #+begin_src
  (prog1 'yasnippet-snippets
    (leaf-handler-leaf-path yasnippet-snippets)
    (leaf-handler-leaf-protect yasnippet-snippets
      (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
      (setq yasnippet-snippets-dir "~/.emacs.d/snippets") ; <- 1
      (yas-global-mode 1))) ; <- 2
    #+end_src

- :require あり

  - :init -> NG

    #+begin_src
(prog1 'yasnippet-snippets
  (leaf-handler-leaf-path yasnippet-snippets)
  (leaf-handler-leaf-protect yasnippet-snippets
    (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
    (yas-global-mode 1)
    (require 'yasnippet-snippets)
    (setq yasnippet-snippets-dir "~/.emacs.d/snippets")))
    #+end_src

  - :config -> OK

[[https://qiita.com/conao3/items/dc88bdadb0523ef95878][「:prefaceは条件分岐キーワードより先に展開したい」などの順序に関する問題を解決するために、 leaf は整形されたplistを「善い順番」に並び替えます。  その「善い順番」は内部変数のleaf-keywordsの並び順で、 *scratch* で (pl (leaf-available-keywords)) を評価することで得ることができます。]]

    #+begin_src
(prog1 'yasnippet-snippets
  (leaf-handler-leaf-path yasnippet-snippets)
  (leaf-handler-leaf-protect yasnippet-snippets
    (leaf-handler-package yasnippet-snippets yasnippet-snippets nil)
    (require 'yasnippet-snippets)
    (setq yasnippet-snippets-dir "~/.emacs.d/snippets")
    (yas-global-mode 1)))
    #+end_src

#+begin_src emacs-lisp
  (leaf yasnippet-snippets
    :package t
    :require t
    :setq
    (yasnippet-snippets-dir . "~/.emacs.d/snippets")
    :config
    (custom-set-variables
     '(warning-suppress-types (quote ((yasnippet backquote-change)))))
    (yas-global-mode 1))
#+end_src

#+RESULTS:
: yasnippet-snippets

** multiple-cursors
+ [[https://dev.classmethod.jp/articles/emacs-multiple-cursors/][複数カーソルを操作するパッケージ multiple-cursors.el のご紹介 | DevelopersIO]]

+ リージョンを選択してカーソルをあわせる
+ region-bindings-modeとともに使うとよい

#+begin_src emacs-lisp
    (leaf multiple-cursors
      :package t
      :config
      ;; use region-bindings-mode instead
      ;; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      ;; (global-set-key (kbd "C->")         'mc/mark-next-like-this)
      ;; (global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
      ;; (global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this))
      )
#+end_src

#+RESULTS:
: multiple-cursors

** region-bindings-mode
+ [[https://tam5917.hatenablog.com/entry/20130129/1359465171][region-bindings-modeの紹介 - 備忘録]]
+ [[https://github.com/magnars/expand-region.el][magnars/expand-region.el: Emacs extension to increase selected region by semantic units.]]
+ [[https://github.com/fgallina/region-bindings-mode][GitHub - fgallina/region-bindings-mode: A minor mode that enables custom bindings when mark is active.]]

#+begin_src emacs-lisp
  (leaf region-bindings-mode
    :package t
    :require t
    :config
    (region-bindings-mode-enable)
    (define-key region-bindings-mode-map "e" 'mc/edit-lines)
    (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
    (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
    (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
    (define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
    )
#+end_src

#+RESULTS:
: region-bindings-mode

** DONE shell-pop - いつでもどこでもshellを出す                  :published:
CLOSED: [2021-11-09 Tue 20:23]
:PROPERTIES:
:BLOG:     plover
:DATE:     [2021-11-09 20:16:56]
:OPTIONS:  toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Tech
:POST_TAGS: Emacs, Lisp
:ID:       o2b:dc0f7103-fb58-4bae-96e1-54699516f5b0
:POST_DATE: [2021-11-09 Tue 20:17]
:POSTID:   254
:END:
*** 説明
Emacsで作業中に、shellで作業をしたくなることはよくあります。そのような際に便利な設定です。

*** 設定
公式[fn:1]ではC-tに割り当てていますが、私は標準のC-tをわりと多用します。なので、C-c tにアサインしました。
# 私はC-zにしています。ターミナルでEmacsを立ち上げたとき、ちょっとshellで作業をしたいと思ったらC-zでサスペンドします。そのイメージがあるので、shell使いたいな、と思うと勝手に手が反応します。shellを使い終わったら、もう一度C-zで閉じます。

#+begin_src emacs-lisp
  (leaf shell-pop
    :package t
    :require t
    :custom
    ((shell-pop-universal-key . "C-c t")
     (shell-pop-shell-type . (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
     (shell-pop-window-position . "bottom")))
#+end_src

#+RESULTS:
: shell-pop

ターミナルはansi-termにしました[fn:2]（6行目）。また、常に画面の下部に出すようにしています（7行目）。

[fn:1] [[https://github.com/kyagi/shell-pop-el][kyagi/shell-pop-el: shell-pop.el helps you to use shell easily on Emacs. Only one key action to work.]]

[fn:2] [[https://blog.inouetakuya.info/entry/20110627/1309175529][Emacs のシェルモード比較 - shell、ansi-term、multi-term - 彼女からは、おいちゃんと呼ばれています]]

* UI・見た目
** modus-themes
- [[https://protesilaos.com/modus-themes/][Modus Themes (Modus Operandi and Modus Vivendi) | Protesilaos Stavrou]]

#+begin_src emacs-lisp
  (leaf modus-themes
    :ensure t                        ; omit this to use the built-in themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-region '(bg-only no-extend))

    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src

#+RESULTS:
: modus-themes

** whitespace - 空白文字の可視化
- [[https://yanqirenshi.hatenablog.com/entry/2016/07/03/Emacs%3A_whitespace_%E3%81%A7%E4%BD%99%E5%88%86%E3%81%AA%E7%A9%BA%E7%99%BD/%E3%82%BF%E3%83%96%E3%81%AB%E8%89%B2%E3%81%A5%E3%81%91][Emacs: whitespace で余分な空白/タブに色づけ - ほんとのこと知りたいだけなのに。]]
  - M-x list-faces-display で設定する色の種類と色を確認できます。
  - 設定する色は M-x list-colors-display で確認する感じ。
- 色はテーマのデフォルトのままにしておく。

　　　ああ全角　　　　　←全角　あいうえお
あいうえお　漢字

#+begin_src emacs-lisp
  (leaf whitespace
    :require 't
    :config
    (setq whitespace-style
          '(
            face ; faceで可視化
            trailing ; 行末
            tabs ; タブ
            spaces ; スペース
            space-mark ; 表示のマッピング
            tab-mark
            ))
    (setq whitespace-display-mappings
          '(
            (space-mark ?\u3000 [?□])
            (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])
            ))
    (setq whitespace-trailing-regexp  "\\([ \u00A0]+\\)$")
    (setq whitespace-space-regexp "\\(\u3000+\\)")
    ;; (set-face-attribute 'whitespace-trailing nil
    ;;                     :foreground nil
    ;;                     :background "DarkOrange1"
    ;;                     :underline nil)
    ;; (set-face-attribute 'whitespace-tab nil
    ;;                     :foreground "DarkOrange1"
    ;;                     :background nil
    ;;                     :underline nil)
    ;; (set-face-attribute 'whitespace-space nil
    ;;                     :foreground "DarkOrange1"
    ;;                     :background nil
    ;;                     :underline nil)
    (global-whitespace-mode t))
#+end_src

#+RESULTS:
: whitespace

** all-the-icons
- [[https://github.com/domtronn/all-the-icons.el][GitHub - domtronn/all-the-icons.el: A utility package to collect various Icon Fonts and propertize them within Emacs.]]

- パッケージ導入後、 M-x all-the-icons-install-fonts でOSにフォントを
  インストールする

#+begin_src emacs-lisp
  (leaf all-the-icons :ensure t)
#+end_src

#+RESULTS:
: all-the-icons

** doom-modeline - モードラインにアイコン表示

  #+begin_src emacs-lisp
    (leaf doom-modeline
      :ensure t
      :custom
      ;; (doom-modeline-buffer-file-name-style . 'truncate-with-project)
      ;; (doom-modeline-icon . t)
      ;; (doom-modeline-major-mode-icon . nil)
      ;; (doom-modeline-minor-modes . nil)
      :init
      ;; (after-init . doom-modeline-mode)
      (doom-modeline-mode 1)
      :config
      ;; (line-number-mode 1)
      ;; (column-number-mode 0)
      ;;   (doom-modeline-def-modeline 'main
      ;; '(bar workspace-number window-number evil-state god-state ryo-modal xah-fly-keys matches buffer-info remote-host buffer-position parrot selection-info)
          ;; '(misc-info persp-name lsp github debug minor-modes input-method major-mode process vcs checker))
      )
  #+end_src

  #+RESULTS:
  : doom-modeline

* OS依存の設定
  - OSの判定方法
    [[https://hangstuck.com/emacs-system-type/][Emacsの設定ファイルをOSの判定をして共有する方法｜system-type | ハングスタック]]

** Linuxでmozcの設定
- 参考
  - [[https://w.atwiki.jp/ntemacs/pages/48.html][emacs-mozc を動かすための設定（Emacs 設定編） - NTEmacs @ ウィキ - atwiki（アットウィキ）]]

#+begin_src emacs-lisp
  (leaf mozc-im
    :if (eq system-type 'gnu/linux)
    :doc "Mozc with input-method-function interface."
    :req "mozc-0"
    :tag "extentions" "i18n"
    :ensure t
    :require t
    :custom
    ((default-input-method . "japanese-mozc-im"))
    :bind (("C-o" . toggle-input-method))
    :config
    (require 'mozc-im)
    (require 'wdired)

    ;; Mozc をデフォルトにする
    (setq default-input-method "japanese-mozc-im")

    ;; popup スタイルを使用する
    ;; (leaf mozc-popup
    ;;   :ensure t
    ;;   :config
    ;;   (setq mozc-candidate-style 'popup))

    ;; カーソルカラーを設定する
    (leaf mozc-cursor-color
      :require t ; el-get を利用するため ensure ではなく require
      :el-get iRi-E/mozc-el-extensions
      :config
      ;; カーソルカラーを設定する
      (setq mozc-cursor-color-alist '((direct        . "orchid")
                                      (read-only     . "yellow")
                                      (hiragana      . "green")
                                      (full-katakana . "goldenrod")
                                      (half-ascii    . "dark orchid")
                                      (full-ascii    . "orchid")
                                      (half-katakana . "dark goldenrod")))

      (defvar-local mozc-im-mode nil)
      (add-hook 'mozc-im-activate-hook
                (lambda nil
                  (setq mozc-im-mode t)))
      (add-hook 'mozc-im-deactivate-hook
                (lambda nil
                  (setq mozc-im-mode nil)))
      (advice-add 'mozc-cursor-color-update :around
                  (lambda (orig-fun &rest args)
                    (let ((mozc-mode mozc-im-mode))
                      (apply orig-fun args)))))

    (defun enable-input-method (&optional arg interactive)
      (interactive "P\np")
      (if (not current-input-method)
          (toggle-input-method arg interactive)))

    (defun disable-input-method (&optional arg interactive)
      (interactive "P\np")
      (if current-input-method
          (toggle-input-method arg interactive)))

    ;; isearch 関連
    (defun isearch-enable-input-method ()
      (interactive)
      (if (not current-input-method)
          (isearch-toggle-input-method)
        (cl-letf (((symbol-function 'toggle-input-method)
                   (symbol-function 'ignore)))
          (isearch-toggle-input-method))))

    (defun isearch-disable-input-method ()
      (interactive)
      (if current-input-method
          (isearch-toggle-input-method)
        (cl-letf (((symbol-function 'toggle-input-method)
                   (symbol-function 'ignore)))
          (isearch-toggle-input-method))))

    ;; IME をトグルするキー設定
    (global-set-key (kbd "C-o") 'toggle-input-method)
    (define-key isearch-mode-map (kbd "C-o") 'isearch-toggle-input-method)
    (define-key wdired-mode-map (kbd "C-o") 'toggle-input-method)

    ;; IME を無効にするキー設定
    (global-set-key (kbd "C-<f1>") 'disable-input-method)
    (define-key isearch-mode-map (kbd "C-<f1>") 'isearch-disable-input-method)
    (define-key wdired-mode-map (kbd "C-<f1>") 'disable-input-method)

    (global-set-key (kbd "C-j") 'disable-input-method)
    (define-key isearch-mode-map (kbd "C-j") 'isearch-disable-input-method)
    (define-key wdired-mode-map (kbd "C-j") 'disable-input-method)

    ;; IME を有効にするキー設定
    (global-set-key (kbd "C-<f2>") 'enable-input-method)
    (define-key isearch-mode-map (kbd "C-<f2>") 'isearch-enable-input-method)
    (define-key wdired-mode-map (kbd "C-<f2>") 'enable-input-method)

    ;; (global-set-key (kbd "C-o") 'enable-input-method)
    ;; (define-key isearch-mode-map (kbd "C-o") 'isearch-enable-input-method)
    ;; (define-key wdired-mode-map (kbd "C-o") 'enable-input-method)

    ;; isearch を利用する前後で IME の状態を維持するための対策
    (add-hook 'isearch-mode-hook (lambda () (setq im-state mozc-im-mode)))
    (add-hook 'isearch-mode-end-hook
              (lambda ()
                (unless (eq im-state mozc-im-mode)
                  (if im-state
                      (activate-input-method default-input-method)
                    (deactivate-input-method)))))

    ;; wdired 終了時に IME を OFF にする
    (advice-add 'wdired-finish-edit
                :after (lambda (&rest args)
                         (deactivate-input-method))))
#+end_src

#+RESULTS:
: mozc-im

** Windowsで文字のエンコードをUTF-8に
#+begin_src emacs-lisp
  (leaf windows
    :when (eq system-type 'windows-nt)
    :config
    (prefer-coding-system 'utf-8))
#+end_src

#+RESULTS:
: windows

** Windows IME設定
- [[https://nosubject.io/windows10-emacs-27-w32-ime/][[Emacs] Windows10 で Emacs 27 を使う | ** nosubject.io **]]
- [[https://qiita.com/tawara_/items/0a7b8c50a48ea86b2d91][あの IBM が作ったオープンソース日本語フォントを使い、プログラミングフォント『PlemolJP』を作ってみた - Qiita]]

  #+begin_src emacs-lisp
    (leaf tr-ime
      :when (eq system-type 'windows-nt)
      :ensure t
      :setq
      (default-input-method . "W32-IME")
      (w32-ime-mode-line-state-indicator-list . '("[--]" "[あ]" "[--]"))
      :setq-default
      (w32-ime-mode-line-state-indicator . "[--]")
      :config
      (tr-ime-standard-install)
      (w32-ime-initialize)
      ;; IME制御（yes/noなどの入力時にIMEをoffにする
      (wrap-function-to-control-ime 'universal-argument t nil)
      (wrap-function-to-control-ime 'read-string nil nil)
      (wrap-function-to-control-ime 'read-char nil nil)
      (wrap-function-to-control-ime 'read-from-minibuffer nil nil)
      (wrap-function-to-control-ime 'y-or-n-p nil nil)
      (wrap-function-to-control-ime 'yes-or-no-p nil nil)
      (wrap-function-to-control-ime 'map-y-or-n-p nil nil)
      ;; 通常使用するフォント
      ;; (set-frame-font "BIZ UDゴシック-12" nil t)
      (set-frame-font "PlemolJP-12" nil t)
      (setq-default line-spacing 0) ; 行間
      ;; IME未確定時のフォント設定
      (modify-all-frames-parameters '((ime-font . "PlemolJP-12")))
      :bind
      ("C-o" . toggle-input-method))
  #+end_src

  #+RESULTS:
  : tr-ime

  #+begin_src emacs-lisp
    (when (eq system-type 'windows-nt)
      (package-install 'tr-ime)
      (tr-ime-standard-install)
      (setq default-input-method "W32-IME")
      (w32-ime-initialize))
  #+end_src

** WSLでWindows側のブラウザを立ち上げる

- WSL側からWindowsを制御するユーテリティ
  - [[https://github.com/wslutilities/wslu][wslutilities/wslu: A collection of utilities for Windows 10 Linux Subsystems]]
  - wslviewコマンドを利用する

- Emacsが使うブラウザを設定する
  - [[https://www.emacswiki.org/emacs/BrowseUrl#h5o-4][[Home] Browse Url]]

- WSLかどうか判断
  - [[https://qiita.com/miy4/items/acf50a9c0a053b878b56#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E6%8E%A2%E3%81%99][EmacsでWSLを使っている/いないを判断する - Qiita]]

#+begin_src emacs-lisp
  (when (and (eq system-type 'gnu/linux)
             (getenv "WSLENV"))
    (setq browse-url-browser-function 'my/browser)
    (setq browse-url-generic-program "web-browser"))

  (defun my/browser (url &rest ignore)
    "Browse URL using wslview."
    (interactive "sURL: ")
    (shell-command (concat "wslview " url)))
#+end_src

#+RESULTS:
: my/browser

* 未整理
** TODO EAF - Emacs Application Framework
+ .emacs.dをgitで管理しているのでsubmoduleで追加
+ install-eaf.py を実行する前に apt update && apt upgrade

#+begin_src emacs-lisp :tangle no
  (leaf eaf
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
    :require t
    :custom ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off . t)
    (eaf-browser-enable-adblocker . t)
    (browse-url-browser-function . 'eaf-open-browser)
    :config
    (require 'eaf-browser)
    (require 'eaf-pdf-viewer)

    (defalias 'browse-web #'eaf-open-browser)
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src

#+RESULTS:
: eaf
** DONE visual-fill-column - 長い行を任意の桁で折り返す          :published:
CLOSED: [2021-11-10 Wed 11:12]
:PROPERTIES:
:BLOG:     plover
:DATE:     [2021-11-08 22:19:48]
:OPTIONS:  toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Tech
:POST_TAGS: Emacs
:ID:       o2b:88634903-8b8b-44b8-9b7f-a50fdc58ed5d
:POST_DATE: [2021-11-08 Mon 22:21]
:POSTID:   218
:END:
*** 長い行を折り返す？折り返さない？
Emacsでは長い行を折返して表示してくれます。

[[https://ploversky.net/wp-content/uploads/2021/11/emacs-long-line.png]]

行が繋がっていることを示す矢印のアイコンが、画面の左右にいっぱい出ていますね。

この折返しをしなくするには、変数trancate-linesをtに設定します。

#+begin_example
M-x set-variable
truncate-lines
t
#+end_example
そうすると、

https://ploversky.net/wp-content/uploads/2021/11/emacs-long-line-truncate.png

長い文の前の一部分だけ、表示されるようになりました。カーソルを右に移動すれば、全体を読むことができます。プログラミングするときには便利です。

*** 改行で長い行を分割する
この長い行でM-qを押します（fill-paragraph）。すると、

https://ploversky.net/wp-content/uploads/2021/11/emacs-long-line-fill-paragraph.png

長い一つの行に、改行が挿入されて複数の行に分割されました。このとき、一つの行の長さは72文字を超えない長さになります。Emacsのヘルプやマニュアルを見るとこのようなスタイルですね。紙に印刷するときも、このスタイルならはみ出て読めなくなることもありません。昔はメールもこんな感じで書くのが普通でした。

*** 一行を分割しないで折返し位置を自由に設定したい
さて、時は流れて、いまやメールもHTMLで書く時代です（好むと好まざるにかかわらず）。小さな画面のスマートフォンでメールを読むこともあります。そんなとき、72文字ごとに改行がはいると、非常に読みづらくなります。一行は一行のままで、表示をするときには画面のサイズに応じた位置で改行してほしいですよね。

ただし、デフォルトの設定だとウインドウの端で折り返されているため、少し読みにくいと思いませんか？一行は一行のまま、自動で改行してほしい、そのとき、改行する位置を指定したい。こんなときに利用できるパッケージがvisual-fill-columモードです。

https://ploversky.net/wp-content/uploads/2021/11/emacs-long-line-visual-fill-column.png

一行は一行のまま、72文字で折返してくれています。一行の長さが短くなり、多少は読みやすくなってますね。

*** visula-fill-columnのインストール
パッケージをインストールするには次の通り設定します。

#+begin_src emacs-lisp
  (leaf visual-fill-column
    :doc "fill-column for visual-line-mode"
    :req "emacs-25.1"
    :tag "emacs>=25.1"
    :url "https://github.com/joostkremers/visual-fill-column"
    :added "2021-11-08"
    :emacs>= 25.1
    :ensure t
    :bind((:visual-fill-column-mode-map
           ("C-a" . beginning-of-visual-line)
           ("C-e" . end-of-visual-line)
           ("C-k" . kill-visual-line))))
#+end_src

#+RESULTS:
: visual-fill-column

折り返す位置は指定できます。折り返したい桁にカーソルを合わせ、 C-u C-x f を押すと、その位置で改行するようになります。あるいは C-u 50 C-x f のように、桁数を引数に与えてもよいです。なお、設定しただけでは表示は変わりません。何か文字を入力すると、変わります。

https://ploversky.net/wp-content/uploads/2021/11/emacs-long-line-visual-fill-column-50.png

また、一行を基準に動作する標準のキーを、画面の一行を基準に動作するコマンドに、次の通り置き換えています[fn:1]。

| キー | 説明                          |
|------+-------------------------------|
| C-a  | *画面上の* 行の一番先頭に移動 |
| C-e  | *画面上の* 行の一番末尾に移動 |
| C-k  | *画面上の* 行を一行削除       |

この設定により、折り返す桁を自由に指定できる上に、画面上の一行を単位として編集できます。

*** 単語の途中で折り返さないようにするには
さて、日本語で入力するのであればこのままでもよいのですが、英語の場合、単語の途中で折り返されるのは嫌ですね。そんなときは visual-line-mode を使います。このモードは標準装備です。M-x visual-line-modeで設定できます。

https://ploversky.net/wp-content/uploads/2021/11/emacs-long-line-visual-line-mode.png

単語が途中で改行されないので、見やすくなりました。この行は全て繋がっていますが、矢印のアイコンもでなくなりました。ただし、日本語の文書でこの設定をしてしまうと、逆に見づらいです（日本語には単語の区切り（空白）がないので、逆にどこで改行するか判断しにくい）。

#+begin_comment
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ante nisl, condimentum vitae blandit porttitor, ultricies in enim. Integer sit amet mi tincidunt, blandit metus id, finibus quam. Donec egestas tortor at metus condimentum, at varius magna venenatis. Nullam auctor ipsum quis massa semper, non eleifend quam accumsan. Etiam sed dui nisl. Nulla ac tempus nulla. Nulla facilisi. Cras ligula elit, rutrum in augue volutpat, pharetra tempus metus. Aliquam nibh est, scelerisque sit amet nisi non, aliquam volutpat nibh. Pellentesque consequat dui eros, sed fermentum augue tincidunt eu. Quisque eget tristique massa, eu gravida nunc.
#+end_comment

*** まとめ
日本語の場合、

1. truncate-linesはnil（標準のまま）
2. visual-fill-columnパッケージをインストールして桁数を設定

すると、自由に好きな位置で折返し表示させて編集できるようになります。

英語の場合、追加で

3. visual-line-modeを利用（標準で利用可）

となります。

*** 参考
+ [[https://github.com/joostkremers/visual-fill-column][joostkremers/visual-fill-column: Emacs mode for wrapping visual-line-mode buffers at fill-column.]]
  * visual-fill-columnパッケージのサイト
+ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html]]
  * visual-line-modeの説明

[fn:1] orgモードではC-kにorg-kill-lineが割り当てられます。これを上書きすることで弊害がおきるかもしれませんが、未確認です。

*** COMMENT コメント
+ mu4eでメールを書くときに利用する。
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html][https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html]]
  * Adaptive Fill Modeと組み合わせることも（調査中）
+ [[https://github.com/joostkremers/visual-fill-column#centering-the-text][joostkremers/visual-fill-column: Emacs mode for wrapping visual-line-mode buffers at fill-column.]]
  * センタリングすることも

** shr/eww - Simple HTML Reader
+ 説明
  * EmacsのWebブラウザに関する設定
  * ewwはデフォルトだと読みにくいプロポーショナルフォントになる
  * mu4eではメールを読む際にshrを使う
+ 文献
  * [[https://www.emacswiki.org/emacs/eww][[Home] eww]]
+ 設定
  * ewwを標準にするにはbrowse-url-browser-functionを設定する
  * shr-use-fontsをnilに設定することで、固定幅フォントを使うようになる

#+begin_src emacs-lisp
  (leaf eww
    :custom
    (
     ;; (browse-url-browser-function . 'eww-browse-url)
     (shr-use-colors    . nil)
     (shr-use-fonts     . nil)
     (shr-image-animate . nil)
     (shr-width         . 72)
     (eww-search-prefix . "https://www.google.com/search?q=")
     )
    )
#+end_src

#+RESULTS:
: eww

** mu4e
*** smtpmail - メールの送信
**** 説明
+ 最初のメールを送信時、パスワードを入力すると、~/.authinfo に自動で追加

;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu

#+begin_src emacs-lisp
  (leaf smtpmail
    :require t
    :setq ((message-send-mail-function quote smtpmail-send-it)
           (starttls-use-gnutls . t)
           (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
           (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "yc@aiit.ac.jp" nil)))
           (smtpmail-default-smtp-server . "smtp.gmail.com")
           (smtpmail-smtp-server . "smtp.gmail.com")
           (smtpmail-smtp-service . 587)))
#+end_src

#+RESULTS:
: smtpmail

*** mu/mu4e - Maildirの読み書き・IMAPサーバとの同期
+ 概要
  * [[https://www.emacswiki.org/emacs/mu4e][[Home] mu4e]]
  * [[https://github.com/djcb/mu/tree/master/mu4e][mu/mu4e at master · djcb/mu]]
  * mu4eはmuに同梱されている
    - aptで入るものは古い
  * [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html#Installation][Installation (Mu4e 1.6.0 user manual)]]
    - aptで必要なライブラリを入れる
  * [[https://github.com/djcb/mu/releases][Releases · djcb/mu]]
    - 1.6.9のtar ballをとってくる
    - sudo apt install autoconf automake libtool texinfo
  * /usr/local/share/emacs/site-lisp/mu4e/
  * [[https://cheatography.com/ddoherty03/cheat-sheets/mu4e-with-gmail-hints/][mu4e (With GMail Hints) Keyboard Shortcuts by ddoherty03 - Download free from Cheatography - Cheatography.com: Cheat Sheets For Every Occasion]]
    - cheetsheet
  * [[https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html][Gmail configuration (Mu4e 1.6.0 user manual)]]
    - 前半はofflineimap用
  * htmlメールはewwで表示されているようだ
    * フォントはMicrosoft Yahei
      - [[https://qiita.com/styzo/items/28d5d994a293fa704476][emacs 26 のフォントの設定 M-x view-hello-file - Qiita]]
    * ewwの正体はshr
+ mbsyncについて
  * 参考文献
    - [[https://isync.sourceforge.io/][isync: free IMAP and MailDir mailbox synchronizer]]
    - [[https://sourceforge.net/projects/isync/][Isync download | SourceForge.net]]
    - [[https://sourceforge.net/p/isync/isync/ci/master/tree/][Isync / isync / [da6567]]]
  * Gmailの設定
    - セキュリティページで有効にする
  * メールパスワードの設定
    - ~/.mailpass.gpg
  * mbsyncの設定
    - 日本語フォルダ名が修正utf-7になる
    - utf-7を変換するツールがあんまりない
      * [[https://kkobayashi-a.hatenablog.com/entry/2019/04/11/111856][imapsyncでモバメをGmailにコピーする その2 - kkobayashi_a’s blog]]
    - [[https://arimasou16.com/blog/2021/09/01/00413/][OfflineIMAPとNeoMuttを合わせて使う 後半(成功例)]]
    - つくった（ruby）

    #+begin_example
    require 'net/imap'

    puts Net::IMAP.decode_utf7 '&MFkweTBmMG4w4TD8MOs-'
    puts Net::IMAP.decode_utf7 '&MLkwvzD8TtgwTQ-'
    puts Net::IMAP.decode_utf7 '&j,dg0TDhMPww6w-'
    puts Net::IMAP.decode_utf7 '&kc2JgQ-'
    puts Net::IMAP.decode_utf7 '&MLQw33ux-'
    puts Net::IMAP.decode_utf7 '&Tgtm+DBN-'
    puts Net::IMAP.decode_utf7 '&kAFP4W4IMH8w4TD8MOs-'
    #+end_example

    | 修正UTF-7               | 変換結果       |           |
    |-------------------------+----------------+-----------|
    | '&MFkweTBmMG4w4TD8MOs-' | すべてのメール | All Mail  |
    | '&MLkwvzD8TtgwTQ-'      | スター付き     | Starred   |
    | '&j,dg0TDhMPww6w-'      | 迷惑メール     | Spam      |
    | '&kc2JgQ-'              | 重要           | Important |
    | '&MLQw33ux-'            | ゴミ箱         | Trash     |
    | '&Tgtm+DBN-'            | 下書き         | Draft     |
    | '&kAFP4W4IMH8w4TD8MOs-' | 送信済みメール | Sent Mail |
  * Near側のフォルダが作られない
    - バージョンが古いから？
    - UIDVALIDITYが鍵のようだ
      - ~/.mbsyncに対応表があるので、やりなおすときは削除する

        #+begin_example
          rm -r ~/Maildir
          mkdir -p Maildir/ploversky.net@gmail.com
          rm -r ~/.mbsync
          mbsync private
        #+end_example
+ mbsyncの設定
  * 設定
    1. メイン画面で'U'キーを押すとmbsyncで更新するよう設定
    2. メールを移動する際、ファイル名を変更（mbsyncではこれを設定するのが望ましい）
       設定しないと、UIDが書き換わらないので重複する可能性がある。

    #+NAME: mbsync-settings
    #+begin_src emacs-lisp :tangle no
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-change-filenames-when-moving t)

    #+end_src

    #+RESULTS: mbsync-settings
    : t

+ メールを作成するモードでの文字の折返し
  * 参考
    - [[https://emacs.stackexchange.com/questions/3061/how-to-stop-mu4e-from-inserting-line-breaks][(add-hook 'mu4e-compose-mode-hook 'visual-line-mode)]]

  * 設定
    1. デフォルトではauto-fillがonであるため、長い行には自動的に改行が追加される（古き良き時代の標準スタイル）のでこれをoffにする。
    2. 単語の途中で折返さないようにvisual-line-modeをonにする。

    #+NAME: mu4e-compose-mode-hook
    #+begin_src emacs-lisp :tangle no
      (add-hook 'mu4e-compose-mode-hook 'turn-off-auto-fill)
      (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)

    #+end_src

    #+RESULTS: mu4e-compose-mode-hook
    | visual-line-mode | turn-off-auto-fill |

+ mu4e-dashboard
  * 参考
    - [[https://www.reddit.com/r/emacs/comments/mzgsm0/mu4e_look_and_feel/][Mu4e look and feel : emacs]]
    - [[https://github.com/rougier/mu4e-dashboard][rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs)]]
  * 説明
    - ソースコードのorgファイルを編集する必要があるようなので、forkしてみる
    - サンプルに従い、orgファイルを作成すれば、ダッシュボードになる

    #+NAME: mu4e-dashboard
    #+begin_src emacs-lisp :tangle no
      ;; (leaf mu4e-dashboard
      ;;   :el-get ychubachi/mu4e-dashboard
      ;;   :require t

    #+end_src

    #+RESULTS: mu4e-dashboard

+ 全体の設定

#+begin_src emacs-lisp :noweb yes
  (leaf mu4e
    :load-path "/usr/local/share/emacs/site-lisp/mu4e/"
    :require t
    :config
    ;; use mu4e for e-mail in emacs
    (setq mail-user-agent 'mu4e-user-agent)

    (setq mu4e-headers-fields
          '((:empty . 0) (:human-date . 8) (:flags . 6) (:mailing-list . 10)(:from . 22) (:subject)))

    (setq mu4e-drafts-folder "/Gmail/draft")
    (setq mu4e-sent-folder   "/Gmail/sent")
    (setq mu4e-trash-folder  "/Gmail/trash")
    (setq mu4e-refile-folder "/Gmail/archive")

    (setq mu4e-bookmarks
          '((:name "Unread INBOX"     :query "maildir:/Gmail/inbox/ flag:unread AND NOT flag:trashed"  :key ?i)
            (:name "Unread Archive"   :query "maildir:/Gmail/archive/ flag:unread AND NOT flag:trashed"  :key ?a)
            (:name "Unread messages"  :query "flag:unread AND NOT flag:trashed"  :key 117)
            (:name "Starred messages" :query "flag:flagged AND NOT flag:trashed" :key ?S)
            (:name "Draft Masseges"   :query "flag:draft AND NOT flag:trashed"   :key ?D)
            (:name "Trash"            :query "flag:trashed"                      :key ?T)
            (:name "Today's messages" :query "date:today..now"                 :key 116)
            (:name "Last 7 days" :query "date:7d..now" :hide-unread t          :key 119)
            (:name "Messages with images" :query "mime:image/*" :hide-unread t :key 112)
            ))

    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.
    (setq mu4e-maildir-shortcuts
          '((:maildir "/Gmail/inbox"             :key ?i)
            (:maildir "/Gmail/archive"           :key ?a)
            (:maildir "/Gmail/draft"             :key ?d)))

    ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)

    ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
    ;; additional non-Gmail addresses and want assign them different
    ;; behavior.)

    ;; something about ourselves
    (setq
     user-mail-address "yc@aiit.ac.jp"
     user-full-name  "中鉢欣秀"
     mu4e-compose-signature
     (concat
      "東京都立産業技術大学院大学（AIIT） 研究科長補佐\n"
      "情報アーキテクチャコース担当 教授 中鉢欣秀 博士（政策・メディア）\n"))

    (setq mu4e-headers-results-limit -1)

    <<mbsync-settings>>
    <<mu4e-compose-mode-hook>>
    <<mu4e-dashboard>>

    (leaf mu4e-thread-folding
      :el-get rougier/mu4e-thread-folding
      :require t
      :config
      (add-to-list 'mu4e-header-info-custom
                   '(:empty :name "Empty" :shortname "" :function
                            (lambda (msg)
                              "  ")))

      (define-key mu4e-headers-mode-map (kbd "<tab>")     'mu4e-headers-toggle-at-point)
      (define-key mu4e-headers-mode-map (kbd "<left>")    'mu4e-headers-fold-at-point)
      (define-key mu4e-headers-mode-map (kbd "<S-left>")  'mu4e-headers-fold-all)
      (define-key mu4e-headers-mode-map (kbd "<right>")   'mu4e-headers-unfold-at-point)
      (define-key mu4e-headers-mode-map (kbd "<S-right>") 'mu4e-headers-unfold-all)

      (add-hook 'mu4e-headers-found-hook #'mu4e-thread-folding-mode)
      )
    )
#+end_src

#+RESULTS:
: mu4e

** TODO project.el
+ 説明
  * プロジェクトを扱う

+ 設定

  #+begin_src emacs-lisp :tangle no
    (leaf project :package t :require t)
  #+end_src

  #+RESULTS:
  : project

** COMMENT TODO hydra

+ [[https://medium.com/@mopemope/hydra-%E3%81%AE%E3%82%B9%E3%82%B9%E3%83%A1-88a4168f945c][Hydra のススメ. みなさん、 Emacs 使ってますか？先日 Emacs 26.1… | by mopemope | Medium]]
#+begin_src emacs-lisp :tangle no
  (bind-key
   "<f3>"
   (defhydra hydra-zoom (:colorg red :hint nil)
   “zoom”
    (“g” text-scale-increase “in”)
   (“l” text-scale-decrease “out”)))
#+end_src

#+RESULTS:

* おわりに
** お約束の記述

#+begin_src emacs-lisp
(provide 'README)

;; Local Variables:
;; indent-tabs-mode: nil
;; byte-compile-warnings: (not cl-functions obsolete)
;; End:

;;; README.el ends here
#+end_src

** 参考文献
1. [[https://uwabami.github.io/cc-env/Emacs.html][Emacs の設定 | Youhei SASAKI’s official site]]
* Emacs設定：やりたいこと                                            :REFILE:
** TODO リアルオートセーブアップ
:PROPERTIES:
:CREATED: <2021-11-10 Wed 09:47>
:ANNOTADED: [[file:~/.emacs.d/README.org::*leaf][leaf]]
:END:
- [[http://emacs.rubikitch.com/backup-each-save/][backup-each-save.el : Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ]]
- [[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el : バッファを自動保存させる超シンプルなマイナーモード]]
** TODO [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf#%E5%B0%8F%E6%8C%87%E3%82%92%E9%85%B7%E4%BD%BF%E3%81%9B%E3%81%9A%E3%81%8B%E3%81%A4%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%AE%E3%82%AC%E3%82%A4%E3%83%89%E3%82%92%E5%87%BA%E3%81%99----hydra][Emacsモダン化計画 -かわEmacs編- - Qiita]]

;; Local Variables:
;; eval: (visual-fill-column-mode)
;; End:
