#+startup: content num indent
* Header
** はじめに
   - init.elの実行時、このREADME.orgからREADME.elを生成します。
   - orgのハッケージは手動で最新版に更新しておきます。

** Copyright
- Copyright など。

#+begin_src emacs-lisp
;;; README.el --- My README.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020 Yoshihide Chubachi

;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  My README.el.

;;; Code:
#+end_src

** 事前にインストールしておくもの準備
- 各種フォント
  - Noto Sans Mono CJK JP-12
- migemo
  - cmigemo
- pygment
  - python3をインストール
  - /home/yc/.local/binにパス
  - pip install -U pip
  - pip install pygments
- graphviz(dot)
  - sudo apt install graphviz
* 準備
** (require 'cl)を検査しない

#+begin_src emacs-lisp
(setq byte-compile-warnings '(not cl-functions obsolete))
#+end_src

** COMMENT ここの意味が理解できてない

#+begin_src emacs-lisp
  ;; this enables this running method
  ;;   emacs -q -l ~/.debug.emacs.d/{{pkg}}/init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
            (expand-file-name
             (file-name-directory
              (or load-file-name byte-compile-current-file))))))
#+end_src
** org/melpa/gnuパッケージの設定

#+begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org"   . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu"   . "https://elpa.gnu.org/packages/")))
    (package-initialize))
#+end_src

#+RESULTS:

** パッケージ管理
*** パッケージのインストール
    #+begin_src emacs-lisp
      (unless (package-installed-p 'leaf)
        (package-refresh-contents)
        (package-install 'leaf))
    #+end_src

    #+RESULTS:

*** leaf-keywords

    #+begin_src emacs-lisp
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf leaf-keywords
        :ensure t
        :init
        (leaf hydra :ensure t)
        (leaf el-get :ensure t)
        (leaf blackout :ensure t)
        :config
        ;; initialize leaf-keywords.el
        (leaf-keywords-init))
    #+end_src

*** leaf-convert
    #+begin_src emacs-lisp
      (leaf leaf-convert :ensure t)
    #+end_src

*** leaf-tree

    #+begin_src emacs-lisp
      (leaf leaf-tree
        :ensure t
        :custom
        ((imenu-list-size . 30)
         (imenu-list-position . 'left)))
    #+end_src

* Emacs本体の設定
** cus-edit

    #+begin_src emacs-lisp
      (leaf cus-edit
        :doc "tools for customizing Emacs and Lisp packages"
        :tag "builtin" "faces" "help"
        :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
    #+end_src
 
** cus-start

    #+begin_src emacs-lisp
            (leaf cus-start
              :doc "define customization properties of builtins"
              :tag "builtin" "internal"
              :bind (("\C-z" . undo))
              :preface
              (defun c/redraw-frame nil
                (interactive)
                (redraw-frame))
              :bind (("M-ESC ESC" . c/redraw-frame))
              :custom '((user-full-name . "Yoshihide Chubachi")
                        (user-mail-address . "yoshi@chubachi.net")
                        (user-login-name . "yc")
                        (create-lockfiles . nil)
                        (debug-on-error . t)
                        (init-file-debug . t)
                        (frame-resize-pixelwise . t)
                        (enable-recursive-minibuffers . t)
                        (history-length . 1000)
                        (history-delete-duplicates . t)
                        (scroll-preserve-screen-position . t)
                        (scroll-conservatively . 100)
                        (mouse-wheel-scroll-amount . '(1 ((control) . 5)))
                        (ring-bell-function . 'ignore)
                        (text-quoting-style . 'straight)
                        (truncate-lines . t)
                        ;; (use-dialog-box . nil)
                        ;; (use-file-dialog . nil)
                        ;; (menu-bar-mode . t)
                        ;; (tool-bar-mode . nil)
                        (scroll-bar-mode . nil)
                        (indent-tabs-mode . nil)
                        (inhibit-startup-screen . t))
              :config
              (defalias 'yes-or-no-p 'y-or-n-p)
              (keyboard-translate ?\C-h ?\C-?))
    #+end_src

    #+RESULTS:
    : cus-start

** フォントの設定
- Noto Sansの等幅フォントを設定する
- 表示の確認

| mmmm |
| llll |
| 日本 |
| 漢字 |
| ああ |
| んん |
| ￥￥ |
| \\\\ |
| 　　   |
|      |

#+begin_src emacs-lisp
(set-frame-font "Noto Sans Mono CJK JP-12" nil t)
;; ↓漢字がボールド体にならない
;; (set-frame-font "PlemolJP-12" nil t)
;; (set-frame-font "HackGen-12" nil t)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(setq-default line-spacing 0) ; 行間
#+end_src

#+RESULTS:
: 0

* ビルトインパッケージの設定
** whitespace - 空白文字の可視化
　　　ああ全角　　　　　←全角　あいうえお  
あいうえお　漢字  

#+begin_src emacs-lisp
(progn
  (require 'whitespace)
  (setq whitespace-style
        '(
          face ; faceで可視化
          trailing ; 行末
          tabs ; タブ
          spaces ; スペース
          space-mark ; 表示のマッピング
          tab-mark
          ))
  (setq whitespace-display-mappings
        '(
          ;; (space-mark ?\u3000 [?\u2423])
          (space-mark ?\u3000 [?□])
          (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])
          ))
  (setq whitespace-trailing-regexp  "\\([ \u00A0]+\\)$")
  (setq whitespace-space-regexp "\\(\u3000+\\)")
  (set-face-attribute 'whitespace-trailing nil
                      :foreground "RoyalBlue4"
                      :background "RoyalBlue4"
                      :underline nil)
  (set-face-attribute 'whitespace-tab nil
                      :foreground "yellow4"
                      :background "yellow4"
                      :underline nil)
  (set-face-attribute 'whitespace-space nil
                      :foreground "gray40"
                      :background "gray20"
                      :underline nil)
  (global-whitespace-mode t)
  )
#+end_src

#+RESULTS:
: t
** paren
- 対応するカッコの表示

#+begin_src emacs-lisp
  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :custom ((show-paren-delay . 0.1))
    :global-minor-mode show-paren-mode)
#+end_src

** isearch

- isearch で漢字入力ができるようにする

#+begin_src emacs-lisp
  (leaf isearch
    :bind ((isearch-mode-map
            ("C-o" . isearch-toggle-input-method))))
#+end_src

** wdired

- 多分設定が中途はんぱ

#+begin_src emacs-lisp
  (leaf wdired
    :doc "Rename files editing their names in dired buffers"
    :tag "builtin"
    :added "2020-11-21"
    :bind ((wdired-mode-map
            ("C-o" . toggle-input-method))))
#+end_src

** autorevert
- ディスクのファイルが更新されたらバッファも自動で更新する

#+begin_src emacs-lisp

  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :tag "builtin"
    :custom ((auto-revert-interval . 0.1))
    :global-minor-mode global-auto-revert-mode)
#+end_src

** macrostep

- elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf macrostep
    :doc "interactive macro expander"
    :req "cl-lib-0.5"
    :tag "debugging" "macro" "languages" "lisp"
    :url "https://github.com/joddie/macrostep"
    :ensure t
    :bind (("C-c e" . macrostep-expand)))
#+end_src

* helm
** straightパッケージマネージャー

   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (setq package-enable-at-startup nil)
   #+end_src

** Helm
*** Helm本体
    - [[https://github.com/emacs-helm/helm/wiki#helm-mode][Home · emacs-helm/helm Wiki]]
     
   #+begin_src emacs-lisp
     (leaf helm
       :preface
       (straight-use-package 'helm)
       :bind
       ("M-x" . helm-M-x)
       ("C-x r b" . helm-filtered-bookmarks)
       ("C-x C-f" . helm-find-files)
       ("C-c h" . helm-mini)
       :config
       (helm-mode 1))
   #+end_src

   #+RESULTS:
   : helm
  
*** helm-recentf
   #+begin_src emacs-lisp
     (leaf helm-recentf
       :bind ("C-c r" . helm-recentf)
       :custom
       (recentf-max-saved-items . 2000)
       (recentf-auto-cleanup quote never)
       (recentf-exclude quote
                        ("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:"))
       :config
       (setq recentf-auto-save-timer (run-with-idle-timer 30 t 'recentf-save-list))
       (recentf-mode 1))
   #+end_src

   #+RESULTS:
   : helm-recentf

* org-mode
** org-agenda-files
- org-agenda-filesのリストにDropboxのディレクトリを追加しておく。
  - この中にあるorgファイルがすべてagendaに反映される。
- org-num-modeをすべてのファイルで実行する
  - (org-startup-numerated . t)がうまく反映されない。
- Androd端末から利用するには [[https://play.google.com/store/apps/details?id=com.orgzly][Orgzly]] が良さそう。

#+begin_src emacs-lisp
  (leaf org-mode
    :custom
    (org-directory . "~/Dropbox/org/")
    (org-agenda-files . '("~/Dropbox/org/"))
    (org-default-notes-file . "Notes.org")
    (org-refile-targets . '((org-agenda-files :tag . "REFILE")))
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture))
#+end_src

#+RESULTS:
: org-mode

** org-captureのテンプレート設定

   - [[https://orgmode.org/manual/Capture.html][Capture (The Org Manual)]]
   - [[https://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][Setting up capture (The Org Manual)]]
   - [[https://www.5ing-myway.com/org-capture/][org-captureをカスタマイズして、すばやくメモを取る方法 | 趣味に生きる。]]

   - ファイルは org-directory 以下にある。

   #+begin_src emacs-lisp
     (leaf org-capture-templates
       :setq ((org-capture-templates
               quote
               (("m" "メモ" entry
                 (file+olp+datetree "Memo.org")
                 "* %?\n  Entered on %T\n"
                 :tree-type month) ; this doesn't seem to work
                ("t" "タスク（スケジュールなし）" entry
                 (file+headline "List.org" "すること")
                 "** TODO %? \n")
                ("s" "タスク（スケジュールあり）" entry
                 (file+headline "List.org" "すること")
                 "** TODO %? \n   SCHEDULED: %^t \n")
                ("l" "やりたいこと" checkitem
                 (file+headline "List.org" "やりたいこと")
                 "[ ] %? \n")
                ("b" "欲しいもの" checkitem
                 (file+headline "List.org" "欲しいもの")
                 "[ ] %? \n")
                ("g" "行きたいところ" checkitem
                 (file+headline "List.org" "行きたいところ")
                 "[ ] %? \n")))))
   #+end_src

   #+RESULTS:
   : org-capture-templates

   #+begin_src emacs-lisp
     (define-key global-map
       (kbd "C-c m")
       (lambda () (interactive) (org-capture nil "m")))
   #+end_src

   #+RESULTS:
   | lambda | nil | (interactive) | (org-capture nil m) |

** org-tempo
   - "<el"+<TAB>　でemacs-lispのソースコードブロックがでるように設定。
   
   #+begin_src emacs-lisp
     (leaf org-tempo
       :require t
       :config
       (add-to-list 'org-structure-template-alist
                    '("el" . "src emacs-lisp")))
   #+end_src

   #+RESULTS:
   : org-tempo

** latex関連
*** orgでlatexの設定例
    - 表題・筆者・日付の書き方

    #+begin_comment
    #+TITLE: とても素晴らしい研究の発表
    #+AUTHOR: 中鉢 欣秀, CHUBACHI Yoshihide
    #+DATE: 2021-08-06
    #+end_comment

    - 目次を出力しない
      
    #+begin_comment
    #+OPTIONS: toc:nil # hoge
    #+end_comment

    - 参考
      - [[https://www-he.scphys.kyoto-u.ac.jp/member/shotakaha/dokuwiki/doku.php?id=toolbox:emacs:org:latex:start][Org-LaTeX [QumaWiki]]]
      - [[https://taipapamotohus.com/post/org-mode_paper_3/][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） | A perfect autumn day]]

    #+begin_comment
#+LaTeX_CLASS: koma-jarticle
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
#+STARTUP:  overview
#+STARTUP:  hidestars
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: date:nil
      #+end_comment

*** latex本体
    - latexでPDFを作成するには C-c C-e l p
    - Windows用のPDFビューワはsumatrapdf（scoopでインストール可）

    #+begin_src emacs-lisp
      (require 'ox-latex)

      (setq org-latex-pdf-process
            '("platex -shell-escape %f"
              "platex -shell-escape %f"
              "pbibtex %b"
              "platex -shell-escape %f"
              "platex -shell-escape %f"
              "dvipdfmx %b.dvi"))
    #+end_src

*** ソースコードの pretty print
- Windowsの場合
  - scoopでpygmentをインストールしておく
  - python インストールして pip install pygments
  - PATHの登録
    - C:\Users\yc\scoop\apps\python\current\Scripts

  #+begin_src emacs-lisp
    (setq org-export-latex-listings t)

    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("frame" "lines")
            ("framesep=2mm")
            ("linenos=true")
            ("baselinestretch=1.2")
            ("fontsize=\\footnotesize")
            ("breaklines")
            ))

    (add-to-list 'org-latex-packages-alist "\\usepackage{minted}" t)
  #+end_src

  #+RESULTS:
  | \usepackage{minted} |

*** Beamer

- beamerの作成は C-c C-e l P

#+begin_src emacs-lisp
  (require 'ox-beamer)
  (setq org-beamer-outline-frame-title "目次")
  (setq org-beamer-frame-default-options "t") ; フレームの位置をtopにする。
#+end_src

*** 参考文献 RefTex-Mode
    - [[https://taipapamotohus.com/post/org-mode_paper_3/][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） | A perfect autumn day]]
    - [[https://github.com/jkitchin/org-ref][jkitchin/org-ref: org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools to go with it.]]
    - [[https://aliquote.org/post/org-and-bibtex/][Org and Bibtex - aliquote]]
      
    #+begin_src emacs-lisp 
            (leaf org-ref
              :ensure t
              :require t
              :setq ((reftex-default-bibliography quote
                                                  ("~/git/bibliography/references.bib"))
         
                     (org-ref-bibliography-notes . "~/git/bibliography/notes.org")
                     (org-ref-default-bibliography quote
                                                   ("~/git/bibliography/references.bib"))
                     (org-ref-pdf-directory . "~/git/bibliography/bibtex-pdfs/")
         
                     (bibtex-completion-bibliography . "~/git/bibliography/references.bib")
                     (bibtex-completion-library-path . "~/git/bibliography/bibtex-pdfs")
                     (bibtex-completion-notes-path . "~/git/bibliography/helm-bibtex-notes")
                     )
              :config 
              (push '(migemo) helm-source-bibtex)
         
              ;; (define-key org-mode-map (kbd "C-c b c") `org-ref-helm-insert-cite-link)
              ;; (define-key org-mode-map (kbd "C-c b l") `org-ref-helm-insert-label-link)
              ;; (define-key org-mode-map (kbd "C-c b r") `org-ref-helm-insert-ref-link)
              )
    #+end_src

    #+RESULTS:
    : org-ref

    - org-ref-helmが使える
      - 
    - org-bibtexがよいのかも
      - https://github.com/yyr/org-mode/blob/master/contrib/lisp/ox-bibtex.el
      - M-x org-bibtex

** babel - Grophviz (dot)

- dotコードの評価を行うようにする
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t))) ; this line activates dot
#+end_src

- babelで評価するときに確認を出さない
  - [[https://emacs.stackexchange.com/questions/23946/how-can-i-stop-the-confirmation-to-evaluate-source-code-when-exporting-to-html][org mode - How can I stop the confirmation to evaluate source code when exporting to html? - Emacs Stack Exchange]]

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

- インラインイメージの自動再描画
  - [[https://emacs.stackexchange.com/questions/3302/live-refresh-of-inline-images-with-org-display-inline-images][org mode - live refresh of inline images with org-display-inline-images - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

#+RESULTS:

** スピードコマンド

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+RESULTS:
: t

* 外部パッケージ
** undo-tree
   - [[https://elpa.gnu.org/packages/undo-tree.html][GNU ELPA - undo-tree]]
     
   #+begin_src emacs-lisp
     (leaf undo-tree
       :ensure t
       :config
       (global-undo-tree-mode))
   #+end_src
   
** fly-check

- emacs-lispのドキュメント用のチェック(emacs-lisp-checkdoc)を無効にする。

#+begin_src emacs-lisp
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :emacs>= 24.3
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :custom ((flycheck-emacs-lisp-initialize-packages . t)
             (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook)
    :config
    (leaf flycheck-package
      :doc "A Flycheck checker for elisp package authors"
      :ensure t
      :config
      (flycheck-package-setup))

    (leaf flycheck-elsa
      :doc "Flycheck for Elsa."
      :emacs>= 25
      :ensure t
      :config
      (flycheck-elsa-setup))
    )
#+end_src

** pandoc-mode

- C-c / でメニュー表示
- http://joostkremers.github.io/pandoc-mode/

#+begin_src emacs-lisp
  (leaf pandoc-mode
    :doc "Minor mode for interacting with Pandoc"
    :req "hydra-0.10.0" "dash-2.10.0"
    :tag "pandoc" "text"
    :added "2020-11-24"
    :url "http://joostkremers.github.io/pandoc-mode/"
    :ensure t
    :after hydra)
#+end_src

** magit
- EmacsのGit
#+begin_src emacs-lisp
  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :req "emacs-25.1" "async-20200113" "dash-20200524" "git-commit-20200516" "transient-20200601" "with-editor-20200522"
    :tag "vc" "tools" "git" "emacs>=25.1"
    :added "2020-11-30"
    :emacs>= 25.1
    :ensure t
    :after git-commit with-editor
    :bind (("C-x g" . magit-status)))
#+end_src

** doomthemes
*** all-the-icons
    - パッケージ導入後、 M-x all-the-icons-install-fonts でインストールする
   #+begin_src emacs-lisp
     (leaf all-the-icons
       :ensure t)
   #+end_src

   #+RESULTS:
   : all-the-icons
    
*** doom-themes
   - custom-faceが機能していないかも
   - [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf][Emacsモダン化計画 -かわEmacs編- - Qiita]]

   #+begin_src emacs-lisp
     (leaf doom-themes
       :ensure t
       :custom ((doom-themes-enable-italic . t)
                (doom-themes-enable-bold . t))
       :custom-face
       (doom-modeline-bar . '((t (:background "#6272a4"))))
       :config
       (doom-themes-visual-bell-config)  
       (doom-themes-neotree-config)
       (doom-themes-org-config)
       (load-theme 'doom-dracula t))
   #+end_src

*** modeline
   #+begin_src emacs-lisp
     (leaf doom-modeline
       :ensure t
       :custom
       ;; (doom-modeline-buffer-file-name-style . 'truncate-with-project)
       ;; (doom-modeline-icon . t)
       ;; (doom-modeline-major-mode-icon . nil)
       ;; (doom-modeline-minor-modes . nil)
       :init
       ;; (after-init . doom-modeline-mode)
       (doom-modeline-mode 1)
       :config
       ;;   (line-number-mode 0)
       ;;   (column-number-mode 0)
       ;;   (doom-modeline-def-modeline 'main
       ;; '(bar workspace-number window-number evil-state god-state ryo-modal xah-fly-keys matches buffer-info remote-host buffer-position parrot selection-info)
           ;; '(misc-info persp-name lsp github debug minor-modes input-method major-mode process vcs checker))
       )
   #+end_src

** migemo
*** Linux
- .emacs.d/migemo-dictを用意
  - cmigemoをインストールして
  - /usr/share/cmigemo/utfg-8/migemo-dictをコピー 
- [[https://github.com/emacs-jp/migemo][emacs-jp/migemo: emacs migemo client]]
#+begin_src emacs-lisp
  (leaf migemo
    :when (eq system-type 'gnu/linux)
    :ensure t
    :require t
    :config
    ;; cmigemo(default)
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs"))

    ;; ruby migemo
    ;; (setq migemo-command "ruby")
    ;; (setq migemo-options '("-S" "migemo" "-t" "emacs" "-i" "\a"))

    ;; Set your installed path
    (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")

    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix)
    (migemo-init)
    )
#+end_src

#+RESULTS:
: migemo

*** Windows
- [[https://hangstuck.com/emacs-cmigemo-windows/][Windowsでの Emacsでmigemo を有効にする設定方法 | ハングスタック]]
- migemoの辞書は絶対パスで参照する
- その他の変数はデフォルトで動作する
- とりあえずWindowsで動くようにした

#+begin_src emacs-lisp
  (leaf migemo
    :when (and
           (eq system-type 'windows-nt)
           (file-exists-p "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict"))
    :ensure t
    :setq
    (migemo-dictionary . "C:/Users/yc/lib/cmigemo-default-win64/dict/utf-8/migemo-dict")
    :config
    (load-library "migemo")
    (migemo-init))
#+end_src

  #+RESULTS:
  : migemo

** org2blog
- [[https://github.com/org2blog/org2blog#requirements-and-compatibility][org2blog/org2blog: Blog from Org mode to WordPress.]]
- パスワードは~/.netrcに書く

#+begin_src emacs-lisp
    (leaf org2blog
      :ensure t
      :config
      (require 'auth-source)
      (let* ((credentials (auth-source-user-and-password "plover.grats.jp"))
             (username (nth 0 credentials))
             (password (nth 1 credentials))
             (config `("plover"
                       :url "https://plover.grats.jp/xmlrpc.php"
                       :username ,username
                       :password ,password)))
        (setq org2blog/wp-blog-alist `(,config))) ;; FIXED
  )
#+end_src

#+RESULTS:
: org2blog

* OS依存の設定
  - OSの判定方法
    [[https://hangstuck.com/emacs-system-type/][Emacsの設定ファイルをOSの判定をして共有する方法｜system-type | ハングスタック]]

** Linuxでmozcの設定
   - elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf mozc-im
    :if (eq system-type 'gnu/linux)
    :doc "Mozc with input-method-function interface."
    :req "mozc-0"
    :tag "extentions" "i18n"
    :ensure t
    :require mozc-im
    :custom
    ((default-input-method . "japanese-mozc-im"))
    :bind (("C-o" . toggle-input-method))
    )
#+end_src

#+RESULTS:
: mozc-im

** Windowsで文字のエンコードをUTF-8に
   #+begin_src emacs-lisp
        (leaf windows
          :when (eq system-type 'windows-nt)
          :config
          (prefer-coding-system 'utf-8))
   #+end_src

   #+RESULTS:
   : windows

** Windows IME設定
   - [[https://nosubject.io/windows10-emacs-27-w32-ime/][[Emacs] Windows10 で Emacs 27 を使う | ** nosubject.io **]]
   - [[https://qiita.com/tawara_/items/0a7b8c50a48ea86b2d91][あの IBM が作ったオープンソース日本語フォントを使い、プログラミングフォント『PlemolJP』を作ってみた - Qiita]]

   #+begin_src emacs-lisp
     (leaf tr-ime
       :when (eq system-type 'windows-nt)
       :ensure t
       :setq
       (default-input-method . "W32-IME")
       (w32-ime-mode-line-state-indicator-list . '("[--]" "[あ]" "[--]"))
       :setq-default
       (w32-ime-mode-line-state-indicator . "[--]")
       :config
       (tr-ime-standard-install)
       (w32-ime-initialize)
       ;; IME制御（yes/noなどの入力時にIMEをoffにする
       (wrap-function-to-control-ime 'universal-argument t nil)
       (wrap-function-to-control-ime 'read-string nil nil)
       (wrap-function-to-control-ime 'read-char nil nil)
       (wrap-function-to-control-ime 'read-from-minibuffer nil nil)
       (wrap-function-to-control-ime 'y-or-n-p nil nil)
       (wrap-function-to-control-ime 'yes-or-no-p nil nil)
       (wrap-function-to-control-ime 'map-y-or-n-p nil nil)
       ;; 通常使用するフォント
       ;; (set-frame-font "BIZ UDゴシック-12" nil t)
       (set-frame-font "PlemolJP-12" nil t)
       (setq-default line-spacing 0) ; 行間
       ;; IME未確定時のフォント設定
       (modify-all-frames-parameters '((ime-font . "PlemolJP-12")))
       :bind
       ("C-o" . toggle-input-method))
    #+end_src

    #+RESULTS:
    : tr-ime

   #+begin_src emacs-lisp
     (when (eq system-type 'windows-nt)
       (package-install 'tr-ime)
       (tr-ime-standard-install)
       (setq default-input-method "W32-IME")
       (w32-ime-initialize))
   #+end_src

* Footer

- お約束の記述

#+begin_src emacs-lisp
(provide 'README)

;; Local Variables:
;; indent-tabs-mode: nil
;; byte-compile-warnings: (not cl-functions obsolete)
;; End:

;;; README.el ends here
#+end_src
