#    -*- mode: org -*-


Archived entries from file c:/Users/yc/.emacs.d/minimum-init.org


* COMMENT Windows IME設定 [C-o]                                       :FIXME:
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-12 木 08:35
:ARCHIVE_FILE: ~/.emacs.d/minimum-init.org
:ARCHIVE_OLPATH: 日本語関係
:ARCHIVE_CATEGORY: minimum-init
:END:
- [[https://nosubject.io/windows10-emacs-27-w32-ime/][[Emacs] Windows10 で Emacs 27 を使う | ** nosubject.io **]]
- [[https://qiita.com/tawara_/items/0a7b8c50a48ea86b2d91][あの IBM が作ったオープンソース日本語フォントを使い、プログラミングフォント『PlemolJP』を作ってみた - Qiita]]
- tr-emacs-ime-module
  - [[https://github.com/trueroad/tr-emacs-ime-module][trueroad/tr-emacs-ime-module: Emulator of GNU Emacs IME patch for Windows (tr-ime)]]
- advancedに変更

#+begin_src emacs-lisp :tangle no
  (leaf tr-ime
    :when (eq system-type 'windows-nt)
    :straight t
    :config
    (tr-ime-standard-install)

    ;; IM のデフォルトを IME に設定
    (setq default-input-method "W32-IME")
    ;; IME のモードライン表示設定
    (setq-default w32-ime-mode-line-state-indicator "[--]")
    (setq w32-ime-mode-line-state-indicator-list '("[--]" "[あ]" "[--]"))

    ;; IME 初期化
    (w32-ime-initialize)

    ;; IME 制御（yes/no などの入力の時に IME を off にする）
    (wrap-function-to-control-ime 'universal-argument t nil)
    (wrap-function-to-control-ime 'read-string nil nil)
    (wrap-function-to-control-ime 'read-char nil nil)
    (wrap-function-to-control-ime 'read-from-minibuffer nil nil)
    (wrap-function-to-control-ime 'y-or-n-p nil nil)
    (wrap-function-to-control-ime 'yes-or-no-p nil nil)
    (wrap-function-to-control-ime 'map-y-or-n-p nil nil)
    (wrap-function-to-control-ime 'register-read-with-preview nil nil)

    ;; ;; 通常使用するフォント
    ;; (set-frame-font "PlemolJP-12" nil t)
    ;; (setq-default line-spacing 0) ; 行間

    ;; ;; IME未確定時のフォント設定
    ;; (modify-all-frames-parameters '((ime-font . "PlemolJP-12")))

    :bind
    ("C-o" . toggle-input-method))
#+end_src

#+RESULTS:
: tr-ime


* leaf - 「パッケージ設定」のためのパッケージ                      :PBLISHED:
:PROPERTIES:
:EXPORT_FILE_NAME: ~/git/ploversky-jekyll/_posts/archives/2022-10-01-leaf.html
:EXPORT_OPTIONS:  toc:nil num:nil
:END:

#+begin_comment
First time: C-c C-e C-b C-s h h (Do this here)
Next  time: C-u C-c C-e         (Do this anyware in the subtree)
#+end_comment

#+begin_export html
---
layout: post
title: leaf - 「パッケージ設定」のためのパッケージ
permalink: /archives/293.html
published: true
---
#+end_export

** leafの導入（straight版）
leafはEmacsの設定をより美しく記述できるようにする、パッケージの設定を記述するツールです。パッケージのインストールための様々なパッケージと組み合わせ利用します。設計思想がしっかりしていて、利用者を惑わせない、特に、Emacs lispを解する人にとっては、lispの世界観を崩さないで記述できるのが魅力でしょう。

はしめに、leaf本体をstraight.elでインストールします。

#+begin_src emacs-lisp
  (straight-use-package 'leaf)
#+end_src

#+RESULTS:
: t

leafの機能を拡張するleaf-keywordsをインストールします。

#+begin_src emacs-lisp
  (leaf *leaf-keywords
    :config
    (straight-use-package 'leaf-keywords)
    (leaf-keywords-init))
#+end_src

#+RESULTS:
: *leaf-keywords

leafに追加するパッケージです。

#+begin_src emacs-lisp
  (leaf *leaf-optional-packages
    :config
    (leaf leaf-convert
      :straight t)
    (leaf leaf-tree
      :straight t
      :custom ((imenu-list-size . 30)
               (imenu-list-position . 'left)))
    (leaf hydra
      :straight t)
;;    (leaf el-get
;;      :straight t
;;      :custom ((el-get-git-shallow-clone  . t)))
    (leaf diminish
      :straight t))
#+end_src

#+RESULTS:
: *leaf-optional-packages

** 参考
+ [[https://qiita.com/conao3/items/dc88bdadb0523ef95878#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB][[正式リリース]leaf.elで雑然としたEmacs設定ファイル「init.el」をクリーンにする - Qiita]]
+ [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7#%E4%BE%BF%E5%88%A9%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB][Emacs入門から始めるleaf.el入門 - Qiita]]
+ leaf-hydraは[[https://github.com/abo-abo/hydra][hydra]]でキーの設定を行う際に使用します。
+ [[https://qiita.com/tadsan/items/c859c5c04724cbda75fc][指定したマイナーモードを表示しない(diminish篇) - Qiita]]

* COMMENT Mozcによる変換操作の設定[C-o][C-j]
:PROPERTIES:
:ARCHIVE_TIME: 2022-09-10 土 23:13
:ARCHIVE_FILE: ~/.emacs.d/minimum-init.org
:ARCHIVE_OLPATH: 日本語関係/Linuxでmozcを使った日本語入力の設定（2022年版）
:ARCHIVE_CATEGORY: Tech
:ARCHIVE_ITAGS: PBLISHED
:END:
標準の入力方式をMozcに設定します。
C-oで変換モード、C-jで直接入力モードに切り替えます。

なお、org-modeでC-jを（特殊な？）改行コマンドとして使用しているので、leafのbind*でオーバライドします（便利！）。ちなみに、org-modeでの改行はC-mかRETでもできます。C-jの出番がどこにあるのか、わかりません。

デフォルトでは、IMの状態をトグルするメソッドしかないので、それぞれの状態に遷移するメソッドを用意します。

IMEがoffのとき、isearchに入り、IMEをonにして検索したあと、戻ったときにIMEがoffになって欲しいので、そのための設定をします（migemoを使うのなら、あまり必要ない設定かも）。

#+NAME: mozc-im
#+begin_src emacs-lisp :tangle no :noweb yes
  (leaf mozc-im
    :straight t
    :require t
    :custom ((default-input-method . "japanese-mozc-im"))
    :bind* (("C-o" . enable-input-method)
            ("C-j" . disable-input-method))
    :config
    (defun enable-input-method (&optional arg interactive)
      (interactive "P\np")
      (if (not current-input-method)
          (toggle-input-method arg interactive)))

    (defun disable-input-method (&optional arg interactive)
      (interactive "P\np")
      (if current-input-method
          (toggle-input-method arg interactive)))

    (defvar-local mozc-im-mode nil)

    (add-hook 'mozc-im-activate-hook
              (lambda nil
                (setq mozc-im-mode t)))

    (add-hook 'mozc-im-deactivate-hook
              (lambda nil
                (setq mozc-im-mode nil)))

    (defvar-local im-state nil)

    (add-hook 'isearch-mode-hook
              (lambda () (setq im-state mozc-im-mode)))

    (add-hook 'isearch-mode-end-hook
              (lambda ()
                (unless (eq im-state mozc-im-mode)
                  (if im-state
                      (activate-input-method default-input-method)
                    (deactivate-input-method))))))
#+end_src

#+RESULTS: mozc-im
: mozc-im

* COMMENT 変換候補をposframeで表示する
:PROPERTIES:
:ARCHIVE_TIME: 2022-09-10 土 23:14
:ARCHIVE_FILE: ~/.emacs.d/minimum-init.org
:ARCHIVE_OLPATH: 日本語関係/Linuxでmozcを使った日本語入力の設定（2022年版）
:ARCHIVE_CATEGORY: Tech
:ARCHIVE_ITAGS: PBLISHED
:END:

posframeはEmacs26から追加された機能です。Emacs26は3年ほど前にリリースされたようですから、私は長いことposframeを知らなかったことになります。

今回の設定変更の目玉商品です。「[[https://blog.deltabox.site/post/2019/06/mozc-posframe/][mozcの候補をposframeで表示するEmacs拡張を作った]]」に書いている通り、org-modeでの変換の際の表示崩れは目に余るものがありました。

作者さん、ありがとうございます。

#+NAME: mozc-posframe
#+begin_src emacs-lisp :tangle no
  (leaf mozc-posframe
    :straight (mozc-posframe :type git :host github :repo "derui/mozc-posframe")
    :config
    (mozc-posframe-register)
    (setq mozc-candidate-style 'posframe))
#+end_src

#+RESULTS: mozc-posframe
: mozc-posframe
