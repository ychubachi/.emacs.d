#    -*- mode: org -*-


Archived entries from file /home/yc/.emacs.d/README.org


* doom-themes
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-10-20 Wed 14:05
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: UI・見た目
  :ARCHIVE_CATEGORY: README
  :END:
  - custom-faceが機能していないかも
  - [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf][Emacsモダン化計画 -かわEmacs編- - Qiita]]

  #+begin_src emacs-lisp
    (leaf doom-themes
      :ensure t
      :custom ((doom-themes-enable-italic . t)
               (doom-themes-enable-bold . t))
      :custom-face
      (doom-modeline-bar . '((t (:background "#6272a4"))))
      :config
      (doom-themes-visual-bell-config)
      (doom-themes-neotree-config)
      (doom-themes-org-config)
      (load-theme 'doom-dracula t))
  #+end_src

  #+RESULTS:
  : doom-themes

* COMMENT ここの意味が理解できてない
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-10-21 Thu 00:23
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 基本設定
  :ARCHIVE_CATEGORY: README
  :END:

#+begin_src emacs-lisp
  ;; this enables this running method
  ;;   emacs -q -l ~/.debug.emacs.d/{{pkg}}/init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
            (expand-file-name
             (file-name-directory
              (or load-file-name byte-compile-current-file))))))
#+end_src

* EXWM
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-10-23 Sat 15:49
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 外部パッケージ
  :ARCHIVE_CATEGORY: README
  :END:
- [[https://github.com/ch11ng/exwm/wiki][Home · ch11ng/exwm Wiki]]

#+begin_src emacs-lisp
  (leaf exwm
    :straight t
    :require exwm exwm-config
    :config
    (exwm-config-example))
#+end_src

#+RESULTS:
: exwm

* ace-jump-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-10-23 Sat 16:03
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 外部パッケージ
  :ARCHIVE_CATEGORY: README
  :END:

- [[https://zenn.dev/maswag/books/latex-on-emacs/viewer/ace-jump][Ace Jump Mode: カーソルジャンプ用マイナーモード]]

#+begin_src emacs-lisp
(leaf ace-jump-mode
  :package t
  :bind (("C-c j" . ace-jump-mode)))
#+end_src

#+RESULTS:
: ace-jump-mode

* Wanderlust - Mailクライアント
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-10-26 Tue 10:54
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 未整理
  :ARCHIVE_CATEGORY: README
  :END:
+ 参考
  - [[https://wanderlust.github.io/wl-docs/wl-ja.html#Install][Wanderlust – Yet Another Message Interface On Emacsen –]]
  - [[https://www.emacswiki.org/emacs/WanderLust][[Home] Wander Lust]]

+ You have to specify the value of 'wl-icon-directory'

+ 問題点：起動して最初にM-x wlをすると、localhostにimap接続に行く
  - .folderに設定がある
  - もともとのデフォルト（一回目に使われる）はこれっぽい
    [[http://quruli.ivory.ne.jp/document/wl_2.14.0/wl-ja_2.html][Wanderlust – Yet Another Message Interface On Emacsen –: 3. Wanderlust で扱えるフォルダたち]]
  - 2回目は.folderから設定を読むようだ

+ el-getではなくpackageでインストールしたほうが挙動がよい

#+begin_example
ユーザ名  -> 変数 elmo-imap4-default-user の値。
             初期設定は 環境変数 USER か、LOGNAME か、
             (user-login-name) の返り値。
認証法    -> 変数 elmo-imap4-default-authenticate-type の値。
             初期設定は login。
ホスト名  -> 変数 elmo-imap4-default-server の値。
             初期設定は ‘localhost’。
ポート番号-> 変数 elmo-imap4-default-port の値。
             初期設定は 143。
#+end_example

#+begin_src emacs-lisp
  (leaf wanderlust
    :package t
    :config
    ;; For non ascii-characters in folder-names
    (setq elmo-imap4-use-modified-utf7 t)

    ;; SMTP
    (setq
     wl-smtp-connection-type   'starttls         ; Use TLS
     wl-smtp-posting-port      587               ; The SMTP port
     wl-smtp-authenticate-type "plain"           ; Authentication type
     wl-smtp-posting-user      "yoshihide.chubachi"          ; Username
     wl-smtp-posting-server    "smtp.gmail.com"  ; SMTP server
     wl-local-domain           "gmail.com"       ; The SMTP server again
     wl-message-id-domain      "smtp.gmail.com") ; And... Again?

    (setq
     ;; All system folders (draft, trash, spam, etc) are placed in the
     ;; [Gmail]-folder, except inbox. "%" means it's an IMAP-folder
     wl-default-folder "%inbox"
     wl-draft-folder   "%[Gmail]/Drafts"
     wl-trash-folder   "%[Gmail]/Trash"

     ;; The below is not necessary when you send mail through Gmail's SMTP server,
     ;; see https://support.google.com/mail/answer/78892?hl=en&rd=1
     ;; wl-fcc            "%[Gmail]/Sent"

     wl-from "Yoshihide Chubachi <yoshihide.chubachi@gmail.com>"  ; Our From: header field
     wl-fcc-force-as-read t           ; Mark sent mail (in the wl-fcc folder) as read
     wl-default-spec "%")             ; For auto-completion
    )
     #+end_src

#+RESULTS:
: wanderlust

#+begin_src emacs-lisp
  (autoload 'wl-user-agent-compose "wl-draft" nil t)
  (if (boundp 'mail-user-agent)
      (setq mail-user-agent 'wl-user-agent))
  (if (fboundp 'define-mail-user-agent)
      (define-mail-user-agent
        'wl-user-agent
        'wl-user-agent-compose
        'wl-draft-send
        'wl-draft-kill
        'mail-send-hook))
#+end_src

#+RESULTS:
: mail-send-hook

- 表示するヘッダを設定

#+begin_src emacs-lisp
  (setq wl-message-ignored-field-list '("^.*:")) ; 一旦全て非表示
  (setq wl-message-visible-field-list ; 見たいヘッダだけ表示
        '("^Subject:"
          "^From:"
          "^To:"
          "^Cc:"
          "^Date:"
          "^Message-ID:"
          ))
#+end_src

#+RESULTS:
| ^Subject: | ^From: | ^To: | ^Cc: | ^Date: | ^Message-ID: |

    - 大きなメールを取得する際、確認しない
      - [[http://quruli.ivory.ne.jp/document/wl_2.14.0/wl-ja_4.html][Wanderlust – Yet Another Message Interface On Emacsen –: 5. サマリモード]]

#+begin_src emacs-lisp
  (setq elmo-message-fetch-confirm nil)
#+end_src

#+RESULTS:

* w3m - Webブラウザ
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-02 Tue 23:28
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 未整理
  :ARCHIVE_CATEGORY: README
  :END:

#+begin_src emacs-lisp :tangle no
  (leaf w3m
    :doc "an Emacs interface to w3m"
    :tag "hypermedia" "www" "w3m"
    :added "2021-10-26"
    :ensure t)
#+end_src

#+RESULTS:
: w3m

* TODO Wanderlust - Mailクライアント
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-02 Tue 23:28
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 未整理
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: TODO
  :END:
+ 参考
  - [[https://wanderlust.github.io/wl-docs/wl-ja.html#Install][Wanderlust – Yet Another Message Interface On Emacsen –]]
  - [[https://www.emacswiki.org/emacs/WanderLust][[Home] Wander Lust]]

+ You have to specify the value of 'wl-icon-directory'

+ 問題点：起動して最初にM-x wlをすると、localhostにimap接続に行く
  - .folderに設定がある
  - もともとのデフォルト（一回目に使われる）はこれっぽい
    [[http://quruli.ivory.ne.jp/document/wl_2.14.0/wl-ja_2.html][Wanderlust – Yet Another Message Interface On Emacsen –: 3. Wanderlust で扱えるフォルダたち]]
  - 2回目は.folderから設定を読むようだ

+ el-getではなくpackageでインストールしたほうが挙動がよい
+ 設定等が複雑で、古臭い・・・

#+begin_example
ユーザ名  -> 変数 elmo-imap4-default-user の値。
             初期設定は 環境変数 USER か、LOGNAME か、
             (user-login-name) の返り値。
認証法    -> 変数 elmo-imap4-default-authenticate-type の値。
             初期設定は login。
ホスト名  -> 変数 elmo-imap4-default-server の値。
             初期設定は ‘localhost’。
ポート番号-> 変数 elmo-imap4-default-port の値。
             初期設定は 143。
#+end_example

#+begin_src emacs-lisp :tangle no
  (leaf wanderlust
    :package t
    :config
    ;; For non ascii-characters in folder-names
    (setq elmo-imap4-use-modified-utf7 t)

    ;; SMTP
    (setq
     wl-smtp-connection-type   'starttls         ; Use TLS
     wl-smtp-posting-port      587               ; The SMTP port
     wl-smtp-authenticate-type "plain"           ; Authentication type
     wl-smtp-posting-user      "yoshihide.chubachi"          ; Username
     wl-smtp-posting-server    "smtp.gmail.com"  ; SMTP server
     wl-local-domain           "gmail.com"       ; The SMTP server again
     wl-message-id-domain      "smtp.gmail.com") ; And... Again?

    (setq
     ;; All system folders (draft, trash, spam, etc) are placed in the
     ;; [Gmail]-folder, except inbox. "%" means it's an IMAP-folder
     wl-default-folder "%inbox"
     wl-draft-folder   "%[Gmail]/Drafts"
     wl-trash-folder   "%[Gmail]/Trash"

     ;; The below is not necessary when you send mail through Gmail's SMTP server,
     ;; see https://support.google.com/mail/answer/78892?hl=en&rd=1
     ;; wl-fcc            "%[Gmail]/Sent"

     wl-from "Yoshihide Chubachi <yoshihide.chubachi@gmail.com>"  ; Our From: header field
     wl-fcc-force-as-read t           ; Mark sent mail (in the wl-fcc folder) as read
     wl-default-spec "%")             ; For auto-completion

    (require 'mime-w3m)
    )
#+end_src

#+RESULTS:
: wanderlust

#+begin_src emacs-lisp :tangle no
  (autoload 'wl-user-agent-compose "wl-draft" nil t)
  (if (boundp 'mail-user-agent)
      (setq mail-user-agent 'wl-user-agent))
  (if (fboundp 'define-mail-user-agent)
      (define-mail-user-agent
        'wl-user-agent
        'wl-user-agent-compose
        'wl-draft-send
        'wl-draft-kill
        'mail-send-hook))
#+end_src

#+RESULTS:
: mail-send-hook

- 表示するヘッダを設定

#+begin_src emacs-lisp :tangle no
  (setq wl-message-ignored-field-list '("^.*:")) ; 一旦全て非表示
  (setq wl-message-visible-field-list ; 見たいヘッダだけ表示
        '("^Subject:"
          "^From:"
          "^To:"
          "^Cc:"
          "^Date:"
          "^Message-ID:"
          ))
#+end_src

#+RESULTS:
| ^Subject: | ^From: | ^To: | ^Cc: | ^Date: | ^Message-ID: |

- 大きなメールを取得する際、確認しない
  - [[http://quruli.ivory.ne.jp/document/wl_2.14.0/wl-ja_4.html][Wanderlust – Yet Another Message Interface On Emacsen –: 5. サマリモード]]

#+begin_src emacs-lisp :tangle no
  (setq elmo-message-fetch-confirm nil)
#+end_src

#+RESULTS:

* TODO svg-tag-mode - orgのタグを囲み文字などに
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-03 Wed 14:21
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: 未整理
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: TODO
  :END:
+ 参考
  * [[https://github.com/rougier/svg-tag-mode][rougier/svg-tag-mode: A minor mode for Emacs that replace keywords with nice SVG labels]]

+ 設定
  #+begin_src emacs-lisp
    (leaf svg-tag-mode
      :el-get rougier/svg-tag-mode
      :require t)
  #+end_src

  #+RESULTS:
  : svg-tag-mode

* org-roam-dialiesでジャーナル
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-03 Wed 23:45
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: org-mode関連の設定
  :ARCHIVE_CATEGORY: README
  :END:
[[https://www.orgroam.com/manual.html#Org_002droam-Dailies][Org-roam User Manual]]

#+begin_src emacs-lisp
  (leaf org-roam-dailies
    :after org-roam

    :config
    (setq org-roam-dailies-directory "Journals/")

    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?\n#+DATE: %T"
             :target (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d>\n")))))
#+end_src

#+RESULTS:
: org-roam-dailies

* DONE フレームサイズ                                                :NOLEAF:
  CLOSED: [2021-11-09 Tue 19:11]
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-09 Tue 19:11
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: UI・見た目（X）
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :END:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Frame-Parameters.html][https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Frame-Parameters.html]]
- [[https://www.grugrut.net/posts/my-emacs-init-el/][My Emacs Config - ぐるっとぐりっど]]


#+begin_src emacs-lisp :tangle no
  (setq default-frame-alist
        (append '((left-fringe          . 36 )   ; 左フリンジ幅
                  (right-fringe         . 12 )   ; 右フリンジ幅
                  (cursor-type          . box)   ; カーソル種別
                  (alpha                . 100)   ; 透明度
                  )
                default-frame-alist))
  (setq initial-frame-alist default-frame-alist)
#+end_src

#+RESULTS:

* COMMENT Emacs設定                                                  :REFILE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-12 Fri 14:25
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_CATEGORY: README
  :END:
** TODO リアルオートセーブアップ
:PROPERTIES:
:CREATED: <2021-11-10 Wed 09:47>
:ANNOTADED: [[file:~/.emacs.d/README.org::*leaf][leaf]]
:END:
- [[http://emacs.rubikitch.com/backup-each-save/][backup-each-save.el : Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ]]
- [[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el : バッファを自動保存させる超シンプルなマイナーモード]]
** TODO [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf#%E5%B0%8F%E6%8C%87%E3%82%92%E9%85%B7%E4%BD%BF%E3%81%9B%E3%81%9A%E3%81%8B%E3%81%A4%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%AE%E3%82%AC%E3%82%A4%E3%83%89%E3%82%92%E5%87%BA%E3%81%99----hydra][Emacsモダン化計画 -かわEmacs編- - Qiita]]

;; Local Variables:
;; eval: (visual-fill-column-mode)
;; End:

* TODO outshine-mode - org minnor mode のようなもの
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-11-19 Fri 21:16
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: org-mode関連の設定
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: TODO
  :END:
- 使い方がよくわからなかった

[[https://github.com/alphapapa/outshine][alphapapa/outshine: Org-mode for non-Org buffers]]
[[https://emacs.stackexchange.com/questions/47003/the-orgstruct-mode-seems-to-be-gone-from-the-org-plus-contrib][The orgstruct-mode seems to be gone from the org-plus-contrib - Emacs Stack Exchange]]

#+begin_src emacs-lisp
  (leaf outshine :package t)
#+end_src

#+RESULTS:
: outshine

* emacs-from-scratch/hallo-theme.el at master · daviwil/emacs-from-scratch
  CLOSED: [2021-11-09 Tue 09:24]
  :PROPERTIES:
  :CREATED:  [2021-11-04 Thu 02:53]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:20
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_ITAGS: REFILE
  :END:

https://github.com/daviwil/emacs-from-scratch/blob/master/hallo-theme.el

* DONE org-modeからpandoc経由でWordを生成する
  CLOSED: [2021-11-19 Fri 19:09]
  :PROPERTIES:
  :CREATED:  <2021-11-12 Fri 15:14>
  :ANNOTADED: [[file:~/git/ploversky-zenn.dev/plaversky@zenn.dev.org::*ファイルローカル変数][ファイルローカル変数]]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:30
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

- [[https://taipapamotohus.com/post/org-mode_paper_4/][Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする） | A perfect autumn day]]

* DONE kawabata/ox-pandoc: Another org-mode exporter via pandoc.
  CLOSED: [2021-11-19 Fri 19:09]
  :PROPERTIES:
  :CREATED:  [2021-11-12 Fri 18:21]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:30
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

https://github.com/kawabata/ox-pandoc

* DONE notmuchでサーチの結果を逆順にする
  CLOSED: [2021-11-17 Wed 19:13]
  :PROPERTIES:
  :CREATED:  <2021-11-17 Wed 15:42>
  :ANNOTADED:
  :ARCHIVE_TIME: 2021-11-19 Fri 21:30
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

* DONE notmuchでワンタッチStarつける
  CLOSED: [2021-11-19 Fri 21:30]
  :PROPERTIES:
  :CREATED:  <2021-11-17 Wed 15:41>
  :ANNOTADED: [[file:~/Dropbox/Org/Journal.org::*見積書の項目を整える][見積書の項目を整える]]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:30
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

* DONE 【Emacs入門】②バージョン28で新たにビルトインされるModus Themesを使おう
  :PROPERTIES:
  :CREATED:  [2021-10-16 Sat 18:51]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:30
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

https://zenn.dev/lambdagonbei/articles/1b2bce27673078

* DONE C-c sをシェルに、C-c tをtoggle-truncate-linesに？
  CLOSED: [2021-11-19 Fri 21:32]
  :PROPERTIES:
  :CREATED:  <2021-11-12 Fri 13:54>
  :ANNOTADED: [[file:~/Dropbox/Org/Mobile.org::*Emacs M-x toggle-truncate-lines: 長い行の折り返し表示を切り換える][Emacs M-x toggle-truncate-lines: 長い行の折り返し表示を切り換える]]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:32
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

* ChromebookでEmacsキーバインドを使う｜junkawa@Chromebookで始める開発日記｜note
  :PROPERTIES:
  :CREATED:  [2021-09-28 Tue 00:22]
  :ARCHIVE_TIME: 2021-11-19 Fri 21:45
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_ITAGS: REFILE
  :END:

https://note.com/junkawashima/n/na18827f2231f

* DONE notmuch thread sort order : r/emacs
  CLOSED: [2021-11-17 Wed 18:52]
  :PROPERTIES:
  :CREATED:  [2021-11-17 Wed 16:26]
  :ARCHIVE_TIME: 2021-11-19 Fri 23:27
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: REFILE
  :END:

https://www.reddit.com/r/emacs/comments/aja2ov/notmuch_thread_sort_order/

* org-export subtree to filename.pdf with EXPORT_FILE_NAME fails - Emacs Stack Exchange
  CLOSED: [2021-11-09 Tue 09:24]
  :PROPERTIES:
  :CREATED:  [2021-11-07 Sun 14:01]
  :ARCHIVE_TIME: 2021-11-19 Fri 23:28
  :ARCHIVE_FILE: ~/.emacs.d/README.org
  :ARCHIVE_OLPATH: COMMENT Emacs設定のアイデア
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_ITAGS: REFILE
  :END:

https://emacs.stackexchange.com/questions/16517/org-export-subtree-to-filename-pdf-with-export-file-name-fails/16520

* mu/mu4e - Maildirの読み書き・IMAPサーバとの同期
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-22 Mon 23:45
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_OLPATH: メール/Web
:ARCHIVE_CATEGORY: README
:END:
+ 概要
  * [[https://www.emacswiki.org/emacs/mu4e][[Home] mu4e]]
  * [[https://github.com/djcb/mu/tree/master/mu4e][mu/mu4e at master · djcb/mu]]
  * mu4eはmuに同梱されている
    - aptで入るものは古い
  * [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html#Installation][Installation (Mu4e 1.6.0 user manual)]]
    - aptで必要なライブラリを入れる
  * [[https://github.com/djcb/mu/releases][Releases · djcb/mu]]
    - 1.6.9のtar ballをとってくる
    - sudo apt install autoconf automake libtool texinfo
  * /usr/local/share/emacs/site-lisp/mu4e/
  * [[https://cheatography.com/ddoherty03/cheat-sheets/mu4e-with-gmail-hints/][mu4e (With GMail Hints) Keyboard Shortcuts by ddoherty03 - Download free from Cheatography - Cheatography.com: Cheat Sheets For Every Occasion]]
    - cheetsheet
  * [[https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html][Gmail configuration (Mu4e 1.6.0 user manual)]]
    - 前半はofflineimap用
  * htmlメールはewwで表示されているようだ
    * フォントはMicrosoft Yahei
      - [[https://qiita.com/styzo/items/28d5d994a293fa704476][emacs 26 のフォントの設定 M-x view-hello-file - Qiita]]
    * ewwの正体はshr
  * muに~/Maildirを設定しているのはどこだろう？
+ mbsyncについて
  * 参考文献
    - [[https://isync.sourceforge.io/][isync: free IMAP and MailDir mailbox synchronizer]]
    - [[https://sourceforge.net/projects/isync/][Isync download | SourceForge.net]]
    - [[https://sourceforge.net/p/isync/isync/ci/master/tree/][Isync / isync / [da6567]]]
  * Gmailの設定
    - セキュリティページで有効にする
  * メールパスワードの設定
    - ~/.mailpass.gpg
  * mbsyncの設定
    - 日本語フォルダ名が修正utf-7になる
    - utf-7を変換するツールがあんまりない
      * [[https://kkobayashi-a.hatenablog.com/entry/2019/04/11/111856][imapsyncでモバメをGmailにコピーする その2 - kkobayashi_a’s blog]]
    - [[https://arimasou16.com/blog/2021/09/01/00413/][OfflineIMAPとNeoMuttを合わせて使う 後半(成功例)]]
    - つくった（ruby）

    #+begin_example
    require 'net/imap'

    puts Net::IMAP.decode_utf7 '&MFkweTBmMG4w4TD8MOs-'
    puts Net::IMAP.decode_utf7 '&MLkwvzD8TtgwTQ-'
    puts Net::IMAP.decode_utf7 '&j,dg0TDhMPww6w-'
    puts Net::IMAP.decode_utf7 '&kc2JgQ-'
    puts Net::IMAP.decode_utf7 '&MLQw33ux-'
    puts Net::IMAP.decode_utf7 '&Tgtm+DBN-'
    puts Net::IMAP.decode_utf7 '&kAFP4W4IMH8w4TD8MOs-'
    #+end_example

    | 修正UTF-7               | 変換結果       |           |
    |-------------------------+----------------+-----------|
    | '&MFkweTBmMG4w4TD8MOs-' | すべてのメール | All Mail  |
    | '&MLkwvzD8TtgwTQ-'      | スター付き     | Starred   |
    | '&j,dg0TDhMPww6w-'      | 迷惑メール     | Spam      |
    | '&kc2JgQ-'              | 重要           | Important |
    | '&MLQw33ux-'            | ゴミ箱         | Trash     |
    | '&Tgtm+DBN-'            | 下書き         | Draft     |
    | '&kAFP4W4IMH8w4TD8MOs-' | 送信済みメール | Sent Mail |
  * Near側のフォルダが作られない
    - バージョンが古いから？
    - UIDVALIDITYが鍵のようだ
      - ~/.mbsyncに対応表があるので、やりなおすときは削除する

        #+begin_example
          rm -r ~/Maildir
          mkdir -p Maildir/ploversky.net@gmail.com
          rm -r ~/.mbsync
          mbsync private
        #+end_example
+ mbsyncの設定
  * 設定
    1. メイン画面で'U'キーを押すとmbsyncで更新するよう設定
    2. メールを移動する際、ファイル名を変更（mbsyncではこれを設定するのが望ましい）
       設定しないと、UIDが書き換わらないので重複する可能性がある。

    #+NAME: mbsync-settings
    #+begin_src emacs-lisp :tangle no
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-change-filenames-when-moving t)

    #+end_src

    #+RESULTS: mbsync-settings
    : t

+ メールを作成するモードでの文字の折返し
  * 参考
    - [[https://emacs.stackexchange.com/questions/3061/how-to-stop-mu4e-from-inserting-line-breaks][(add-hook 'mu4e-compose-mode-hook 'visual-line-mode)]]

  * 設定
    1. デフォルトではauto-fillがonであるため、長い行には自動的に改行が追加される（古き良き時代の標準スタイル）のでこれをoffにする。
    2. 単語の途中で折返さないようにvisual-line-modeをonにする。

    #+NAME: mu4e-compose-mode-hook
    #+begin_src emacs-lisp :tangle no
      (add-hook 'mu4e-compose-mode-hook 'turn-off-auto-fill)
      (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)

    #+end_src

    #+RESULTS: mu4e-compose-mode-hook
    | visual-line-mode | turn-off-auto-fill |

+ mu4e-dashboard
  * 参考
    - [[https://www.reddit.com/r/emacs/comments/mzgsm0/mu4e_look_and_feel/][Mu4e look and feel : emacs]]
    - [[https://github.com/rougier/mu4e-dashboard][rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs)]]
  * 説明
    - ソースコードのorgファイルを編集する必要があるようなので、forkしてみる
    - サンプルに従い、orgファイルを作成すれば、ダッシュボードになる

    #+NAME: mu4e-dashboard
    #+begin_src emacs-lisp :tangle no
      ;; (leaf mu4e-dashboard
      ;;   :el-get ychubachi/mu4e-dashboard
      ;;   :require t

    #+end_src

    #+RESULTS: mu4e-dashboard

+ 全体の設定

#+begin_src emacs-lisp :noweb yes :tangle no
  (leaf mu4e
    :load-path "/usr/local/share/emacs/site-lisp/mu4e/"
    :require t
    :config
    ;; use mu4e for e-mail in emacs
    (setq mail-user-agent 'mu4e-user-agent)

    (setq mu4e-headers-fields
          '((:empty . 0) (:human-date . 8) (:flags . 6) (:mailing-list . 10)(:from . 22) (:subject)))

    (setq mu4e-drafts-folder "/Gmail/draft")
    (setq mu4e-sent-folder   "/Gmail/sent")
    (setq mu4e-trash-folder  "/Gmail/trash")
    (setq mu4e-refile-folder "/Gmail/archive")

    (setq mu4e-bookmarks
          '((:name "Unread INBOX"     :query "maildir:/Gmail/inbox/ flag:unread AND NOT flag:trashed"  :key ?i)
            (:name "Unread Archive"   :query "maildir:/Gmail/archive/ flag:unread AND NOT flag:trashed"  :key ?a)
            (:name "Unread messages"  :query "flag:unread AND NOT flag:trashed"  :key 117)
            (:name "Starred messages" :query "flag:flagged AND NOT flag:trashed" :key ?S)
            (:name "Draft Masseges"   :query "flag:draft AND NOT flag:trashed"   :key ?D)
            (:name "Trash"            :query "flag:trashed"                      :key ?T)
            (:name "Today's messages" :query "date:today..now"                 :key 116)
            (:name "Last 7 days" :query "date:7d..now" :hide-unread t          :key 119)
            (:name "Messages with images" :query "mime:image/*" :hide-unread t :key 112)
            ))

    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.
    (setq mu4e-maildir-shortcuts
          '((:maildir "/Gmail/inbox"             :key ?i)
            (:maildir "/Gmail/archive"           :key ?a)
            (:maildir "/Gmail/draft"             :key ?d)))

    ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)

    ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
    ;; additional non-Gmail addresses and want assign them different
    ;; behavior.)

    ;; something about ourselves
    (setq
     user-mail-address "yc@aiit.ac.jp"
     user-full-name  "中鉢欣秀"
     mu4e-compose-signature
     (concat
      "東京都立産業技術大学院大学（AIIT） 研究科長補佐\n"
      "情報アーキテクチャコース担当 教授 中鉢欣秀 博士（政策・メディア）\n"))

    (setq mu4e-headers-results-limit -1)

    <<mbsync-settings>>
    <<mu4e-compose-mode-hook>>
    <<mu4e-dashboard>>

    (leaf mu4e-thread-folding
      :el-get rougier/mu4e-thread-folding
      :require t
      :config
      (add-to-list 'mu4e-header-info-custom
                   '(:empty :name "Empty" :shortname "" :function
                            (lambda (msg)
                              "  ")))

      (define-key mu4e-headers-mode-map (kbd "<tab>")     'mu4e-headers-toggle-at-point)
      (define-key mu4e-headers-mode-map (kbd "<left>")    'mu4e-headers-fold-at-point)
      (define-key mu4e-headers-mode-map (kbd "<S-left>")  'mu4e-headers-fold-all)
      (define-key mu4e-headers-mode-map (kbd "<right>")   'mu4e-headers-unfold-at-point)
      (define-key mu4e-headers-mode-map (kbd "<S-right>") 'mu4e-headers-unfold-all)

      (add-hook 'mu4e-headers-found-hook #'mu4e-thread-folding-mode)
      )
    )
#+end_src

#+RESULTS:
: mu4e

* scratch-pop - scratchバッファをポップアップする [C-:]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-26 Fri 19:49
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_OLPATH: 外部パッケージ
:ARCHIVE_CATEGORY: README
:END:

+ [[http://emacs.rubikitch.com/scratch-pop/][scratch-pop.el : 【おまけ付き】自動保存*scratch*バッファをpopwinでサッと開いてメモを取る]]

#+begin_src emacs-lisp
  (leaf scratch-pop
    :package t
    :require t
    :bind ("C-:" . scratch-pop)
    :config
    (setq scratch-pop-backup-directory "~/.emacs.d/scratch_pop/")
    (add-hook 'kill-emacs-hook 'scratch-pop-backup-directory))
#+end_src

#+RESULTS:
: scratch-pop

* EAF - Emacs Application Framework
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-26 Fri 22:09
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_OLPATH: 未整理
:ARCHIVE_CATEGORY: README
:END:
+ .emacs.dをgitで管理しているのでsubmoduleで追加
+ install-eaf.py を実行する前に apt update && apt upgrade

#+begin_src emacs-lisp :tangle no
  (leaf eaf
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
    :require t
    :custom ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off . t)
    (eaf-browser-enable-adblocker . t)
    (browse-url-browser-function . 'eaf-open-browser)
    :config
    (require 'eaf-browser)
    (require 'eaf-pdf-viewer)

    (defalias 'browse-web #'eaf-open-browser)
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src

#+RESULTS:
: eaf

* TODO [#C] Emacs設定のアイデア [20/22]                              :REFILE:
:PROPERTIES:
:ARCHIVE_TIME: 2022-01-11 Tue 21:07
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_CATEGORY: README
:ARCHIVE_TODO: TODO
:END:
- [ ] embarkでGoogle検索
- [X] emacs の org-mode と google calendar を連携させる org-gcal - Qiita
  SCHEDULED: [2021-11-18 Thu]
  :PROPERTIES:
  :CREATED:  [2021-11-18 Thu 02:20]
  :END:

  https://qiita.com/clothoid/items/73a937a22eeeb82c3ee7
- [ ] flymakeでスペルチェック
  :PROPERTIES:
  :CREATED: <2021-11-13 Sat 11:05>
  :ANNOTADED:
  :END:
- [X] 偉人 アーサー・Ｃ・クラーク　名言集(英訳付)｜心の常備薬
   :PROPERTIES:
   :CREATED:  [2021-10-16 Sat 12:45]
   :END:

 http://medicines.aquaorbis.net/meigen/kaigai/bungaku-e/arthur-c-clarke
- [X] [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf#%E5%B0%8F%E6%8C%87%E3%82%92%E9%85%B7%E4%BD%BF%E3%81%9B%E3%81%9A%E3%81%8B%E3%81%A4%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%AE%E3%82%AC%E3%82%A4%E3%83%89%E3%82%92%E5%87%BA%E3%81%99----hydra][Emacsモダン化計画 -かわEmacs編- - Qiita]]
- [X] org2blogでソースコードのショートコード、開始側がでない？
- [X] リアルオートセーブアップ
  :PROPERTIES:
:CREATED: <2021-11-10 Wed 09:47>
:ANNOTADED: [[file:~/.emacs.d/README.org::*leaf][leaf]]
:END:
  - [[http://emacs.rubikitch.com/backup-each-save/][backup-each-save.el : Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ]]
  - [[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el : バッファを自動保存させる超シンプルなマイナーモード]]
- [X] org-publishを使ってorgでブログを書く話 - Qiita
  :PROPERTIES:
  :CREATED:  [2021-11-18 Thu 03:05]
  :END:

  https://qiita.com/conao3/items/f81cf964198d4da93a05
- [X] org-gfmを導入する
  :PROPERTIES:
:CREATED: <2021-11-12 Fri 10:30>
:ANNOTADED:
:END:
  必要になったらやろう
- [X] Emacs の org-mode でスケジュール管理をしよう！ - Qiita
  SCHEDULED: [2021-11-18 Thu]
  :PROPERTIES:
  :CREATED:  [2021-11-18 Thu 02:19]
  :END:

  https://qiita.com/zonkyy/items/821ea2b1e20f575c222f
- [X] notmuchでメール中のURLがEnterでは開けない
  :PROPERTIES:
:CREATED:  <2021-11-17 Wed 18:07>
:ANNOTADED: [[notmuch:id:001001d7db84$acfb8610$06f29230$@brain.riken.jp][Email from hkimura@brain.riken.jp: [sys_education:00683] Re: 第２２回SIC人財育成協議会の日程調整]]
:END:
- [X] fniessen/org-html-themes: How to export Org mode files into awesome HTML in 2 minutes
  :PROPERTIES:
  :CREATED:  [2021-11-18 Thu 19:14]
  :END:

  https://github.com/fniessen/org-html-th
- [X] org-tree-slideでプレゼン
   :PROPERTIES:
   :CREATED:  [2021-09-29 Wed 12:24]
   :END:
   対象者がエンジニアだけならよいかも
   https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-04.org
- [X] Org-roam事始め - Qiita
   :PROPERTIES:
   :CREATED:  [2021-10-16 Sat 02:30]
   :END:
    https://qiita.com/unsignedint/items/749dd5e87bcadf13e3a6

   まだいまいち必要性がわからない
   なるべく少ないファイルにまとめたほうがよいように思う
- [X] Emacs のテーマを変更 | 二代目俺のメモ
   :PROPERTIES:
   :CREATED:  [2021-10-16 Sat 18:53]
   :END:

   https://www.kwonline.org/memo2/2020/06/14/load-themes-on-emacs-24/
- [X] Emacs の設定 | Youhei SASAKI’s official site
   CLOSED: [2021-11-09 Tue 09:25]
   :PROPERTIES:
   :CREATED:  [2021-10-25 Mon 18:37]
   :END:
  https://uwabami.github.io/cc-env/Emacs.html
- [X] emacs-eaf/emacs-application-framework: A free/libre and open-source extensible framework that revolutionizes the graphical capabilities of Emacs, the key to ultimately Live in Emacs
   CLOSED: [2021-11-09 Tue 09:25]
   :PROPERTIES:
   :CREATED:  [2021-10-26 Tue 10:26]
   :END:

    https://github.com/emacs-eaf/emacs-application-framework
- [X] SOMEDAY [Home] unbound.el
   :PROPERTIES:
   :CREATED:  [2021-11-09 Tue 03:17]
   :END:
   キーバインドの空きを探すスクリプトのようだ。

   https://www.emacswiki.org/emacs/unbound.el
- [X] kawabata/ox-pandoc: Another org-mode exporter via pandoc.
  :PROPERTIES:
  :CREATED:  [2021-11-12 Fri 18:23]
  :END:

  https://github.com/kawabata/ox-pandoc
- [X] SOMEDAY Emacsの中で動く作図ツールを作る | Misohena Blog
   :PROPERTIES:
   :CREATED:  [2021-09-22 Wed 14:54]
   :END:
   http://misohena.jp/blog/2021-09-21-emacs-easy-draw.html

  - [[https://github.com/misohena/el-easydraw][GitHub - misohena/el-easydraw: Embedded drawing tool for Emacs]]
  - バイトコンパイルでエラー

  #+begin_src emacs-lisp :tangle no
  (leaf edraw-org
    :el-get misohena/el-easydraw
    :require t
    :after org
    :config
    (edraw-org-setup-default))
  #+end_src

  #+RESULTS:
  : edraw-org

   試してみたけど動かなかった
- [X] org-mode をマイナーモードとして使う orgstruct-mode。 - 日々、とんは語る。
  :PROPERTIES:
  :CREATED:  [2021-11-17 Wed 21:50]
  :END:

  https://tomoya.hatenadiary.org/entry/20090414/1239697066
  orgstruct-modeは古い
- [X] TABバー
   CLOSED: [2021-11-09 Tue 09:24]
   :PROPERTIES:
   :CREATED:  [2021-11-03 Wed 18:03]
   :END:

 https://github.com/daviwil/emacs-from-scratch/blob/82f03806d90eb356b815cf514d10b6d863a2cbdc/show-notes/Emacs-Tips-06.org

* org-gcal - Googleカレンダーとの連携
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-01 Fri 11:03
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_OLPATH: org-mode関連の設定
:ARCHIVE_CATEGORY: README
:END:

+ https://github.com/kidd/org-gcal.el.git
  org-gcal-fetchは、数回成功したものの、失敗が続いている。
  .emacs内のトークンを削除したりしてみたが、どうやら、内部でエラーが発生しているようだ。


  #+begin_example
Debugger entered--Lisp error: (wrong-type-argument listp menu-bar-open-mouse)
  #f(compiled-function (key item) #<bytecode 0x13d114dd7e13bf1d>)(mouse-1 menu-bar-open-mouse)
  map-keymap(#f(compiled-function (key item) #<bytecode 0x13d114dd7e13bf1d>) (keymap ... ... ... ... ... ... ... "menu-bar"))
  easy-menu-lookup-name((keymap ... ... ... ... ... ... ... "menu-bar") "Org")
  #f(compiled-function (map) #<bytecode 0x13ddf683daef593b>)((keymap ... ... ... ... ... ... ... "menu-bar"))
  mapcar(#f(compiled-function (map) #<bytecode 0x13ddf683daef593b>) (... ... ...))
  easy-menu-get-map(nil ("Org") nil)
  easy-menu-add-item(nil ("Org") (keymap "File List for Agenda" (Edit\ File\ List menu-item "Edit File List" menu-function-96 :key-sequence nil) (Add/Move\ Current\ File\ to\ Front\ of\ List menu-item "Add/Move Current File to Front of List" org-agenda-file-to-front) (Remove\ Current\ File\ from\ List menu-item "Remove Current File from List" org-remove-file) (Cycle\ through\ agenda\ files menu-item "Cycle through agenda files" org-cycle-agenda-files) (Occur\ in\ all\ agenda\ files menu-item "Occur in all agenda files" org-occur-in-agenda-files) (nil menu-item "--") (/home/yc/Dropbox/Org/Bookmark\.org menu-item "/home/yc/Dropbox/Org/Bookmark.org" menu-function-97 :key-sequence nil) (/home/yc/Dropbox/Org/GcalPrivate\.org menu-item "/home/yc/Dropbox/Org/GcalPrivate.org" menu-function-98 :key-sequence nil) (/home/yc/Dropbox/Org/GcalWork\.org menu-item "/home/yc/Dropbox/Org/GcalWork.org" menu-function-99 :key-sequence nil) (/home/yc/Dropbox/Org/Journal\.org menu-item "/home/yc/Dropbox/Org/Journal.org" menu-function-100 :key-sequence nil) (/home/yc/Dropbox/Org/Mobile\.org menu-item "/home/yc/Dropbox/Org/Mobile.org" menu-function-101 :key-sequence nil) (/home/yc/Dropbox/Org/Notebook\.org menu-item "/home/yc/Dropbox/Org/Notebook.org" menu-function-102 :key-sequence nil) (/home/yc/git/ploversky-zenn\.dev/plaversky@zenn\.dev\.org menu-item "/home/yc/git/ploversky-zenn.dev/plaversky@zenn.dev..." menu-function-103 :key-sequence nil) (/home/yc/git/ploversky-ploversky\.net/plaversky\.net\.org menu-item "/home/yc/git/ploversky-ploversky.net/plaversky.net..." menu-function-104 :key-sequence nil) (/home/yc/\.emacs\.d/README\.org menu-item "/home/yc/.emacs.d/README.org" menu-function-105 :key-sequence nil)) nil)
  easy-menu-change(("Org") "File List for Agenda" (["Edit File List" (org-edit-agenda-file-list) t] ["Add/Move Current File to Front of List" org-agenda-file-to-front t] ["Remove Current File from List" org-remove-file t] ["Cycle through agenda files" org-cycle-agenda-files t] ["Occur in all agenda files" org-occur-in-agenda-files t] "--" ["/home/yc/Dropbox/Org/Bookmark.org" (find-file "/home/yc/Dropbox/Org/Bookmark.org") t] ["/home/yc/Dropbox/Org/GcalPrivate.org" (find-file "/home/yc/Dropbox/Org/GcalPrivate.org") t] ["/home/yc/Dropbox/Org/GcalWork.org" (find-file "/home/yc/Dropbox/Org/GcalWork.org") t] ["/home/yc/Dropbox/Org/Journal.org" (find-file "/home/yc/Dropbox/Org/Journal.org") t] ["/home/yc/Dropbox/Org/Mobile.org" (find-file "/home/yc/Dropbox/Org/Mobile.org") t] ["/home/yc/Dropbox/Org/Notebook.org" (find-file "/home/yc/Dropbox/Org/Notebook.org") t] ["/home/yc/git/ploversky-zenn.dev/plaversky@zenn.dev..." (find-file "/home/yc/git/ploversky-zenn.dev/plaversky@zenn.dev...") t] ["/home/yc/git/ploversky-ploversky.net/plaversky.net..." (find-file "/home/yc/git/ploversky-ploversky.net/plaversky.net...") t] ["/home/yc/.emacs.d/README.org" (find-file "/home/yc/.emacs.d/README.org") t]))
  org-install-agenda-files-menu()
  org-mode()
  org-generic-id-update-id-locations("entry-id")
  #f(compiled-function (_) #<bytecode -0x1127077741525000>)(nil)
  deferred:call-lambda(#f(compiled-function (_) #<bytecode -0x1127077741525000>) nil)
  deferred:exec-task(#s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil) ok nil)
  deferred:set-next(#s(deferred :callback deferred:default-callback :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil) :status nil :value nil) #s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil))
  deferred:exec-task(#s(deferred :callback #f(compiled-function (x) #<bytecode -0x187a1d931a173ce>) :errorback deferred:default-errorback :cancel #f(compiled-function (x) #<bytecode -0x16abd1177d01903>) :next #s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil) :status nil :value nil) ok nil)
  deferred:set-next(#s(deferred :callback deferred:default-callback :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode -0x187a1d931a173ce>) :errorback deferred:default-errorback :cancel #f(compiled-function (x) #<bytecode -0x16abd1177d01903>) :next #s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil) :status nil :value nil) :status nil :value nil) #s(deferred :callback #f(compiled-function (x) #<bytecode -0x187a1d931a173ce>) :errorback deferred:default-errorback :cancel #f(compiled-function (x) #<bytecode -0x16abd1177d01903>) :next #s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil) :status nil :value nil))
  deferred:exec-task(#s(deferred :callback #f(compiled-function (x) #<bytecode -0xbd81f2f94a96e54>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode -0x187a1d931a173ce>) :errorback deferred:default-errorback :cancel #f(compiled-function (x) #<bytecode -0x16abd1177d01903>) :next #s(deferred :callback #f(compiled-function (_) #<bytecode -0x1127077741525000>) :errorback deferred:default-errorback :cancel deferred:default-cancel :next #s(deferred :callback #f(compiled-function (x) #<bytecode 0xdf1fc632a45f76a>) :errorback #f(compiled-function (e) #<bytecode 0x85863196ddef386>) :cancel deferred:default-cancel :next nil :status nil :value nil) :status nil :value nil) :status nil :value nil) :status nil :value nil) ok nil)
  deferred:worker()
  apply(deferred:worker nil)
  timer-event-handler([t 24989 42834 275344 nil deferred:worker nil nil 300000 nil])
  #+end_example

  org-modeの一時バッファを作成する際、org-install-agenda-files-menuが呼ばれているようだ。その中で、エラーが発生している。

org-post-at-pint、org-delete-at-pointはうまく動作している。

#+begin_src emacs-lisp
  (leaf org-gcal
    :straight (org-gcal :type git :host github :repo "emacsmirror/org-gcal")
    :require t
    :config
    (let* ((json-object-type 'hash-table)
           (json-array-type 'list)
           (json-key-type 'string)
           (gcal-json "~/Dropbox/Org/gcal/client_secret_357879820522-pnlalhj01143k1946fgp8ashshus9olg.apps.googleusercontent.com.json")
           (json (json-read-file gcal-json))
           (installed (gethash "installed" json))
           (client-id (gethash "client_id" installed))
           (client-secret (gethash "client_secret" installed)))
      (setq org-gcal-client-id client-id
            org-gcal-client-secret client-secret
            org-gcal-fetch-file-alist
            '(("yc@aiit.ac.jp"
               .  "~/Dropbox/Org/GcalWork.org")
              ("yoshihide.chubachi@gmail.com"
               .  "~/Dropbox/Org/GcalPrivate.org")))
      (setq org-gcal-recurring-events-mode 'nested
            org-gcal-auto-archive nil
            org-gcal-down-days 120
            org-gcal-up-days 60
            org-gcal-debug t)))
#+end_src

#+RESULTS:
: org-gcal

新規で入れたカレンダーは取得できる。
古いイベントを取得するには？

/persist/を削除
/request/を削除
/org-gcal/を削除

再起動しないと挙動は変わらない

[[https://github.com/emacsmirror/org-gcal][emacsmirror/org-gcal: Org sync with Google Calendar]]
こっちkiddさんのをフォークした新本家？

[[https://github.com/emacsmirror/org-gcal][After the initial fetch, running org-gcal-fetch will retrieve *newly-created events* and update *already-fetched events*.]]

* org-gtasks - Google Tasksとの連携
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-01 Fri 11:03
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_OLPATH: org-mode関連の設定
:ARCHIVE_CATEGORY: README
:END:
- 不満点
  - pullすると、TODO以外の要素が消されてしまう（destructive）
  - 要素が全て削除され、更新される
  - pushすると、通常ノードもTODOとして更新されてしまう。

#+begin_src emacs-lisp
  (leaf deferred :straight t)
  (leaf request-deferred :straight t)
#+end_src

#+RESULTS:
: request-deferred

#+begin_src emacs-lisp
  (leaf org-gtasks
    :init
    ;; (add-to-list 'load-path "~/git/org-gtasks/")
    :straight (org-gtasks :type git :host github :repo "JulienMasson/org-gtasks")
    :require t
    :config
    (let* ((json-object-type 'hash-table)
           (json-array-type 'list)
           (json-key-type 'string)
           ;; (gcal-json "~/Dropbox/Org/gtasks/client_secret_561086653074-tt3qfq09hj2sjrd13c9vuvpurr54dk37.apps.googleusercontent.com.json")
           (gcal-json "~/.client_secret.json")
           (json (json-read-file gcal-json))
           (installed (gethash "installed" json))
           (client-id (gethash "client_id" installed))
           (client-secret (gethash "client_secret" installed)))
      (org-gtasks-register-account :name "yc@aiit.ac.jp"
                                   :directory "~/Dropbox/Org"
                                   :client-id client-id
                                   :client-secret client-secret)))
#+end_src

#+RESULTS:
: org-gtasks

* TODO annotate.el - ファイルを編集せずに注釈をつける
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-02 Sat 21:12
:ARCHIVE_FILE: ~/.emacs.d/README.org
:ARCHIVE_OLPATH: 未整理
:ARCHIVE_CATEGORY: README
:ARCHIVE_TODO: TODO
:END:
- annotate-modeを設定する
  - prog-mode-hookにannotate-modeを設定
- 操作方法
  - C-x C-q (M-x read-only-mode)でも利用できる
  - C-c C-a でアノテーションがつけられる
  - C-c C-d でアノテーション削除
  - C-c [ で前のアノテーション, C-c ] で次のアノテーション
  - C-c C-s でアノテーションのリスト
    - 標準ではqueryが聞かれる->nilにしてみた
- アノテーションのファイルは ~/.emacs.d/annotations

- companyとの相性が悪いようだ

#+begin_src emacs-lisp :tangle no
  (leaf annotate
    :straight t
    :require t
    :hook (prog-mode-hook . annotate-mode)
    :custom (annotate-summary-ask-query . nil))
#+end_src

#+RESULTS:
: annotate

** 参考
- [[https://github.com/bastibe/annotate.el][bastibe/annotate.el: Annotate.el]]
- [[http://emacs.rubikitch.com/annotate/][annotate.el : 【コードリーディング支援】ファイルを修正することなく行に注釈をつける]]
