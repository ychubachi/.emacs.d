#+TITLE: early-init.el.el
#+AUTHOR: Yoshihide Chubachi


#+begin_comment
+ early-init.elを生成するには C-c C-v t (org-babel-tangle) を実行
#+end_comment

* あらまし
+ early-init.elはinit.elより前に読み込まれる設定ファイルである
+ ここでパッケージ管理機能の初期設定等を行うと、後で読み込まれるinit.elに反映さ
  れる
+ GUIの初期化前に読み込まれるので、例えばフレームのサイズをここで設定しておくと、
  はじめからその設定で表示される
  + init.elで変更すると一度デフォルトのサイズで表示されてから、設定したサイズに
    切り替わるので画面がちらつく
* ヘッダー
#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; early-init.el --- My early-init.el  -*- lexical-binding: t; -*-
  ;; Copyright (C) 2022-2025 Yoshihide Chubachi

  ;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; このファイルはearly-init.orgから生成します。

  ;;; Code:
#+end_src

* 設定
** パッケージシステムの自動初期化を行わせない
+ Emacs 27以降、 init.el を実行する前に自動的に (package-initialize) を実行する
+ ここではパッケージマネージャを手動で初期化するので、自動実行を行わないようにす
  る
  + これにより (package-initialize) が二重に実行されるのを防ぐ
+ 参考
  + [[https://www.reddit.com/r/emacs/comments/t66hue/what_does_setq_packageenableatstartup_nil/][What does "(setq package-enable-at-startup nil) (package-initialize)" in Emacs config do? : r/emacs]]

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup nil)
#+end_src

** パッケージマネージャの初期化
+ 標準パッケージとstraight.el、leafを設定

#+begin_src emacs-lisp :tangle "early-init.el"
  (eval-and-compile
    (prog1 "package"
      (customize-set-variable
       'package-archives '(("org" . "https://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))
      (package-initialize))

    (prog1 "straight.el"
      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name
              "straight/repos/straight.el/bootstrap.el"
              (or (bound-and-true-p straight-base-dir)
                  user-emacs-directory)))
            (bootstrap-version 7))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage)))

    (prog1 "leaf"
      (straight-use-package 'leaf)
      (straight-use-package 'leaf-keywords)
      (leaf-keywords-init)))
#+end_src
** orgパッケージを最新にする
+ orgパッケージを最新バージョンに更新する
+ init.elでconfig.orgをタングルする前に行う

#+begin_src emacs-lisp :tangle "early-init.el"
(leaf org :straight t)
#+end_src

** 優先設定
*** no-littering - .emacs.d/をきれいに保つ
- すべてのパッケージの前に実行するために、init.elのなるだけ冒頭に設定
  - [[https://github.com/emacscollective/no-littering][emacscollective/no-littering: Help keeping ~/.emacs.d clean]]

+ Lock ファイル
+ recentf用の設定
+ カスタマイズファイルの指定
+ auto-save、backupとundo-treeについて
  - セキュリティの問題が懸念される

#+begin_src emacs-lisp :tangle "early-init.el"
    (leaf no-littering :straight t :require t
            :url "https://github.com/emacscollective/no-littering#usage"
            :init
            (let ((dir (no-littering-expand-var-file-name "lock-files/")))
              (make-directory dir t)
              (setq lock-file-name-transforms `((".*" ,dir t))))

            (require 'recentf)
            (add-to-list 'recentf-exclude
                         (recentf-expand-file-name no-littering-var-directory))
            (add-to-list 'recentf-exclude
                         (recentf-expand-file-name no-littering-etc-directory))

            (custom-set-variables '(custom-file
                                    (no-littering-expand-etc-file-name "custom.el"))))
#+end_src

*** ネイティブコンパイルのキャッシュ設定
+ no-litteringのための設定
+ Emacs 29以上の際に行うと良いようだ
  + https://github.com/emacscollective/no-littering/blob/master/README.org

#+Begin_src emacs-lisp :tangle early-init.el
  (when (and (fboundp 'startup-redirect-eln-cache)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
  (startup-redirect-eln-cache
   (convert-standard-filename
    (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src

#+RESULTS:

** COMMENT Look & Feel
*** COMMENT wombat
#+begin_src emacs-lisp :tangle "early-init.el"
(load-theme 'wombat)
#+end_src

#+RESULTS:
: t

*** modus-themes
#+begin_src emacs-lisp :tangle "early-init.el"
  (leaf modus-themes
    :disabled nil
    :straight t                     ; omit this to use the built-in themes
    :custom
    (modus-themes-italic-constructs . nil)
    (modus-themes-bold-constructs . nil)
    (modus-themes-region . '(bg-only no-extend))
    (modus-themes-org-blocks . 'gray-background) ; {nil,'gray-background,'tinted-background}
    (modus-themes-subtle-line-numbers . t)
    (modus-themes-mode-line . '(moody borderless (padding . 0) (height . 0.9)))
    (modus-themes-syntax . '(yellow-comments green-strings))
    (modus-themes-hl-line . '(underline accented)) ;'(underline accented)
    (modus-themes-paren-match . '(intense underline))
    ;; (modus-themes-headings . ; this is an alist: read the manual or its doc string
    ;;                        ;; https://typescale.com/ 1.125 - Major Second
    ;;                        '((1 . (bold 1.802))
    ;;                          (2 . (regular 1.602))
    ;;                          (3 . (bold 1.424))
    ;;                          (4 . (regular 1.266))
    ;;                          (5 . (reqular 1.125))
    ;;                          (t . (regular))))
    :init
    (require-theme 'modus-themes)
    ;; Load the theme of your choice:
    (load-theme 'modus-operandi :no-confirm)
    ;; (load-theme 'modus-vivendi :no-confirm)
    :bind
    ("<f5>" . modus-themes-toggle))
#+end_src

#+RESULTS:
: modus-themes

* フッター
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el ends here
#+end_src
